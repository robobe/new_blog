{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>ROS</p> <p>Simulation</p> <p>Robotics</p> <p>Programming</p> <p>Embedded</p> <p>DevOps</p>"},{"location":"todo/","title":"Todo","text":""},{"location":"todo/#terminlog","title":"Terminlog","text":"<ul> <li>Add version in palette</li> <li>Resize buttons</li> <li>move to docker</li> </ul>"},{"location":"todo/#arduino","title":"arduino","text":"<ul> <li>custom library</li> <li>arduino oop</li> </ul>"},{"location":"todo/#python","title":"python","text":"<ul> <li>move to uv</li> </ul>"},{"location":"todo/#zenoh","title":"zenoh","text":"<ul> <li>shm</li> <li>pico</li> </ul>"},{"location":"todo/#ros","title":"ros","text":"<ul> <li>qos, history and liveliness write example</li> </ul>"},{"location":"todo/#message_filter","title":"message_filter","text":"<ul> <li>Add timeout to queue</li> </ul>"},{"location":"DevOps/","title":"Devops","text":"<p>Docker</p> <p>Linux</p> <p>Networking</p> <p>VSCode</p> <p>GIT</p> <p>Tools</p>"},{"location":"DevOps/docker/","title":"Docker","text":"<p>Tips / Settings</p> <p>Docker Compose</p> <p>Images</p> <p>Dockerfile snippets and templates</p> <p>docker nvidia</p>"},{"location":"DevOps/docker/#posts","title":"Posts","text":"<ul> <li>Running and Building ARM Docker Containers on x86</li> <li>Access Host Devices in Docker: how to connect hardware peripheral and share with docker</li> </ul>"},{"location":"DevOps/docker/#to-read","title":"To Read","text":"<ul> <li>Shared Memory &amp; Docker</li> </ul>"},{"location":"DevOps/docker/docker_build_arm/","title":"Running and Building ARM Docker Containers on x86","text":"","tags":["docker","arm","qemu"]},{"location":"DevOps/docker/docker_build_arm/#install","title":"Install","text":"<pre><code>sudo apt-get install qemu binfmt-support qemu-user-static\n</code></pre> <p>binfmt</p> <p>binfmt (Binary Format) is a Linux kernel feature that allows execution of non-native binary formats (executables compiled for different architectures). This enables cross-architecture execution, such as running ARM64 binaries on an x86_64 machine.</p> <p>binfmt works with interpreters like QEMU to translate and execute foreign binaries transparently.</p>","tags":["docker","arm","qemu"]},{"location":"DevOps/docker/docker_build_arm/#registration-with-docker","title":"Registration With docker","text":"<pre><code>docker run --rm --privileged multiarch/qemu-user-static --reset -p yes\n</code></pre> <p>-p yes</p> <p>This register qemu persistent and available for future docker to run</p> <p>multiarch/qemu-user-static</p> <ul> <li>The multiarch/qemu-user-static image is pulled and run temporarily to register QEMU with your system.</li> <li>It doesn't leave behind an actual image that appears in docker images.</li> <li></li> </ul> <p>The purpose of this command is to enable the host system to run binaries compiled for different architectures (such as ARM) using QEMU. This is particularly useful for building and running ARM Docker containers on an x86 host.</p>","tags":["docker","arm","qemu"]},{"location":"DevOps/docker/docker_build_arm/#usage","title":"Usage","text":"Dockerfile<pre><code>FROM ubuntu:22.04\nRUN apt-get update &amp;&amp; apt-get install -y --no-install-recommends \\\n    &amp;&amp; rm -rf /var/lib/apt/lists/*\nCMD [\"/bin/bash\"]\n</code></pre>","tags":["docker","arm","qemu"]},{"location":"DevOps/docker/docker_build_arm/#build-and-run","title":"Build and Run","text":"Build<pre><code>docker build --platform linux/arm64 -t ubuntu/22.04:arm64 .\ndocker build --platform linux/amd64 -t ubuntu/22.04:amd64 .\n</code></pre> Run<pre><code>docker run --rm -it --platform linux/arm64 ubuntu/22.04:arm64 uname -m\ndocker run --rm -it --platform linux/amd64 ubuntu/22.04:amd64 uname -m\n</code></pre> <p>buildX</p> <p>Use buildX to build multi-arch images with the same TAG work only if we push to a registry (Manifest)</p>","tags":["docker","arm","qemu"]},{"location":"DevOps/docker/docker_build_arm/#references","title":"References","text":"<ul> <li>Running and Building ARM Docker Containers on x86</li> </ul>","tags":["docker","arm","qemu"]},{"location":"DevOps/docker/docker_host_devices/","title":"Access Host device in docker","text":"<p>Connect and share hardware device with docker container Connect joystick, camera and serial device and share with docker container</p>","tags":["docker","devices","hardware","usb","joystick"]},{"location":"DevOps/docker/docker_host_devices/#joystick","title":"joystick","text":"","tags":["docker","devices","hardware","usb","joystick"]},{"location":"DevOps/docker/docker_host_devices/#host","title":"host","text":"<pre><code># check dmesg\n\n# check device\nll /dev/input/js0\n\ncrw-rw-r--+ 1 root input 13, 0 Apr 25 07:44 /dev/input/js0\n</code></pre> test joy functionality<pre><code>sudo apt install joystick\n\n## test\njstest /dev/input/js0\n</code></pre>","tags":["docker","devices","hardware","usb","joystick"]},{"location":"DevOps/docker/docker_host_devices/#docker","title":"docker","text":"share device with container<pre><code>docker run -it --rm \\\n--name test \\\n--hostname test \\\n--device /dev/input/js0 \\\nubuntu:22.04 \\\n/bin/bash\n</code></pre>","tags":["docker","devices","hardware","usb","joystick"]},{"location":"DevOps/docker/docker_host_devices/#device-cgroup-rule","title":"device-cgroup-rule","text":"<p>Docker option used to grant fine-grained access to devices from the Linux cgroup (control group) level.</p> <p>cgroup rules</p> <p>Linux cgroups (control groups) are a powerful kernel feature that allows you to limit, isolate, and prioritize resources (like CPU, memory, devices, I/O, etc.) for groups of processes. more</p> <pre><code>--device-cgroup-rule=\"type major:minor permissions\"\n</code></pre> <p>permission</p> <ul> <li>r(read)</li> <li>w(write)</li> <li>m(mknod- permission to create spacial device file)</li> </ul> joystick check type and major, minor<pre><code>ll /dev/input/js0\n\ncrw-rw-r--+ 1 root input 13, 0 Apr 25 07:44 /dev/input/js0\n</code></pre> <ul> <li>type: <code>c</code></li> <li>major: 13</li> <li>minor: 0</li> </ul> run docker with device cgroup rule<pre><code>docker run -it --rm \\\n--name test \\\n--hostname test \\\n-v /dev/input:/dev/input \\\n--device-cgroup-rule='c 13:* rwm' \\\nubuntu:22.04 \\\n/bin/bash\n</code></pre> <p>privileged</p> <p>No <code>--privileged</code> mode need to run the container and share the device</p>","tags":["docker","devices","hardware","usb","joystick"]},{"location":"DevOps/docker/docker_host_devices/#demo","title":"Demo","text":"<ul> <li>Run docker with none root permission</li> <li>Share joystick</li> <li>Connect the joystick after the container run</li> <li>Disconnect and connect again</li> </ul> Dockerfile.joytest<pre><code>FROM ubuntu:22.04\nRUN apt-get update &amp;&amp; apt-get install -y --no-install-recommends \\\n        joystick \\\n    &amp;&amp; rm -rf /var/lib/apt/lists/*\n\n\n\nRUN groupadd -g 107 input\n\nARG USERNAME=user\nARG UID=1000\nARG GID=1000\n\n\n# add new sudo user\nRUN useradd -m $USERNAME &amp;&amp; \\\n    echo \"$USERNAME:$USERNAME\" | chpasswd &amp;&amp; \\\n    usermod --shell /bin/bash $USERNAME &amp;&amp; \\\n    usermod -aG sudo $USERNAME &amp;&amp; \\\n    usermod -aG input $USERNAME &amp;&amp; \\\n    usermod -aG dialout $USERNAME &amp;&amp; \\\n    mkdir /etc/sudoers.d &amp;&amp; \\\n    echo \"$USERNAME ALL=(ALL) NOPASSWD:ALL\" &gt;&gt; /etc/sudoers.d/$USERNAME &amp;&amp; \\\n    chmod 0440 /etc/sudoers.d/$USERNAME &amp;&amp; \\\n    usermod  --uid $UID $USERNAME &amp;&amp; \\\n    groupmod --gid $GID $USERNAME\n\nCMD [\"/bin/bash\"]\n</code></pre> <p>input group</p> <p>Create <code>input</code> group on docker </p> <pre><code>RUN groupadd -g 107 input\n</code></pre> <p>Add user (none root) to <code>input group</code></p> <pre><code>usermod -aG input $USERNAME &amp;&amp; \\\n</code></pre> build<pre><code>docker build -f Dockerfile.joytest -t joystick:test .\n</code></pre> run and test<pre><code>docker run -it --rm \\\n--user user \\\n--name test \\\n--hostname test \\\n-v /dev/input:/dev/input \\\n--device-cgroup-rule='c 13:* rwm' \\\njoystick:test \\\n/bin/bash\n</code></pre> test - joystick<pre><code>ll /dev/input/js0\njstest /dev/input/js0\n</code></pre>","tags":["docker","devices","hardware","usb","joystick"]},{"location":"DevOps/docker/docker_host_devices/#run-all-the-scenarios","title":"run all the Scenarios","text":"<ul> <li>Run container with joy connect. disconnect and connect again</li> <li>Run container when joy disconnect, connect and check</li> </ul>","tags":["docker","devices","hardware","usb","joystick"]},{"location":"DevOps/docker/docker_compose/","title":"Docker Compose","text":"<p>Docker Compose is a tool for defining and managing multi-container Docker applications using a YAML configuration file. Instead of manually running multiple docker run commands</p> <p><code>docker-compose</code> vs <code>docker compose</code></p> <p><code>docker-compose</code> is the original command, <code>docker compose</code> is the new command.  The new command is available in Docker 1.29 and later.</p>","tags":["docker","compose"]},{"location":"DevOps/docker/docker_compose/#usage","title":"Usage","text":"<pre><code>docker compose -f docker-compose.yml up\ndocker compose -f docker-compose.yml run &lt;service_name&gt; &lt;command&gt;\n</code></pre> <p>gui</p> <p>TBD</p>","tags":["docker","compose"]},{"location":"DevOps/docker/docker_compose/#compose-override","title":"compose override","text":"<p>Docker Compose override is a feature that lets you customize or extend a base docker-compose.yml file using additional YAML files like docker-compose.override.yml </p> <p>For example run nvidia support on pc and nvidia jetson</p> docker-compose.yaml<pre><code>services:\n  dev:\n    image: your-gpu-app:latest\n    deploy:\n      resources:\n        reservations:\n          devices:\n            - capabilities: [gpu]\n</code></pre> docker-compose.jetson.yaml<pre><code>services:\n  dev:\n    runtime: nvidia\n    environment:\n      - NVIDIA_VISIBLE_DEVICES=all\n      - NVIDIA_DRIVER_CAPABILITIES=compute,utility\n</code></pre> <pre><code>docker compose -f docker-compose.yml -f docker-compose.jetson.yml up\n</code></pre>","tags":["docker","compose"]},{"location":"DevOps/docker/docker_compose/#references","title":"References","text":"<ul> <li>Ultimate Docker Compose Tutorial</li> </ul>","tags":["docker","compose"]},{"location":"DevOps/docker/docker_compose/compose_tips_and_templates/","title":"Docker compose tips and templates","text":"","tags":["docker","compose","tips","templates"]},{"location":"DevOps/docker/docker_compose/compose_tips_and_templates/#add-hostname-to-etchosts","title":"Add hostname to /etc/hosts","text":"<p>Used to manually define hostname-to-IP address mappings, similar to adding lines to the /etc/hosts file inside the container.</p> <pre><code>hostname: dev\nextra_hosts:\n    - \"dev:127.0.0.1\"\n</code></pre>","tags":["docker","compose","tips","templates"]},{"location":"DevOps/docker/docker_images/","title":"Index","text":"<p>gui</p> <p>TBD</p>","tags":["docker","images"]},{"location":"DevOps/docker/docker_images/#docker-images","title":"Docker Images","text":"<ul> <li>x11</li> </ul>","tags":["docker","images"]},{"location":"DevOps/docker/docker_images/x11/","title":"X11 Docker Images","text":"<p>Create docker images for X11 GUI applications. base on ubunu:22.04 </p> Dockerfile dockerfile<pre><code># Use Ubuntu 22.04 as the base image\nFROM ubuntu:22.04\n\n# Set non-interactive mode for apt-get to avoid prompts\nENV DEBIAN_FRONTEND=noninteractive\n\n# Update package list and install X11 and OpenGL dependencies\nRUN apt-get update &amp;&amp; apt-get install -y \\\n    # Core X11 libraries\n    libx11-6 \\\n    libxext6 \\\n    libxrender1 \\\n    libxinerama1 \\\n    libxcursor1 \\\n    libxrandr2 \\\n    libxi6 \\\n    # OpenGL/Mesa for rendering\n    libgl1-mesa-glx \\\n    libgl1-mesa-dri \\\n    libglu1-mesa \\\n    # Utilities for X11 auth and testing\n    xauth \\\n    mesa-utils \\\n    # apps\n    cheese \\\n    gstreamer1.0-alsa \\\n    gstreamer1.0-libav \\\n    gstreamer1.0-plugins-bad \\\n    gstreamer1.0-plugins-base \\\n    gstreamer1.0-plugins-good \\\n    gstreamer1.0-plugins-ugly \\\n    gstreamer1.0-tools \\\n    # Clean up\n    &amp;&amp; rm -rf /var/lib/apt/lists/*\n\n# Set up environment variables for X11\nENV DISPLAY=:0\n# Optional: Define a default runtime directory (can be overridden at runtime)\nENV XDG_RUNTIME_DIR=/tmp/runtime-root\n\n# Create a non-root user (optional, for better security and matching host permissions)\nARG USERNAME=user\nARG UID=1000\nARG GID=1000\n\n# add new sudo user\nRUN useradd -m $USERNAME &amp;&amp; \\\n        echo \"$USERNAME:$USERNAME\" | chpasswd &amp;&amp; \\\n        usermod --shell /bin/bash $USERNAME &amp;&amp; \\\n        usermod -aG sudo $USERNAME &amp;&amp; \\\n        usermod -aG video $USERNAME &amp;&amp; \\\n        usermod -aG dialout $USERNAME &amp;&amp; \\\n        mkdir /etc/sudoers.d &amp;&amp; \\\n        echo \"$USERNAME ALL=(ALL) NOPASSWD:ALL\" &gt;&gt; /etc/sudoers.d/$USERNAME &amp;&amp; \\\n        chmod 0440 /etc/sudoers.d/$USERNAME &amp;&amp; \\\n        usermod  --uid $UID $USERNAME &amp;&amp; \\\n        groupmod --gid $GID $USERNAME\n\n# Switch to the non-root user\n# USER $USERNAME\n\n# Set working directory\nWORKDIR /home/$USERNAME\n\n# Default command (can be overridden)\nCMD [\"bash\"]\n</code></pre> build<pre><code>docker build -t ubuntu/22.04:gui -f Dockerfile .\n</code></pre> <p>The command xhost +local:docker is used on Linux systems to manage access control for the X11 display server. Allows any process running locally as part of the \"docker\" context (Docker containers) to connect to your X server.</p> <pre><code>xhost +local:docker\n</code></pre> <p>check x11 app</p> <p>glxgears is a simple OpenGL application that draws a rotating set of gears. It is often used to test the performance of OpenGL on a system.</p> run<pre><code>docker run -it --rm \\\n    -e DISPLAY=$DISPLAY \\\n    -v /tmp/.X11-unix:/tmp/.X11-unix \\\n    ubuntu/22.04:gui \\\n    glxgears\n</code></pre>","tags":["docker","x11","gui","devices"]},{"location":"DevOps/docker/docker_images/x11/#share-camera-with-docker","title":"Share camera with docker","text":"","tags":["docker","x11","gui","devices"]},{"location":"DevOps/docker/docker_images/x11/#simple","title":"Simple","text":"<p>Device must be connected before running the container.</p> run<pre><code>docker run -it --rm \\\n    --user user \\\n    --hostname gui \\\n    --device /dev/video0:/dev/video0 \\\n    -e DISPLAY=$DISPLAY \\\n    --user user \\\n    -v /tmp/.X11-unix:/tmp/.X11-unix \\\n    -v /run/user/1000:/run/user/1000 \\\n    ubuntu/22.04:gui \\\n    /bin/bash\n</code></pre> <pre><code># Test\ngst-launch-1.0 videotestsrc ! videoconvert ! autovideosink\n\n# v4l\ngst-launch-1.0 v4l2src device=/dev/video0 ! videoconvert ! autovideosink\n</code></pre>","tags":["docker","x11","gui","devices"]},{"location":"DevOps/docker/docker_images/x11/#advanced","title":"Advanced","text":"<pre><code>ls -l /dev/video*\n#\ncrw-rw----+ 1 root video 81, 0 Apr  5 16:57 /dev/video0\n</code></pre> run<pre><code>docker run -it --rm \\\n    --user user \\\n    --hostname gui \\\n    -e DISPLAY=$DISPLAY \\\n    -v /tmp/.X11-unix:/tmp/.X11-unix \\\n    -v /dev/dri:/dev/dri \\\n    --device-cgroup-rule='c 81:* rwm' \\\n    -v /dev:/dev \\\n    ubuntu/22.04:gui \\\n    /bin/bash\n</code></pre> <p>Advanced</p> <ul> <li>--device-cgroup-rule: allows the container to interact with any video device (major number 81) created after startup.</li> <li>-v /dev:/dev: ensures the container sees the host\u2019s /dev directory in real-time.host.</li> </ul>","tags":["docker","x11","gui","devices"]},{"location":"DevOps/docker/docker_nvidia/","title":"NVIDIA docker","text":"<p>NVidia container toolkit enables GPU acceleration in docker container</p> <ul> <li>Install Toolkit</li> <li>Configure Docker</li> <li>Run with GPU</li> </ul>","tags":["docker","nvidia","nvidia-container-toolkit"]},{"location":"DevOps/docker/docker_nvidia/#install","title":"Install","text":"add nvidia toolkit repository<pre><code>curl -fsSL https://nvidia.github.io/libnvidia-container/gpgkey | sudo gpg --dearmor -o /usr/share/keyrings/nvidia-container-toolkit-keyring.gpg \\\n  &amp;&amp; curl -s -L https://nvidia.github.io/libnvidia-container/stable/deb/nvidia-container-toolkit.list | \\\n    sed 's#deb https://#deb [signed-by=/usr/share/keyrings/nvidia-container-toolkit-keyring.gpg] https://#g' | \\\n    sudo tee /etc/apt/sources.list.d/nvidia-container-toolkit.list\n</code></pre> install<pre><code>sudo apt update\nsudo apt-get install -y nvidia-container-toolkit\n</code></pre>","tags":["docker","nvidia","nvidia-container-toolkit"]},{"location":"DevOps/docker/docker_nvidia/#configure-docker","title":"Configure Docker","text":"<pre><code>sudo nvidia-ctk runtime configure --runtime=docker\n</code></pre> <pre><code>systemctl --user restart docker\n</code></pre>","tags":["docker","nvidia","nvidia-container-toolkit"]},{"location":"DevOps/docker/docker_nvidia/#usage","title":"Usage","text":"<p>run image form docker hub with cuda </p> <pre><code>docker pull nvidia/cuda:12.2.2-devel-ubuntu22.04\n</code></pre> <p>Run container with <code>--gps all</code> to enable nvidia gpu in container</p>","tags":["docker","nvidia","nvidia-container-toolkit"]},{"location":"DevOps/docker/docker_nvidia/#run","title":"Run","text":"<pre><code>docker run --gpus all -it nvidia/cuda:12.2.2-devel-ubuntu22.04\n</code></pre>","tags":["docker","nvidia","nvidia-container-toolkit"]},{"location":"DevOps/docker/docker_nvidia/#check","title":"check","text":"<pre><code>nvidia-smi\nnvcc --version\n</code></pre>","tags":["docker","nvidia","nvidia-container-toolkit"]},{"location":"DevOps/docker/docker_nvidia/#reference","title":"Reference","text":"<ul> <li>NVIDIA Container Toolkit</li> </ul>","tags":["docker","nvidia","nvidia-container-toolkit"]},{"location":"DevOps/docker/dockerfile_templates/","title":"Dockerfile template and snippets","text":"<p>Dockerfile templates and snippets for various applications and services.</p> <p>Non root user</p> <p>GStreamer snippet</p> <p>Architecture condition</p>","tags":["docker","dockerfile","templates","user","pip"]},{"location":"DevOps/docker/dockerfile_templates/#user","title":"User","text":"<p>Add user and install sudo support</p> Dockerfile<pre><code>ARG USERNAME=user\nARG USER_UID=1000\nARG USER_GID=$USER_UID\n\n# Check if \"ubuntu\" user exists, delete it if it does, then create the desired user\nRUN if getent passwd ubuntu &gt; /dev/null 2&gt;&amp;1; then \\\n        userdel -r ubuntu &amp;&amp; \\\n        echo \"Deleted existing ubuntu user\"; \\\n    fi &amp;&amp; \\\n    groupadd --gid $USER_GID $USERNAME &amp;&amp; \\\n    useradd -s /bin/bash --uid $USER_UID --gid $USER_GID -m $USERNAME &amp;&amp; \\\n    echo \"Created new user $USERNAME\"\n\n# Add sudo support for the non-root user\nRUN apt-get update &amp;&amp; apt-get install -y sudo \\\n  &amp;&amp; echo $USERNAME ALL=\\(root\\) NOPASSWD:ALL &gt; /etc/sudoers.d/$USERNAME\\\n  &amp;&amp; chmod 0440 /etc/sudoers.d/$USERNAME \\\n  &amp;&amp; rm -rf /var/lib/apt/lists/*\n</code></pre>","tags":["docker","dockerfile","templates","user","pip"]},{"location":"DevOps/docker/dockerfile_templates/#usage","title":"usage","text":"Terminal<pre><code>docker run --rm -it --user user my_ubuntu:22.04 id\n#\nuid=1000(user) gid=1000(user) groups=1000(user)\n</code></pre>","tags":["docker","dockerfile","templates","user","pip"]},{"location":"DevOps/docker/dockerfile_templates/#user-with-device-access","title":"User with device access","text":"","tags":["docker","dockerfile","templates","user","pip"]},{"location":"DevOps/docker/dockerfile_templates/#todo-move-to-embedded-section","title":"TODO: move to embedded section","text":"","tags":["docker","dockerfile","templates","user","pip"]},{"location":"DevOps/docker/dockerfile_templates/#usage_1","title":"usage","text":"<pre><code>docker run --rm -it \\\n--user user \\\n--group-add=dialout \\\n--device /dev/ttyACM0 \\\nmy_ubuntu:22.04 \\\nll /dev/ttyACM0\n</code></pre>","tags":["docker","dockerfile","templates","user","pip"]},{"location":"DevOps/docker/dockerfile_templates/#architecture-condition","title":"Architecture condition","text":"<pre><code>RUN ARCH=$(uname -m) &amp;&amp; \\\n    apt update &amp;&amp; \\\n    if [ \"$ARCH\" = \"aarch64\" ]; then \\\n        apt install -y ./OpenCV-unknown-aarch64-*.deb; \\\n    elif [ \"$ARCH\" = \"x86_64\" ]; then \\\n        apt install -y ./OpenCV-unknown-x86_64-*.deb; \\\n    else \\\n        echo \"Unsupported architecture: $ARCH\"; exit 1; \\\n    fi &amp;&amp; \\\n</code></pre>","tags":["docker","dockerfile","templates","user","pip"]},{"location":"DevOps/docker/dockerfile_templates/#gstreamer","title":"GStreamer","text":"<pre><code>RUN apt-get update \\\n    &amp;&amp; apt-get -y install --no-install-recommends \\\n        libgstreamer1.0-0 \\\n        gstreamer1.0-plugins-base \\\n        gstreamer1.0-plugins-good \\\n        gstreamer1.0-plugins-bad \\\n        gstreamer1.0-plugins-ugly \\\n        gstreamer1.0-tools \\\n        python3-gi \\\n        gir1.2-gstreamer-1.0 \\\n        libgstreamer-plugins-base1.0-dev \\\n        gstreamer1.0-libav \\\n        gstreamer-1.0 \\\n    &amp;&amp; apt-get clean -y \\\n    &amp;&amp; rm -rf /var/lib/apt/lists/*\n</code></pre>","tags":["docker","dockerfile","templates","user","pip"]},{"location":"DevOps/docker/tips_settings/","title":"Docker tips","text":"","tags":["docker","tips"]},{"location":"DevOps/docker/tips_settings/#images","title":"images","text":"","tags":["docker","tips"]},{"location":"DevOps/docker/tips_settings/#remove-all-dangling-images","title":"Remove all dangling images","text":"<pre><code>docker image prune\n</code></pre>","tags":["docker","tips"]},{"location":"DevOps/docker/tips_settings/#prompt","title":"Prompt","text":"<pre><code>PS1='\ud83d\udc33  \\[\\033[1;36m\\]\\h \\[\\033[1;34m\\]\\W\\[\\033[0;35m\\] \\[\\033[1;36m\\]# \\[\\033[0m\\]'\n</code></pre>","tags":["docker","tips"]},{"location":"DevOps/git/","title":"Git","text":"<p>Tips / Settings</p> <p>Git branching</p> <p>Github</p>","tags":["git"]},{"location":"DevOps/git/#cheat-sheet","title":"Cheat sheet","text":"<ul> <li>git diff</li> <li>git rebase</li> <li>git cherrypick</li> <li>Git stash</li> <li>Git submodule</li> <li>Git hooks</li> </ul>","tags":["git"]},{"location":"DevOps/git/#git-tools","title":"Git tools","text":"<p>GitKraken</p>","tags":["git"]},{"location":"DevOps/git/git_cherrypick/","title":"Git Cherrypick","text":"<p>Git cherry-pick command allows you to apply a specific commit from one branch onto another</p> <pre><code># list commit from other branch\ngit log &lt;branch name&gt; --oneline\n\n# cherry\n# from current branch cheery  commit from another branch\ngit cherry-pick &lt;commit hash&gt;\n</code></pre>","tags":["git","cherrypick"]},{"location":"DevOps/git/git_cherrypick/#cherry-pick-multiple-commits","title":"cherry pick multiple commits","text":"<pre><code>git cheery-pick &lt;hash1&gt; &lt;hash2&gt;\n</code></pre> <p>apply order</p> <p>cherry pick apply changes by the hash order</p>","tags":["git","cherrypick"]},{"location":"DevOps/git/git_diff/","title":"Git diff","text":"git command git diff shows the changes that you have made in your working directory but not yet staged for commit    It compares the files you have modified in your working directory with the last committed version of those files. git diff --stage shows the differences between the staging area (index) and the last commit git diff ref1..ref2 compare the changes between two different references (e.g., commits, branches, tags)","tags":["git","git-diff"]},{"location":"DevOps/git/git_diff/#other-tips","title":"other tips","text":"","tags":["git","git-diff"]},{"location":"DevOps/git/git_diff/#compare-specific-file","title":"compare specific file","text":"<pre><code>git diff &lt;ref1&gt;..&lt;ref2&gt; -- &lt;file-path&gt;\n</code></pre>","tags":["git","git-diff"]},{"location":"DevOps/git/git_hooks/","title":"git pre-commit","text":"<p>All Git hooks are ordinary scripts that Git executes when certain events occur in the repository like: - pre-commit - post-commit - update - post-merge - pre-push - full list and more</p> <p>git hooks locate in <code>.git/hooks</code> folder</p>","tags":["git","hooks","pre-commit"]},{"location":"DevOps/git/git_hooks/#pre-commit","title":"pre-commit","text":"<p><code>pre-commit</code> A framework for managing and maintaining multi-language pre-commit hooks.</p>","tags":["git","hooks","pre-commit"]},{"location":"DevOps/git/git_hooks/#install","title":"Install","text":"<pre><code>python -m pip install pre-commit\n#or from pyz\n# Download from release\npython pre-commit-#.#.#.pyz\n</code></pre>","tags":["git","hooks","pre-commit"]},{"location":"DevOps/git/git_hooks/#usage","title":"usage","text":"<ul> <li>Create config file at project root folder</li> <li>Add hooks</li> <li>Install hooks</li> <li>Test / Run hooks</li> </ul>","tags":["git","hooks","pre-commit"]},{"location":"DevOps/git/git_hooks/#config-hooks","title":"config hooks","text":"<pre><code>touch .pre-commit-config.yaml\n</code></pre> <pre><code>repos:\n-   repo: https://github.com/psf/black\n    rev: 23.3.0\n    hooks:\n    -   id: black\n</code></pre> <p>supported hooks</p> <p><code>rev</code> can take from github project releases page</p> <p>supported hooks</p> <p>Get hooks list from pre-commit</p>","tags":["git","hooks","pre-commit"]},{"location":"DevOps/git/git_hooks/#install-hook","title":"install hook","text":"<pre><code>pre-commit install\n</code></pre>","tags":["git","hooks","pre-commit"]},{"location":"DevOps/git/git_hooks/#test-run","title":"Test/ run","text":"<pre><code>#-a all-files\npre-commit run -a\n</code></pre>","tags":["git","hooks","pre-commit"]},{"location":"DevOps/git/git_hooks/#custom-script-demo","title":"Custom script demo","text":"<p>run shell script</p> <pre><code>repos:\n- repo: local\n  hooks:\n    - id: shell_script\n      name: shell_script\n      entry: path_to_shell_script.sh\n      language: script\n</code></pre>","tags":["git","hooks","pre-commit"]},{"location":"DevOps/git/git_hooks/#references","title":"References","text":"<ul> <li>pre-commit</li> <li>4 Tools to Format &amp; Check your Code with Pre-Commit</li> </ul>","tags":["git","hooks","pre-commit"]},{"location":"DevOps/git/git_rebase/","title":"GIT Rebase","text":"<p><pre><code>#switch to feature branch\ngit checkout feature/cool\n</code></pre> </p> <pre><code># from feature/cool\ngit checkout feature/cool\ngit rebase master\n</code></pre> <p></p> <pre><code># from master\ngit checkout master\ngit rebase feature/cool\n</code></pre> <p></p>","tags":["git","rebase"]},{"location":"DevOps/git/git_rebase/#reference","title":"Reference","text":"<ul> <li>A better Git workflow with rebase</li> </ul>","tags":["git","rebase"]},{"location":"DevOps/git/git_stash/","title":"Git Stash","text":"<p>Git stash temporarily saves your local changes without committing them, allowing you to work on something else and then reapply those changes later.</p> Command Description git stash Add track uncommit file to the stash git stash pop Apply and remove from stash git stash apply Apply without remove git stash apply@{1} Apply specific stash git stash list List all stash entries git stash clear clear entries git stash push -m \"stash message\" push with message git stash push -m \"stash message\" -- filename push specific file with message","tags":["git","stash"]},{"location":"DevOps/git/git_stash/#reference","title":"Reference","text":"<ul> <li> Git Stash In 5 Minutes </li> </ul>","tags":["git","stash"]},{"location":"DevOps/git/git_submodule/","title":"Git Submodule","text":"<p>Submodules are repositories inside other Git repositories.</p> <pre><code># Add a submodule to current repository at specified path\ngit submodule add -b master [URL to Git repo] [path]\n</code></pre> <pre><code># update all project submodules\ngit submodule update --init --recursive\n</code></pre>","tags":["git","submodule"]},{"location":"DevOps/git/git_submodule/#remove-a-submodule","title":"Remove a submodule","text":"<p>bash Script to remove a submodule from a git repository</p> <pre><code>submodule_path=$1\n\n[ -d \"$submodule_path\" ] || (echo 'Specify valid submodule path as first parameter' &amp;&amp; exit 1)\n\n# Remove the submodule entry from .git/config\necho \"Deinitializing submodule $submodule_path\"\ngit submodule deinit -f $submodule_path\n\n# Remove the submodule directory from the superproject's .git/modules directory\necho \"Removing .git/modules for $submodule_path\"\nrm -rf .git/modules/$submodule_path\n\n# Remove the entry in .gitmodules and remove the submodule directory located at path/to/submodule\necho \"Removing files for $submodule_path\"\ngit rm -rf $submodule_path\n</code></pre>","tags":["git","submodule"]},{"location":"DevOps/git/branching/","title":"Git branching strategy","text":"","tags":["git","branching"]},{"location":"DevOps/git/branching/#gitflow","title":"Gitflow","text":"Branch main/master stores the currently released version of code and should match the code that is in production. develop stores a copy of the main branch with all additional changes that have been added since the last release feature is the branch where a new feature is developed. release is the branch where the code is prepared for the next release. its merge from develop and ready for test when it done it merge to main and back into develop if any change done, in main it's tag as release (with version) hotfix is the branch where the code is fixed for a bug in the main branch. it's merge to main and back into develop if any change done, in main it's tag as release (with version)","tags":["git","branching"]},{"location":"DevOps/git/branching/#github-flow","title":"Github flow","text":"<p>Github flow is a lightweight, branch-based workflow. It revolves around branching from main and pull requests. </p> <p>A Pull Request (PR) is a request to merge a branch into another branch. It is a way to discuss changes before they are merged into the main branch.</p> <p></p> Branch main stores the last working codebase change/feature Temporary branch for the new feature or bug fix , the branch well be base for pull request and well delete after merging into main branch <p>nameing</p> <p>Name change/feature branch with prefix like:</p> <ul> <li>feature/</li> <li>bugfix/</li> <li>hotfix/</li> </ul>","tags":["git","branching"]},{"location":"DevOps/git/branching/#pull-request","title":"Pull Request","text":"<ul> <li>Unit/Integration test</li> <li>Code review</li> <li>Reference to issue</li> <li>Has a comprehensive description</li> <li>Squashed into single commit</li> </ul> <p>more</p>","tags":["git","branching"]},{"location":"DevOps/git/github/","title":"Github","text":"<p>Tips / Settings</p> <p>TBD</p> <p>Github Actions</p>","tags":["github"]},{"location":"DevOps/git/github/github_actions/","title":"Github Actions","text":"<p>GitHub Actions is a powerful feature of GitHub that allows you to automate, customize, and execute software development workflows directly in your GitHub repository. With GitHub Actions, you can build, test, and deploy your code right from GitHub.</p> <ul> <li>Custom action</li> <li>Controlling and job execution</li> </ul>","tags":["git","github","action"]},{"location":"DevOps/git/github/github_actions/#act","title":"Act","text":"<p>Run github action locally</p> <ul> <li>Run github action locally using act</li> <li>ACT - pass inputs to workflow</li> </ul>","tags":["git","github","action"]},{"location":"DevOps/git/github/github_actions/github_action_controlling_workflow_and_job_execution/","title":"Controlling Workflow and Job Execution","text":"<p>GitHub Actions provides several ways to control the execution of workflows and jobs. This includes using conditions, strategies, and matrix builds. Below are some examples of how to use these features effectively.</p>","tags":["github actions","workflow","controlling","condition","strategy","matrix"]},{"location":"DevOps/git/github/github_actions/github_action_controlling_workflow_and_job_execution/#strategy","title":"Strategy","text":"<p>The <code>strategy</code> keyword allows you to define a strategy for running jobs in parallel or sequentially. You can also use it to define a matrix of values for jobs to run with different configurations.</p>","tags":["github actions","workflow","controlling","condition","strategy","matrix"]},{"location":"DevOps/git/github/github_actions/github_action_controlling_workflow_and_job_execution/#example-using-strategy","title":"Example: Using Strategy","text":"<ul> <li>Run jobs in parallel with different configurations using a matrix strategy.</li> </ul> <pre><code>name: demos\non: [workflow_dispatch]\njobs:\n\n  strategy_demo_job:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        os: [ubuntu-latest, macos-latest, windows-latest]\n    steps:\n      - run: echo \"Running on ${{ matrix.os }}\"\n</code></pre>","tags":["github actions","workflow","controlling","condition","strategy","matrix"]},{"location":"DevOps/git/github/github_actions/github_action_controlling_workflow_and_job_execution/#condition","title":"condition","text":"<p>The <code>if</code> condition allows you to control whether a job or step runs based on the result of previous jobs or steps. This is useful for skipping jobs or steps that are not needed based on certain conditions.</p> if condition<pre><code>name: demos\non: [workflow_dispatch]\njobs:\n\n  strategy_demo_job:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        os: [ubuntu-latest, macos-latest, windows-latest]\n    steps:\n      - run: echo \"Running on ${{ matrix.os }}\"\n      - name: if demo\n        if: ${{ matrix.os == 'ubuntu-latest' }}\n        run: echo \"This step runs only on ubuntu-latest\"\n</code></pre>","tags":["github actions","workflow","controlling","condition","strategy","matrix"]},{"location":"DevOps/git/github/github_actions/github_action_run_local/","title":"Run github action locally","text":"<p>GitHub Actions help automate tasks like building, testing, and deploying in your GitHub repository. With <code>act</code> CLI tool we can write and test the GitHub action locally.</p> <pre><code>curl https://raw.githubusercontent.com/nektos/act/master/install.sh | sudo bash\n</code></pre>","tags":["github","actions","act","git","devops"]},{"location":"DevOps/git/github/github_actions/github_action_run_local/#config-github-action","title":"config github action","text":"<ul> <li>Add <code>.github/workflows</code> folder to project root</li> <li>Add yaml file and declare jobs</li> </ul>","tags":["github","actions","act","git","devops"]},{"location":"DevOps/git/github/github_actions/github_action_run_local/#view","title":"view","text":"<p>from project root</p> <pre><code>act -l\n</code></pre>","tags":["github","actions","act","git","devops"]},{"location":"DevOps/git/github/github_actions/github_action_run_local/#example","title":"example","text":"<p>Run job on local docker</p> <pre><code>act -j build_demo -P name=docker_image --pull=false\n</code></pre> arg desc -j job to run for workflow -P custom image to --pull pull image from hub or find it locally","tags":["github","actions","act","git","devops"]},{"location":"DevOps/git/github/github_actions/github_action_run_local/#workflow","title":"Workflow","text":"<pre><code>name: My Action\non: [workflow_dispatch]\njobs:\n  build_demo:\n    runs-on: rome_arm\n    steps:\n      - name: Hello, World!\n        run: echo \"build job hello world\"\n</code></pre> arg desc name workflow name on running trigger event [push, pull_request, workflow_dispatch] jobs workflow jobs runs-on platform to run on (image name declare in act command ) <p>multiple lines</p> <p>use <code>|</code> to mark multiple lines</p> <pre><code>steps:\n  - name: colcon\n    run: | \n        line 1\n        line 2\n</code></pre>","tags":["github","actions","act","git","devops"]},{"location":"DevOps/git/github/github_actions/github_action_run_local/#reference","title":"Reference","text":"<ul> <li>How to Run GitHub Actions Locally Using the act CLI Tool</li> </ul>","tags":["github","actions","act","git","devops"]},{"location":"DevOps/git/github/github_actions/github_action_using_custom_actions/","title":"Github actions using custom actions","text":"","tags":["github","action","custom","composite"]},{"location":"DevOps/git/github/github_actions/github_action_using_custom_actions/#runners","title":"Runners","text":"<ul> <li>Act runners</li> </ul> <p>There <code>actrc</code> file locate at <code>~/.config/act/actrc</code> for set the default runner in the file</p> <pre><code>-P ubuntu-latest=ubuntu:22.04\n-P ubuntu-22.04=node:16-bullseye-slim\n</code></pre>","tags":["github","action","custom","composite"]},{"location":"DevOps/git/github/github_actions/github_action_using_custom_actions/#composite-actions","title":"Composite actions","text":"","tags":["github","action","custom","composite"]},{"location":"DevOps/git/github/github_actions/github_action_using_custom_actions/#simple-demo","title":"Simple demo","text":"<p>Using <code>act</code> to run the demo locally:</p> <pre><code>.github\n    \u251c\u2500\u2500 actions\n    \u2502   \u2514\u2500\u2500 my_action\n    \u2502       \u2514\u2500\u2500 action.yaml\n    \u2514\u2500\u2500 workflows\n        \u251c\u2500\u2500 demo.yml\n        \u2514\u2500\u2500 README.md\n</code></pre> workflows/demo.yml<pre><code>name: demos\non: [workflow_dispatch]\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n      - name: hello world\n        run: echo \"Hello from act!\"\n      - name: run my action\n        uses: ./.github/actions/my_action\n</code></pre> actions/my_action/action.yaml<pre><code>name: \"my Action\"\ndescription: \"My Action\"\nruns:\n  using: \"composite\"\n  steps:\n    - name: hello composite\n      run: echo \"Hello from my composite act!\"\n      shell: bash\n</code></pre>","tags":["github","action","custom","composite"]},{"location":"DevOps/git/github/github_actions/github_action_using_custom_actions/#usage","title":"usage","text":"<pre><code>act -j test --bind --directory . --pull=false\n</code></pre> <p>bind directory</p> <p>Using <code>--bind --directory .</code> to bind local directory to the container, it's need to find <code>actions</code> folder</p>","tags":["github","action","custom","composite"]},{"location":"DevOps/git/github/github_actions/github_action_using_custom_actions/#composite-with-args","title":"Composite with args","text":"<pre><code>.github\n    \u251c\u2500\u2500 actions\n    \u2502   \u2514\u2500\u2500 action_with_args\n    \u2502       \u2514\u2500\u2500 action.yaml\n    \u2514\u2500\u2500 workflows\n        \u2514\u2500\u2500 demo.yml\n</code></pre> workflows/demo.yml<pre><code>name: demos\non: [workflow_dispatch]\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n      - name: hello world\n        run: echo \"Hello from act!\"\n      - name: run my action\n        uses: ./.github/actions/action_with_args\n        with:\n          arg1: \"value 1\"\n</code></pre> actions/action_with_args/action.yaml<pre><code>name: \"my Action with args\"\ndescription: \"My Action\"\ninputs:\n  arg1:\n    description: \"arg1\"\n    required: true\n  arg2:\n    description: \"arg2\"\n    required: false\n    default: 'default value 2'\nruns:\n  using: \"composite\"\n  steps:\n    - name: print arg1\n      run: 'echo \"print arg1 value: ${{ inputs.arg1 }} \"'\n      shell: bash\n    - name: print arg2\n      run: 'echo \"print arg2 value: ${{ inputs.arg2 }} \"'\n      shell: bash\n</code></pre>","tags":["github","action","custom","composite"]},{"location":"DevOps/git/github/github_actions/github_action_using_custom_actions/#composite-with-outputs","title":"Composite with outputs","text":"<pre><code>```bash\n.github\n    \u251c\u2500\u2500 actions\n    \u2502   \u2514\u2500\u2500 action_output\n    \u2502       \u2514\u2500\u2500 action.yaml\n    \u2514\u2500\u2500 workflows\n        \u2514\u2500\u2500 demo.yml\n</code></pre> workflows/demo.yml<pre><code>name: demos\non: [workflow_dispatch]\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n      - name: call action that return output\n        id: call_action\n        uses: ./.github/actions/action_output\n      - name: use the output\n        run: 'echo \"print output value: ${{ steps.call_action.outputs.my_output }} \"'\n        shell: bash\n</code></pre> actions/action_output/action.yaml<pre><code>name: \"my output demo\"\ndescription: \"return output from action\"\noutputs:\n  my_output:\n    description: \"my output\"\n    value: \"\"\nruns:\n  using: \"composite\"\n  steps:\n    - name: calc output\n      run: echo \"my_output=my output value from sub action\" &gt;&gt; $GITHUB_OUTPUT\n      shell: bash\n</code></pre>","tags":["github","action","custom","composite"]},{"location":"DevOps/git/github/github_actions/github_action_using_custom_actions/#usage_1","title":"usage","text":"<pre><code>act -j test --bind --directory . --pull=false\n</code></pre>","tags":["github","action","custom","composite"]},{"location":"DevOps/git/github/github_actions/act/act_inputs/","title":"ACT","text":"<p>user guide</p>","tags":["act","github actions","input"]},{"location":"DevOps/git/github/github_actions/act/act_inputs/#actrc","title":"actrc","text":"<p>command-line arguments for act so you don't have to type them every time.</p> platform<pre><code># ~/.actrc\n# set platforms\n-P ubuntu-latest=ubuntu:22.04\n-P ubuntu-22.04=node:16-bullseye-slim\n</code></pre> <p>offline</p> <p>Set <code>--action-offline-mode</code> to run act in offline mode. This is useful when you want to run act without internet access or when you want to avoid downloading images from the internet.</p> artrc<pre><code>--action-offline-mode\n</code></pre>","tags":["act","github actions","input"]},{"location":"DevOps/git/github/github_actions/act/act_inputs/#pass-inputs-to-workflow","title":"Pass inputs to workflow","text":"","tags":["act","github actions","input"]},{"location":"DevOps/git/github/github_actions/act/act_inputs/#demo","title":"Demo","text":"<pre><code>name: demos\non: \n  workflow_dispatch:\n    inputs:\n      TITLE:\n        description: \"title arg\"\n        type: string\n\njobs:\n  simple_input:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: echo title\n        run: echo \"---&gt; ${{ github.event.inputs.TITLE }}\"\n</code></pre>","tags":["act","github actions","input"]},{"location":"DevOps/git/github/github_actions/act/act_inputs/#usage","title":"usage","text":"<pre><code>act -j simple_input --pull=false --input TITLE=\"hello world\"\n</code></pre>","tags":["act","github actions","input"]},{"location":"DevOps/git/github/github_actions/act/act_inputs/#skip-job-and-step-using-input-ans-if-condition","title":"Skip job and step using input ans if condition","text":"skip step<pre><code>name: demos\non: \n  workflow_dispatch:\n    inputs:\n\n      SKIP:\n        description: \"true for skip\"\n\njobs:\n  simple_skip:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: step1\n        run: echo \"---&gt; step 1\"\n      - name: step2\n        if: ${{ github.event.inputs.SKIP != 'true' }}\n        run: echo \"---&gt; step 2\"\n      - name: step3\n        run: echo \"---&gt; step 3\"\n</code></pre>","tags":["act","github actions","input"]},{"location":"DevOps/git/github/github_actions/act/act_inputs/#usage_1","title":"usage","text":"<pre><code>act -j simple_skip --pull=false --input SKIP=true\nact -j simple_skip --pull=false --input SKIP=false\n</code></pre> skip job<pre><code>name: demos\non: \n  workflow_dispatch:\n    inputs:\n\n      SKIP:\n        description: \"true for skip\"\n\njobs:\n  simple_skip:\n    runs-on: ubuntu-latest\n    if: ${{ github.event.inputs.SKIP != 'true' }}\n\n    steps:\n      - name: step1\n        run: echo \"---&gt; step 1\"\n      - name: step2\n        run: echo \"---&gt; step 2\"\n      - name: step3\n        run: echo \"---&gt; step 3\"\n</code></pre>","tags":["act","github actions","input"]},{"location":"DevOps/git/github/github_actions/act/act_inputs/#usage_2","title":"usage","text":"<pre><code>act -j simple_skip --pull=false --input SKIP=true\nact -j simple_skip --pull=false --input SKIP=false\n</code></pre>","tags":["act","github actions","input"]},{"location":"DevOps/git/github/timps_settings/","title":"Github Tips and settings","text":"","tags":["github","tips"]},{"location":"DevOps/git/tips_settings/","title":"Git Tips and Settings","text":"","tags":["git","tips"]},{"location":"DevOps/git/tips_settings/#prompt","title":"prompt","text":"<p>Effective prompt with git branch name</p> <pre><code>function git-branch-name { \n    git symbolic-ref HEAD 2&gt;/dev/null | cut -d\"/\" -f 3- \n} \n\nfunction git-branch-prompt { \n    local branch=`git-branch-name` \n    if [ $branch ]; then printf \" [%s]\" $branch; fi \n} \n\n\n\nfunction re-prompt { \n    PS1=\"\\u@\\h \\[\\033[0;36m\\]\\W\\[\\033[0m\\]\\[\\033[0;32m\\]\\$(git-branch-prompt)\\[\\033[0m\\] \\$ \" \n} \n\nPROMPT_COMMAND=re-prompt \n\ntrap 're-prompt' DEBUG \n</code></pre>","tags":["git","tips"]},{"location":"DevOps/git/tips_settings/#git-branching","title":"Git branching","text":"","tags":["git","tips"]},{"location":"DevOps/git/tips_settings/#sync-remote-branch-with-local-branch","title":"Sync remote branch with local branch","text":"<p>Remove all remote branches that no longer exist on the remote repository. <pre><code>git fetch --prune\n</code></pre></p>","tags":["git","tips"]},{"location":"DevOps/git/tips_settings/#git-sparse-checkout","title":"git sparse-checkout","text":"<p>is a Git feature that allows you to partially clone a repository, downloading only specific folders or files instead of the entire project.</p> <pre><code>git clone --depth 1 --filter=blob:none --sparse &lt;url&gt;\ngit sparse-checkout set &lt;folders to download separate by space&gt;\n</code></pre>","tags":["git","tips"]},{"location":"DevOps/linux/","title":"Linux","text":"<p>Deb package</p> <p>Udev</p> <p>Networking</p>","tags":["linux"]},{"location":"DevOps/linux/#tmux","title":"TMUX","text":"<ul> <li>tmux / tmuxp config and usage</li> </ul>","tags":["linux"]},{"location":"DevOps/linux/#cheat-sheet","title":"Cheat sheet","text":"<ul> <li>apt</li> <li>ip</li> </ul>","tags":["linux"]},{"location":"DevOps/linux/linux_apt_cheat_sheet/","title":"APT Cheat sheet","text":"apt depends foo Show all packages foo depends on (use --installed for only those already installed)","tags":["linux","apt"]},{"location":"DevOps/linux/linux_ip_cheat_sheet/","title":"IP command cheat sheet","text":"set interface ip ip addr add 192.168.1.1/24 dev eth0 set MTU ip link set eth0 mtu 1400 up / down ip link set eth0 up, ip link set eth0 down","tags":["linux","ip","cheat sheet"]},{"location":"DevOps/linux/linux_ip_cheat_sheet/#route","title":"Route","text":"Adding a default gateway ip route add default via 192.168.1.254","tags":["linux","ip","cheat sheet"]},{"location":"DevOps/linux/linux_tmux_tmuxp/","title":"tmuxp","text":"<p>Tmuxp is a session manager for tmux, allowing you to define tmux sessions using a YAML configuration</p>","tags":["linux","tmux","tmuxp"]},{"location":"DevOps/linux/linux_tmux_tmuxp/#install","title":"install","text":"<pre><code>sudo apt install tmux\npip install tmuxp\n</code></pre>","tags":["linux","tmux","tmuxp"]},{"location":"DevOps/linux/linux_tmux_tmuxp/#config","title":"config","text":"my_session.yaml<pre><code>session_name: my_session\nwindows:\n  - window_name: my_window\n    layout: tiled\n    suppress_history: false\n    shell_command_before:\n      - echo \"before\"\n    panes:\n      - shell_command: \n          - printf '\\033]2;%s\\033\\\\' 'pane1'\n          - ./script1.sh  # Runs script1 in the first pane\n        focus: true\n      - shell_command:\n          - printf '\\033]2;%s\\033\\\\' 'pane2'\n          - ./script2.sh  # Runs script2 in the second pane\n</code></pre>","tags":["linux","tmux","tmuxp"]},{"location":"DevOps/linux/linux_tmux_tmuxp/#usage","title":"usage","text":"<pre><code>tmuxp load my_session.yaml\n</code></pre>","tags":["linux","tmux","tmuxp"]},{"location":"DevOps/linux/linux_tmux_tmuxp/#tmux","title":"tmux","text":"","tags":["linux","tmux","tmuxp"]},{"location":"DevOps/linux/linux_tmux_tmuxp/#script","title":"script","text":"<p>Open screen with 4 panes</p> <pre><code>#!/bin/bash\n\nSESSION=\"mysession\"\n\n# Start a new session\ntmux new-session -d -s $SESSION\n\n# Split the window into four equal parts\ntmux split-window -h  # Split vertically\ntmux split-window -v  # Split bottom-left horizontally\ntmux select-pane -R   # Move to the right pane\ntmux split-window -v  # Split bottom-right horizontally\n\n# Attach to session\ntmux attach-session -t $SESSION\n</code></pre> <p>don't forget to chmod +x</p>","tags":["linux","tmux","tmuxp"]},{"location":"DevOps/linux/linux_tmux_tmuxp/#config_1","title":"Config","text":"tmux.conf <pre><code># unbind\nunbind C-b\nunbind '\"'\nunbind %\n\n# base1 numbering\nset -g base-index 1\nsetw -g pane-base-index 1\n\n#bind ctrl-a as a prefix\nset-option -g prefix C-a\nbind-key C-a send-prefix\n# kill session\nbind C-c kill-session\n\nbind C-a run \"tmux save-buffer - | xclip -i -sel clipboard\"\n\n# mouse\nset -g mouse on\n\n\n # do like terminator\nbind -n C-E split-window -h\nbind -n C-S-Left resize-pane -L 3\nbind -n C-S-Right resize-pane -R 3\nbind -n C-S-Up resize-pane -U 3\nbind -n C-S-Down resize-pane -D 3\nbind -n C-O split-window -v\n\n# switch panes using Alt-arrow without prefix (not working)\nbind -n M-Left select-pane -L\nbind -n M-Right select-pane -R\nbind -n M-Up select-pane -U\nbind -n M-Down select-pane -D\n\n# Shift arrow to switch windows\n\nbind n next-window\nbind p previous-window\n\nbind c new-window -c \"#{pane_current_path}\"\n\nbind r source-file ~/.tmux.conf\n\n# settings\n</code></pre>","tags":["linux","tmux","tmuxp"]},{"location":"DevOps/linux/deb_package/","title":"Index","text":"<p>Create debian package for shell script, python project and other using debian tools Create custom install wizard using debconf and postinst scripts</p> <p>debconf</p> <p>pack shell script</p> <p>TBD</p>","tags":["debian","package","linux","ubuntu"]},{"location":"DevOps/linux/deb_package/#debian-package","title":"Debian package","text":"<p>dpkg-deb</p> <p>Basic tool to create debian package</p> <p>dpkg-buildpackage</p> <p>Debian has some pretty detailed rules on what a \"proper\" Debian package looks like, dpkg-buildpackage is a tool that enforces said workflow and structure, it's use <code>dpkg-deb</code> to create debian package (deb file)</p> <p>Version</p> <p>The \"Version\" field is gone. As explained above, dpkg-buildpackage infers the version number from the changelog file.</p>","tags":["debian","package","linux","ubuntu"]},{"location":"DevOps/linux/deb_package/#debhelper","title":"Debhelper","text":"<p>Debhelper is a tool that automates various common aspects of package building</p>","tags":["debian","package","linux","ubuntu"]},{"location":"DevOps/linux/deb_package/#commandmethod","title":"command/method","text":"","tags":["debian","package","linux","ubuntu"]},{"location":"DevOps/linux/deb_package/#dh_auto_configure","title":"dh_auto_configure","text":"<p>automatically run <code>./configure</code> or the cmake equivalent. - Applies architecture-specific flags.( CFLAGS, CXXFLAGS, LDFLAGS) |</p>","tags":["debian","package","linux","ubuntu"]},{"location":"DevOps/linux/deb_package/#dh_builddeb","title":"dh_builddeb","text":"<p>dh_builddeb is a Debhelper tool that creates a Debian (.deb) package from the files staged in debian/tmp or debian// option desc <code>--destdir=&lt;dir&gt;</code> Change the output directory for .deb files. <pre><code>override_dh_builddeb:\n    dh_builddeb --destdir=output_folder\n</code></pre>","tags":["debian","package","linux","ubuntu"]},{"location":"DevOps/linux/deb_package/#resource","title":"Resource","text":"<ul> <li>Debian Packaging For The Modern Developer (DPMD)</li> </ul>","tags":["debian","package","linux","ubuntu"]},{"location":"DevOps/linux/deb_package/debconf/","title":"Using Debconf","text":"<p>Debconf is Debian\u2019s configuration management system. It stores user inputs and configuration options for packages during installation, upgrade, and removal.</p>","tags":["debconf","debian","linux","package"]},{"location":"DevOps/linux/deb_package/debconf/#structure-of-the-templates-file","title":"Structure of the templates File","text":"<p>A <code>templates</code> file consists of multiple template entries, each defining a specific question. Each entry follows this format:</p> debian/templates<pre><code>Template: mypackage/question_name\nType: string\nDefault: default_value\nDescription: A brief explanation of what the user should enter.\n</code></pre> Field Description Template Unique identifier for the question (mypackage/question_name). Type The type of input expected (see below for options). Default The default answer if the user does not provide one. Description The message displayed to the user.","tags":["debconf","debian","linux","package"]},{"location":"DevOps/linux/deb_package/debconf/#types","title":"Types","text":"<ul> <li>string:   User enters a free-text string.</li> <li>boolean:  Yes/No question.</li> <li>select:   User selects from predefined options.</li> <li>multiselect:  User selects multiple options.</li> <li>note: Displays a message but does not ask a question.</li> <li>password: Hides user input for security.</li> </ul> Boolean (Yes/No)<pre><code>Template: mypackage/enable_feature\nType: boolean\nDefault: true\nDescription: Do you want to enable this feature?\n</code></pre> Select (Multiple Choices)<pre><code>Template: mypackage/choose_option\nType: select\nChoices: Option1, Option2, Option3\nDefault: Option1\nDescription: Please choose an option.\n</code></pre> Multiselect (Multiple Selections)<pre><code>Template: mypackage/multiple_choices\nType: multiselect\nChoices: Red, Green, Blue\nDefault: Red, Blue\nDescription: Select colors (use spacebar to select multiple).\n</code></pre> Note (Just a Message, No Input)<pre><code>Template: mypackage/info_message\nType: note\nDescription: This package will install additional dependencies.\n</code></pre>","tags":["debconf","debian","linux","package"]},{"location":"DevOps/linux/deb_package/debconf/#read-the-users-input-in-postinst","title":"Read the User's Input in postinst","text":"<p>Once the user enters values during installation, you can retrieve them in debian/postinst:</p> postinst<pre><code>#!/bin/bash\nset -e\n. /usr/share/debconf/confmodule\n\ndb_input high mypackage/config_value || true\ndb_go\n\ndb_get mypackage/config_value\necho \"User entered: $RET\" &gt; /etc/mypackage/config.txt\n</code></pre> <p>Tells Debconf to show a prompt for mypackage/config_value. high is the priority (other options: low, medium, critical). || true ensures the script does not fail if db_input encounters an issue.</p> <p>Displays all pending Debconf questions in one go. Must be called after db_input to show the prompt to the user.</p> <p>Retrieves the user's input from Debconf. Stores the value in the $RET variable.</p>","tags":["debconf","debian","linux","package"]},{"location":"DevOps/linux/deb_package/debconf/#postrm","title":"postrm","text":"postrm<pre><code>#!/bin/sh\nset -e  # Exit on any error\n\n# Example: Remove the config directory on purge\nif [ \"$1\" = \"purge\" ]; then\n    echo \"Configuration directory removed.\"\n    echo \"PURGE\" | debconf-communicate my-python-app || true\nfi\n\n\nexit 0\n</code></pre>","tags":["debconf","debian","linux","package"]},{"location":"DevOps/linux/deb_package/debconf/#other-debconf-commands","title":"other debconf commands","text":"<ol> <li>Debugging and Testing</li> </ol> <p>To check stored values:</p> <pre><code>sudo debconf-show mypackage\n</code></pre> <p>To manually set a value: <pre><code>echo \"mypackage/config_value mypackage/config_value string new_value\" | sudo debconf-set-selections\n</code></pre></p> <p>To reset and ask the questions again: <pre><code>sudo dpkg-reconfigure mypackage\n</code></pre></p> <p>package script file location</p> <pre><code>ls -l /var/lib/dpkg/info/mypackage.*\n#\nThis will show various control files for the package, including:\n\n/var/lib/dpkg/info/mypackage.postrm \u2192 The post-remove script\n/var/lib/dpkg/info/mypackage.postinst \u2192 The post-install script\n/var/lib/dpkg/info/mypackage.prerm \u2192 The pre-remove script\n/var/lib/dpkg/info/mypackage.list \u2192 The list of installed files\n</code></pre>","tags":["debconf","debian","linux","package"]},{"location":"DevOps/linux/deb_package/shell_script/","title":"Shell script debian package","text":"<p>pack minimal shell script to <code>debian</code> package using <code>fakeroot</code> / <code>dpkg-buildpackage</code></p> <p>fakeroot / dpkg-buildpackage</p> <p>When i use <code>dpkg-buildpackage</code> the build process end with error that for now i don't found a solution  the `fakeroot debian/rules binary run the build process without error</p> <pre><code>.\n\u251c\u2500\u2500 debs\n\u2502   \u251c\u2500\u2500 settings.json\n\u2502   \u2514\u2500\u2500 tasks.json\n\u251c\u2500\u2500 debian\n\u2502   \u251c\u2500\u2500 changelog\n\u2502   \u251c\u2500\u2500 compat\n\u2502   \u251c\u2500\u2500 control\n\u2502   \u251c\u2500\u2500 my-tool.install\n\u2502   \u2514\u2500\u2500 rules\n\u251c\u2500\u2500 debs\n\u251c\u2500\u2500 readme.md\n\u251c\u2500\u2500 .gitignore\n\u2514\u2500\u2500 scripts\n    \u2514\u2500\u2500 my-tool.sh\n</code></pre> scripts/my-tool<pre><code>#!/bin/sh\n\necho \"hello my-tool\"\n</code></pre>","tags":["debian","dch","dpkg-buildpackage","fakeroot","rules","deb package"]},{"location":"DevOps/linux/deb_package/shell_script/#debian-folder","title":"debian folder","text":"<p>Using <code>fakeroot</code>/<code>dpkg-buildpackage</code> debian folder must contain few files:</p> <ul> <li>rules</li> <li>changelog</li> <li>control</li> <li>my-tool.install</li> </ul>","tags":["debian","dch","dpkg-buildpackage","fakeroot","rules","deb package"]},{"location":"DevOps/linux/deb_package/shell_script/#my-toolinstall","title":"my-tool.install","text":"<p>Mapping file from project to filesystem location for example</p> debian/my-tool.install<pre><code>scripts/my-tools.sh /usr/local/bin\n</code></pre> <p>external file</p> <p>We can place file from external project folder relative to project root</p> <pre><code>../external /usr/local/bin\n</code></pre>","tags":["debian","dch","dpkg-buildpackage","fakeroot","rules","deb package"]},{"location":"DevOps/linux/deb_package/shell_script/#changelog","title":"changelog","text":"<p><code>dch</code> command create and update changelog file <pre><code>dch --create -v 0.0.1 --package my-tool \"v 0.0.1\"\ndch -v 0.0.1 \"simple script\"\n</code></pre></p> <p>Note</p> <p>Using <code>dch</code> command we update the version  <code>my-tool (0.0.2) UNRELEASED; urgency=medium</code></p> <p>This version use to set the debian version</p> <pre><code>dch -v 0.0.2 \"simple script ver 2\"\n</code></pre> <p> changelog <p>changelog<pre><code>my-tool (0.0.2) UNRELEASED; urgency=medium\n\n* version 0.0.1\n* simple script ver 2\n\n-- user &lt;user@lap&gt;  Tue, 29 Apr 2025 21:14:15 +0300\n</code></pre> </p>","tags":["debian","dch","dpkg-buildpackage","fakeroot","rules","deb package"]},{"location":"DevOps/linux/deb_package/shell_script/#control","title":"control","text":"<pre><code>Source: my-tool\nSection: misc\nPriority: optional\nMaintainer: Your Name &lt;youremail@example.com&gt;\nStandards-Version: 4.6.2\n\nPackage: my-tool\nArchitecture: all\nDescription: Minimal Debian package\n A short description of the minimal Debian package.\n</code></pre>","tags":["debian","dch","dpkg-buildpackage","fakeroot","rules","deb package"]},{"location":"DevOps/linux/deb_package/shell_script/#rules","title":"rules","text":"<pre><code>#!/usr/bin/make -f\n\n%:\n    dh $@\n\noverride_dh_builddeb:\n    dh_builddeb --destdir=$(CURDIR)/debs\n\noverride_dh_fixperms:\n    dh_fixperms\n    chmod 777 debian/my-tool/tmp/demo.sh\n</code></pre>","tags":["debian","dch","dpkg-buildpackage","fakeroot","rules","deb package"]},{"location":"DevOps/linux/deb_package/shell_script/#change-deb-output-path-debs-folder-must-be-exists","title":"change deb output path (debs folder must be exists)","text":"<pre><code>override_dh_builddeb:\n    dh_builddeb --destdir=$(CURDIR)/debs\n</code></pre>","tags":["debian","dch","dpkg-buildpackage","fakeroot","rules","deb package"]},{"location":"DevOps/linux/deb_package/shell_script/#set-permissions","title":"set permissions","text":"<pre><code>override_dh_fixperms:\n    dh_fixperms\n    chmod 777 debian/my-tool/usr/local/bin/demo.sh\n</code></pre>","tags":["debian","dch","dpkg-buildpackage","fakeroot","rules","deb package"]},{"location":"DevOps/linux/deb_package/shell_script/#build","title":"build","text":"<pre><code>fakeroot debian/rules binary\n# or \ndpkg-buildpackage -us -uc\n</code></pre>","tags":["debian","dch","dpkg-buildpackage","fakeroot","rules","deb package"]},{"location":"DevOps/linux/deb_package/shell_script/#clean","title":"clean","text":"<pre><code>fakeroot debian/rules clean\n</code></pre>","tags":["debian","dch","dpkg-buildpackage","fakeroot","rules","deb package"]},{"location":"DevOps/linux/deb_package/shell_script/#vscode","title":"VSCode","text":"","tags":["debian","dch","dpkg-buildpackage","fakeroot","rules","deb package"]},{"location":"DevOps/linux/deb_package/shell_script/#tasksjson","title":"tasks.json","text":"<ul> <li>build using <code>fakeroot debian/rules binary</code></li> <li>clean <code>fakeroot debian/rules clean</code></li> <li>update change log using <code>dch</code></li> </ul> tasks.json <pre><code>{\n    // See https://code.visualstudio.com/docs/editor/tasks for more information\n    \"version\": \"2.0.0\",\n    \"tasks\": [\n        {\n            \"label\": \"Build Debian Package\",\n            \"type\": \"shell\",\n            \"command\": \"fakeroot debian/rules binary\",\n            \"options\": {\n                \"cwd\": \"${workspaceFolder}\"\n            },\n            \"group\": {\n                \"kind\": \"build\",\n                \"isDefault\": true\n            },\n            \"problemMatcher\": []\n        },\n        {\n            \"label\": \"Clean\",\n            \"type\": \"shell\",\n            \"command\": \"fakeroot debian/rules clean\",\n            \"options\": {\n                \"cwd\": \"${workspaceFolder}\"\n            },\n            \"problemMatcher\": []\n        },\n        {\n            \"label\": \"Update Changelog with dch\",\n            \"type\": \"shell\",\n            \"command\": \"dch --newversion ${input:changelogVersion} $(git log -1 --pretty=format:'* %s')\",\n            \"options\": {\n                \"cwd\": \"${workspaceFolder}\",\n                \"env\": {\n                    \"DEBEMAIL\": \"dev@example.com\",\n                    \"DEBFULLNAME\": \"dev com\"\n                }\n            },\n            \"problemMatcher\": []\n        }\n    ],\n    \"inputs\": [\n        {\n            \"id\": \"changelogVersion\",\n            \"type\": \"promptString\",\n            \"description\": \"Enter the new version for dch\"\n        }\n    ]\n}\n</code></pre> <p>the demo use <code>git log -1 --pretty=format:'* %s')</code> as demo to get changes from last commit it's batter to get the commits from last tag using <code>git log v1.2.0..v1.3.0 --pretty=format:\"* %s\"</code></p>","tags":["debian","dch","dpkg-buildpackage","fakeroot","rules","deb package"]},{"location":"DevOps/linux/deb_package/shell_script/#settingjson","title":"setting.json","text":"<p>Replace indentation from space to tab when using sheelscript</p> <ul> <li>mark rule as shellscript if fail on autodetect</li> <li>check if associate it with makefile still the indention rule for shellscript working</li> </ul> settings.json<pre><code>\"files.associations\": {\n    \"rules\": \"makefile\"\n}\n</code></pre> settings.json <pre><code>{\n    \"[shellscript]\": {\n        \"editor.insertSpaces\": false,\n        \"editor.tabSize\": 4,\n        \"editor.detectIndentation\": false\n    },\n}\n</code></pre> <p>using cat to check TAB indentation</p> <pre><code>cat -T &lt;file&gt;\n</code></pre>","tags":["debian","dch","dpkg-buildpackage","fakeroot","rules","deb package"]},{"location":"DevOps/linux/deb_package/shell_script/#git","title":"Git","text":"","tags":["debian","dch","dpkg-buildpackage","fakeroot","rules","deb package"]},{"location":"DevOps/linux/deb_package/shell_script/#gitignore","title":".gitignore","text":"<pre><code>debs/\ndebian/*\n!debian/changelog\n!debian/rules\n!debian/control\n!debian/compat\n!debian/my-tool.install\n</code></pre> <p>exclude file from ignore folder, for it to work we need to ignore files in folder and not the folder it self <code>debian/*</code> </p>","tags":["debian","dch","dpkg-buildpackage","fakeroot","rules","deb package"]},{"location":"DevOps/linux/networking/","title":"Linux Networking","text":"<ul> <li>Linux as router</li> </ul>","tags":["linux","networking","devops"]},{"location":"DevOps/linux/networking/linux_net_config_as_router/","title":"Linux as router","text":"<ul> <li>eth0: WAN</li> <li>eth1: LAN</li> </ul>","tags":["linux","networking","router","iptables","routing"]},{"location":"DevOps/linux/networking/linux_net_config_as_router/#enable-ip-forwarding","title":"Enable IP Forwarding","text":"<p>sysctl<pre><code>sudo sysctl -w net.ipv4.ip_forward=1\n</code></pre> - To make it permanent, add the following line to <code>/etc/sysctl.conf</code>: sysctl.conf<pre><code>net.ipv4.ip_forward = 1\n</code></pre> - To apply the changes, run: sysctl<pre><code>sudo sysctl -p \n</code></pre></p>","tags":["linux","networking","router","iptables","routing"]},{"location":"DevOps/linux/networking/linux_net_config_as_router/#iptables-configuration","title":"IPTables Configuration","text":"","tags":["linux","networking","router","iptables","routing"]},{"location":"DevOps/linux/networking/linux_net_config_as_router/#rules","title":"rules","text":"iptables<pre><code>sudo iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE\nsudo iptables -A FORWARD -i eth0 -o eth1 -j ACCEPT\nsudo iptables -A FORWARD -i eth1 -o eth0 -m state --state ESTABLISHED,RELATED -j ACCEPT\n</code></pre>","tags":["linux","networking","router","iptables","routing"]},{"location":"DevOps/linux/networking/linux_net_config_as_router/#savepersist-iptables-rules","title":"Save/Persist iptables rules","text":"<ul> <li>To save the iptables rules, you can use the following command: iptables<pre><code>sudo iptables-save &gt; /etc/iptables/rules.v4\n</code></pre></li> <li>To restore the iptables rules on boot, you can use the following command: iptables<pre><code>sudo iptables-restore &lt; /etc/iptables/rules.v4\n</code></pre></li> <li>To make the iptables rules persistent across reboots, you can install the <code>iptables-persistent</code> package: apt<pre><code>sudo apt-get install iptables-persistent\n</code></pre></li> <li>During the installation, you will be prompted to save the current iptables rules. Choose \"Yes\" to save them.</li> <li>After installation, the iptables rules will be automatically restored on boot.</li> </ul>","tags":["linux","networking","router","iptables","routing"]},{"location":"DevOps/linux/udev/","title":"Custom udev rules","text":"<p>udev (the device manager for the Linux kernel) uses rules to manage device events (e.g., when a USB is plugged in). Rules are typically stored in <code>/etc/udev/rules.d/</code> or <code>/lib/udev/rules.d/</code> as files with a <code>.rules</code> extension (e.g., 10-my-rule.rules). Lower-numbered files are processed first.</p>","tags":["udev","linux","custom","rules"]},{"location":"DevOps/linux/udev/#udev-rule","title":"udev Rule","text":"<p>A rule consists of match keys (conditions) and assignment keys (actions), written in the format:</p> <pre><code>KEY==\"value\", ACTION=\"value\"\n</code></pre> <ul> <li>Match keys: Conditions to identify a device (e.g., SUBSYSTEM, ATTR).</li> <li>Assignment keys: Actions to take (e.g., NAME, RUN, SYMLINK).</li> </ul>","tags":["udev","linux","custom","rules"]},{"location":"DevOps/linux/udev/#demos","title":"demos","text":"","tags":["udev","linux","custom","rules"]},{"location":"DevOps/linux/udev/#set-symbolic-name","title":"Set symbolic name","text":"<p>Set symbolic name every time my arduino mega connected</p> <pre><code>udevadm info -a -p /sys/class/tty/ttyACM0\n</code></pre> <ul> <li>udevadm: A utility for managing and querying udev, the Linux device manager.</li> <li>info: A subcommand that provides information about a device.</li> <li>-a : Walks up the device tree (from the specified device to its parents) and shows all attributes available for matching in udev rules.</li> <li>-p : Specifies the sysfs path of the device to query <code>/sys/class/tty/ttyACM0</code>.</li> </ul> result: Show only the part i use for the rule <pre><code>looking at parent device '/devices/pci0000:00/0000:00:14.0/usb3/3-4/3-4.1/3-4.1.5/3-4.1.5.3':\n    KERNELS==\"3-4.1.5.3\"\n    SUBSYSTEMS==\"usb\"\n    DRIVERS==\"usb\"\n    ATTRS{authorized}==\"1\"\n    ...\n    ATTRS{configuration}==\"\"\n    ATTRS{devnum}==\"24\"\n    ATTRS{devpath}==\"4.1.5.3\"\n    ATTRS{idProduct}==\"0010\"\n    ATTRS{idVendor}==\"2341\"\n    ATTRS{ltm_capable}==\"no\"\n    ATTRS{manufacturer}==\"Arduino (www.arduino.cc)\"\n    ...\n    ATTRS{product}==\"Arduino Mega 2560\"\n    ATTRS{quirks}==\"0x0\"\n</code></pre> /etc/udev/rules.d/91-arduino.rules<pre><code>ACTION==\"add\",SUBSYSTEMS==\"usb\",ATTRS{idVendor}==\"2341\",ATTRS{product}==\"Arduino Mega 2560\", SYMLINK+=\"arduino_mega\"\n</code></pre> <p>debug and monitor</p> <p>monitor service using</p> <pre><code>sudo journalctl -f -u systemd-udev.service\n</code></pre>","tags":["udev","linux","custom","rules"]},{"location":"DevOps/linux/udev/#check","title":"check","text":"<pre><code>sudo udevadm control --reload-rules &amp;&amp; sudo udevadm trigger\n</code></pre> <ul> <li>Disconnect / Connect the device for <code>add</code> event <pre><code>ll /dev/arduino_mega \n#\nlrwxrwxrwx 1 root root 7 Apr  2 06:56 /dev/arduino_mega -&gt; ttyACM0\n</code></pre></li> </ul>","tags":["udev","linux","custom","rules"]},{"location":"DevOps/linux/udev/#todo","title":"TODO","text":"<ul> <li>explain monitor</li> <li>explain device tree</li> <li>explain ATTR ATTRS ENV</li> <li>explain SUBSYSTEMS</li> </ul>","tags":["udev","linux","custom","rules"]},{"location":"DevOps/linux/udev/#set-permission","title":"Set permission","text":"<p>Set permission to usb device</p> <pre><code>SUBSYSTEMS==\"i2c-dev\", ATTRS{name}==\"CP2112 SMBus Bridge on hidraw5\", MODE=\"0666\"\n</code></pre>","tags":["udev","linux","custom","rules"]},{"location":"DevOps/networking/","title":"Networking","text":"<p>Tips / Settings</p> <p>tools</p> <p>TBD</p>","tags":["networking"]},{"location":"DevOps/networking/#posts","title":"Posts","text":"<ul> <li>configure netplan and netowokd</li> </ul>","tags":["networking"]},{"location":"DevOps/networking/network_netplan/","title":"Config network using Netplan","text":"","tags":["network","netplan"]},{"location":"DevOps/networking/network_netplan/#systemd-networkd","title":"systemd-networkd","text":"<pre><code>#check if networkd manager the network\n\nnetworkctl\n\nIDX LINK    TYPE     OPERATIONAL SETUP    \n  1 lo      loopback carrier     unmanaged\n  2 l4tbr0  bridge   off         unmanaged\n  3 usb0    gadget   no-carrier  unmanaged\n  5 can0    can      off         unmanaged\n  6 eth0    ether    routable    unmanaged\n</code></pre> systemd-networkd<pre><code># start and enabled\nsudo systemctl unmask systemd-networkd\nsudo systemctl enable systemd-networkd\nsudo systemctl start systemd-networkd\n</code></pre> NetworkManager<pre><code># stop and disabled\nsudo systemctl stop NetworkManager\nsudo systemctl disable NetworkManager\nsudo systemctl mask NetworkManager\n</code></pre>","tags":["network","netplan"]},{"location":"DevOps/networking/network_netplan/#netplan","title":"netplan","text":"<pre><code>sudo apt install netplan.io\n</code></pre> netplan config example<pre><code>network:\n    version: 2\n    renderer: networkd\n    ethernets:\n        enp3s0:\n            dhcp4: true\n            dhcp6: true\n    wifis:\n        wlp2s0b1:\n            dhcp4: yes\n            dhcp6: yes\n            access-points:\n                \"network_ssid_name\":\n                    password: \"**********\"\n</code></pre> <p>edit <code>/etc/netplan/config.yaml</code> file</p> static<pre><code>network: \n  version: 2\n  renderer: networkd\n  ethernets:\n    eth0:\n      dhcp4: false\n      dhcp6: false\n      addresses:\n      - 10.0.0.4/24\n      routes:\n      - to: default\n        via: 10.0.0.1\n      nameservers:\n       addresses: [8.8.8.8,8.8.4.4]\n</code></pre>","tags":["network","netplan"]},{"location":"DevOps/networking/network_netplan/#check-and-apply","title":"check and apply","text":"<p>apply configuration<pre><code># set permission\nsudo chmod 600 /etc/netplan/config.yaml\n# apply\nsudo netplan apply\n</code></pre> <pre><code>networkctl \nIDX LINK    TYPE     OPERATIONAL SETUP     \n  1 lo      loopback carrier     unmanaged\n  2 l4tbr0  bridge   off         unmanaged\n  3 usb0    gadget   no-carrier  unmanaged\n  4 usb1    gadget   no-carrier  unmanaged\n  5 can0    can      off         unmanaged\n  6 eth0    ether    routable    configured\n  7 docker0 bridge   no-carrier  unmanaged\n</code></pre></p>","tags":["network","netplan"]},{"location":"DevOps/networking/tips_settings/","title":"Networking Tips and Settings","text":"","tags":["networking","tips"]},{"location":"DevOps/networking/tips_settings/#config-machine-as-router","title":"config machine as router","text":"<pre><code>#!/bin/sh\n\nsudo iptables -P FORWARD ACCEPT\nsudo iptables -t nat -s 10.0.0.0/24 -A POSTROUTING -j MASQUERADE\necho 1 &gt; sudo tee /proc/sys/net/ipv4/ip_forward\n</code></pre>","tags":["networking","tips"]},{"location":"DevOps/networking/tips_settings/#allow-multicast-on-locakhost","title":"Allow multicast on Locakhost","text":"<pre><code>sudo ifconfig lo multicast\n</code></pre>","tags":["networking","tips"]},{"location":"DevOps/networking/tips_settings/#posts","title":"Posts","text":"<ul> <li>checking mtu</li> </ul>","tags":["networking","tips"]},{"location":"DevOps/networking/tips_settings/checking_mtu/","title":"Checking MTU","text":"<p>Check the MTU (Maximum Transmission Unit) of a network interface using the ping command with the Don't Fragment (DF) flag.</p> <pre><code>ping -M do -s 1472 &lt;destination&gt;\n</code></pre> <ul> <li><code>-M do</code> \u2192 Enables the Don't Fragment (DF) flag, preventing packet fragmentation.</li> <li><code>-s 1472</code> \u2192 Specifies the payload size (1472 bytes is used for standard Ethernet with an MTU of 1500).</li> </ul> <p>1472</p> <p>The payload size of 1472 is used because the ICMP header is 8 bytes, and IP header 20 which makes the total packet size 1500 bytes.</p> <p></p>","tags":["networking","tips","mtu"]},{"location":"DevOps/networking/tips_settings/checking_mtu/#usage","title":"usage","text":"<p>To find the actual MTU, decrease the -s value in steps until you get a successful response.</p>","tags":["networking","tips","mtu"]},{"location":"DevOps/networking/tips_settings/tcpdump_tips/","title":"Tcpdump tips and cheat sheet","text":"","tags":["tcpdump","tips"]},{"location":"DevOps/networking/tips_settings/tcpdump_tips/#sniffer-ethernet-frame","title":"sniffer ethernet frame","text":"<pre><code>tcpdump -e\n</code></pre>","tags":["tcpdump","tips"]},{"location":"DevOps/networking/tools/","title":"Tools","text":"","tags":["networking","tools"]},{"location":"DevOps/networking/tools/#bmon","title":"bmon","text":"<p>bmon is a monitoring and debugging tool to capture networking related statistics and prepare them visually in a human friendly way</p> <pre><code>sudo apt-get install bmon\n</code></pre>","tags":["networking","tools"]},{"location":"DevOps/networking/tools/#iftop","title":"iftop","text":"<p>iftop is a network monitoring tool that shows a list of network connections in real-time</p> <pre><code>sudo apt-get install iftop\n</code></pre>","tags":["networking","tools"]},{"location":"DevOps/networking/tools/#example","title":"example","text":"<pre><code>sudo iftop -f \"udp port &lt;port_number&gt;\"\n</code></pre>","tags":["networking","tools"]},{"location":"DevOps/tools/","title":"DevOps Tools","text":"<p>Aptly</p>","tags":["devops","tools"]},{"location":"DevOps/tools/#posts","title":"Posts","text":"<ul> <li>debootstrap - create custom rootfs</li> <li>gpg</li> </ul>","tags":["devops","tools"]},{"location":"DevOps/tools/devops_debootstrap/","title":"Debootstrap","text":"<ul> <li>First Stage: Downloads the basic packages and sets up the environment.</li> <li>Second Stage: Completes the system setup, installs additional packages, and configures the environment to be fully usable.</li> </ul>","tags":["devops","tools"]},{"location":"DevOps/tools/devops_debootstrap/#first-stage","title":"First stage","text":"<pre><code>sudo debootstrap --arch=arm64 --foreign jammy /home/user/rootfs/ubuntuRootFS http://us.ports.ubuntu.com/ubuntu-ports\n</code></pre>","tags":["devops","tools"]},{"location":"DevOps/tools/devops_debootstrap/#second-stage","title":"Second stage","text":"<pre><code># Copy qemu binary to emulate ARM architecture on x86 machine\nsudo cp /usr/bin/qemu-aarch64-static /path/to/rootfs/usr/bin/\n\n# Chroot into the new rootfs\nsudo chroot /path/to/rootfs\n\n# Run the second-stage installation\n/debootstrap/debootstrap --second-stage\n</code></pre> <pre><code>deb http://us.ports.ubuntu.com/ubuntu-ports jammy main restricted\ndeb http://us.ports.ubuntu.com/ubuntu-ports jammy-updates main restricted\n# deb-src http://tw.ports.ubuntu.com/ubuntu-ports jammy main restricted universe multiverse\n# deb-src http://tw.ports.ubuntu.com/ubuntu-ports jammy-updates main restricted universe multiverse\ndeb http://us.ports.ubuntu.com/ubuntu-ports jammy universe\ndeb http://us.ports.ubuntu.com/ubuntu-ports jammy-updates universe\ndeb http://us.ports.ubuntu.com/ubuntu-ports jammy multiverse\ndeb http://us.ports.ubuntu.com/ubuntu-ports jammy-updates multiverse\n</code></pre> <pre><code>sudo mount -o bind /dev /home/user/rootfs/ubuntuRootFS/dev\nsudo mount -t devpts devpts /home/user/rootfs/ubuntuRootFS/dev/pts\nsudo mount -o bind /proc /home/user/rootfs/ubuntuRootFS/proc\nsudo mount -o bind /sys /home/user/rootfs/ubuntuRootFS/sys\nsudo mount -o bind /run /home/user/rootfs/ubuntuRootFS/run\n</code></pre> <pre><code>sudo chroot /path/to/rootfs /bin/bash\n</code></pre>","tags":["devops","tools"]},{"location":"DevOps/tools/devops_debootstrap/#install-ros-on-the-rootfs","title":"install ROS on the rootfs","text":"<pre><code>$ sudo apt update &amp;&amp; sudo apt install locales\n$ sudo locale-gen en_US en_US.UTF-8\n$ sudo update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8\n$ export LANG=en_US.UTF-8\n</code></pre> <pre><code>$ sudo apt install software-properties-common\n$ sudo add-apt-repository universe\n</code></pre> <pre><code>$ sudo apt update &amp;&amp; sudo apt install curl -y\n$ sudo curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg\n$ echo \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $(. /etc/os-release &amp;&amp; echo $UBUNTU_CODENAME) main\" | sudo tee /etc/apt/sources.list.d/ros2.list &gt; /dev/null\n</code></pre> <pre><code>apt update\n</code></pre> <pre><code>sudo apt install ros-humble-ros-base\n</code></pre> toolchain.cmake<pre><code>set(CMAKE_SYSTEM_NAME Linux)\nset(CMAKE_SYSTEM_PROCESSOR aarch64)  # Change to match your target architecture\n\n# Set cross-compiler paths\nset(CMAKE_C_COMPILER /path/to/cross-compiler/bin/aarch64-linux-gnu-gcc)\nset(CMAKE_CXX_COMPILER /path/to/cross-compiler/bin/aarch64-linux-gnu-g++)\nset(CMAKE_SYSROOT /path/to/rootfs)  # Set to your root filesystem\n\n# Set where CMake should look for libraries and headers\nset(CMAKE_FIND_ROOT_PATH /path/to/rootfs /path/to/rootfs/usr /path/to/rootfs/usr/local)\n\n# Only search inside the target rootfs\nset(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)\nset(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)\nset(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)\n\n# ROS 2 paths\nset(AMENT_PREFIX_PATH /path/to/rootfs/opt/ros/humble)\nset(CMAKE_PREFIX_PATH ${AMENT_PREFIX_PATH})\n</code></pre> <pre><code>colcon build --cmake-args -DCMAKE_TOOLCHAIN_FILE=/path/to/toolchain.cmake\n</code></pre> <p>pyconfig.h</p> <p>Fix include path in pyconfig.h    <pre><code>//#  include &lt;aarch64-linux-gnu/python3.10/pyconfig.h&gt;\n# include \"/home/user/rootfs/ubuntuRootFS/usr/include/aarch64-linux-gnu/python3.10/pyconfig.h\"\n</code></pre></p>","tags":["devops","tools"]},{"location":"DevOps/tools/aptly/","title":"Aptly","text":"<p>Aptly is a swiss army knife for Debian repository management. </p> <p>install new version</p> <p>install new version 1.6.1</p> <p>Create custom repository</p> <p>Using Aptly with REST api</p> <p>TBD</p>","tags":["aptly","debian"]},{"location":"DevOps/tools/aptly/#gpg-keys","title":"gpg keys","text":"","tags":["aptly","debian"]},{"location":"DevOps/tools/aptly/#todo-how-to-create-and-assign-key","title":"TODO: how to create and assign key","text":"","tags":["aptly","debian"]},{"location":"DevOps/tools/aptly/#aptly-repository","title":"Aptly Repository","text":"<p>An Aptly repository is a collection of .deb packages that you create and manage locally using Aptly. Think of it like a staging area \u2014 it's where you add, update, or remove packages.</p> <p>Repositories type</p> <ul> <li>local: custom repos.</li> <li>mirror: mirror official repos</li> </ul>","tags":["aptly","debian"]},{"location":"DevOps/tools/aptly/#aptly-snapshot","title":"Aptly Snapshot","text":"<p>A snapshot is a frozen, read-only version of a repository (local or mirror) at a specific point in time. It\u2019s like taking a picture of the repository.</p>","tags":["aptly","debian"]},{"location":"DevOps/tools/aptly/#serve","title":"Serve","text":"<pre><code>aptly serve\n</code></pre>","tags":["aptly","debian"]},{"location":"DevOps/tools/aptly/#using-nginx","title":"Using nginx","text":"<p>Nginx (pronounced \"engine-x\") is a high-performance web server</p> <pre><code>server {\n    listen 80;\n    server_name myrepo.example.com;\n\n    root /home/user/.aptly/public;\n\n    location / {\n        autoindex on;\n    }\n}\n</code></pre>","tags":["aptly","debian"]},{"location":"DevOps/tools/aptly/#add-to-sourceslist","title":"Add to sources.list","text":"<pre><code>deb http://myrepo.example.com/ jammy main\n# Without sign key\ndeb [trusted=yes] http://myrepo.example.com/ jammy main\n</code></pre>","tags":["aptly","debian"]},{"location":"DevOps/tools/aptly/aptly_custom_repository/","title":"TO REVIEW AND TEST","text":"","tags":["aptly","repo","local"]},{"location":"DevOps/tools/aptly/aptly_custom_repository/#aptly-repo","title":"aptly repo","text":"<p>Local repository is a collection of packages (most usually custom packages created internally).  Multiple versions of the same package could be added to the repository. In order to capture current repository state we use snapshot</p>","tags":["aptly","repo","local"]},{"location":"DevOps/tools/aptly/aptly_custom_repository/#repo","title":"repo","text":"","tags":["aptly","repo","local"]},{"location":"DevOps/tools/aptly/aptly_custom_repository/#create","title":"Create","text":"<p>Create local package repository. Repository would be empty when created, packages could be added to the repository from local files, copied or moved from another local repository or imported from the mirror. more</p> <pre><code>REPO_NAME=\"my-repo\"\n\naptly -distribution=\"jammy\" -architectures=\"amd64\" -comment=\"my repo desc\" \\\nrepo \\\ncreate \\\n${REPO_NAME}\n</code></pre>","tags":["aptly","repo","local"]},{"location":"DevOps/tools/aptly/aptly_custom_repository/#list","title":"List","text":"<p>Commands list displays list of all local package repositories. more</p> <pre><code>aptly repo list\n</code></pre>","tags":["aptly","repo","local"]},{"location":"DevOps/tools/aptly/aptly_custom_repository/#add","title":"Add","text":"<p>Command adds packages to local repository from .deb more</p> <p>From <code>deb</code> folder location</p> <pre><code>aptly repo add my_repo *deb\n</code></pre>","tags":["aptly","repo","local"]},{"location":"DevOps/tools/aptly/aptly_custom_repository/#snapshot","title":"Snapshot","text":"<p>Snapshot is a fixed state of remote repository mirror or local repository. Internally snapshot is list of references to packages. </p> <p>more</p> <p>Creates snapshot from current state of local package repository. </p> <p><pre><code>aptly snapshot create &lt;name&gt; from repo &lt;repo-name&gt;\n</code></pre> - name: snapshot name - repo-name: local repository name</p> <pre><code>aptly snapshot create \\\nsnap_my_repo \\\nfrom repo my_repo\n</code></pre>","tags":["aptly","repo","local"]},{"location":"DevOps/tools/aptly/aptly_custom_repository/#publish","title":"Publish","text":"<p>Publishes snapshot as repository to be consumed by apt.  more</p> <pre><code>aptly publish snapshot &lt;name&gt; [&lt;prefix&gt;]\n</code></pre> <ul> <li>prefix: Add prefix to repo url</li> <li>architectures: publish only selected arc from snapshot</li> <li>distribution: distribution name to publish</li> <li>skip-signing: don\u2019t sign Release files with GPG</li> </ul> publish with prefix<pre><code>aptly -architectures=\"amd64\" -skip-signing=true \\\npublish snapshot -architectures=\"amd64\" \\\nsnap_my_repo local\n</code></pre>","tags":["aptly","repo","local"]},{"location":"DevOps/tools/aptly/aptly_custom_repository/#serve","title":"Serve","text":"<p>aptly can serve published repositories using its own embedded webserver. more</p> <pre><code>aptly server\n</code></pre>","tags":["aptly","repo","local"]},{"location":"DevOps/tools/aptly/aptly_custom_repository/#sourcelist","title":"source.list","text":"<ul> <li>Add this line to use by apt</li> </ul> line in source.list<pre><code>deb http://lap2:8080/local/ jammy main\n</code></pre>","tags":["aptly","repo","local"]},{"location":"DevOps/tools/aptly/aptly_custom_repository/#reference","title":"Reference","text":"<ul> <li>Introducing \u2018Aptly\u2019, A Debian Repository Management Tool</li> </ul>","tags":["aptly","repo","local"]},{"location":"DevOps/tools/aptly/aptly_rest_api/","title":"Aptly REST Api","text":"<p>Aptly operations are also available via REST API served with <code>aptly api serve</code>. The example and API reference refer to version 1.6.1</p> <p>version 1.6.1</p> <p>list and reference Aptly REST API</p>","tags":["aptly","rest"]},{"location":"DevOps/tools/aptly/aptly_rest_api/#run-and-test","title":"Run and Test","text":"run aptly REST api server<pre><code>aptly api serve\n</code></pre>","tags":["aptly","rest"]},{"location":"DevOps/tools/aptly/aptly_rest_api/#test-rest-api","title":"Test REST Api","text":"get server version<pre><code>curl http://localhost:8080/api/version | jq .\n\n#\n{\n    \"Version\":\"1.6.1\"\n}\n</code></pre>","tags":["aptly","rest"]},{"location":"DevOps/tools/aptly/aptly_rest_api/#files","title":"Files","text":"<p>Upload debs file to aptly location from this location aptly update it's repositories After adding to a repository, the files are removed by default.</p> upload file<pre><code># POST /api/files/{dir}\n# curl -X POST -F file=@{deb file} http://localhost:8080/api/files/uploads\ncurl -X POST -F file=@my-tool_0.0.1_amd64.deb http://localhost:8080/api/files/uploads\n</code></pre> list files in directory<pre><code>#GET /api/files/{dir}\ncurl http://localhost:8080/api/files/uploads\n</code></pre>","tags":["aptly","rest"]},{"location":"DevOps/tools/aptly/aptly_rest_api/#repository","title":"Repository","text":"<p>A local repository is a collection of versionned packages (usually custom packages created internally).</p> <p>Packages can be added, removed, moved or copied between repos.</p> <p>Local repositories can be published (either directly or via snapshot) to be used a APT source on a debian based system.</p> list repos<pre><code># GET /api/repos\ncurl http://localhost:8080/api/repos | jq .\n</code></pre> create repo<pre><code>POST /api/repos\n\ncurl -X POST http://localhost:8080/api/repos \\\n-H 'Content-Type: application/json' \\\n--data '{\n    \"Name\": \"my-repo\"\n    \"Comment\":\"my application repo\",\n    \"DefaultDistribution\":\"jammy\",\n    \"DefaultComponent\":\"main\"\n    }' \n</code></pre> add uploaded folder<pre><code># POST /api/repos/{name}/file/{dir}\ncurl -X POST http://localhost:8080/api/repos/my-repo/file/uploads\n</code></pre>","tags":["aptly","rest"]},{"location":"DevOps/tools/aptly/aptly_rest_api/#publish","title":"Publish","text":"<p>Publish snapshot or local repo as Debian repository to be used as APT source on Debian based systems.</p> list published repositories<pre><code># GET /api/publish\ncurl http://localhost:8080/api/publish | jq .\n</code></pre>","tags":["aptly","rest"]},{"location":"DevOps/tools/aptly/aptly_rest_api/#create-published-repository","title":"create published repository","text":"<p>Publish a local repository or snapshot</p> <p>The prefix may contain a storage specifier, e.g. s3:packages/, or it may also be empty to publish to the root directory.</p> create<pre><code># /api/publish/{prefix}\ncurl -X POST http://localhost:8080/api/publish/ \\\n-H 'Content-Type: application/json' \\\n--data '\n{\n    \"Distribution\": \"jammy\",\n    \"Sources\": [{\"Name\": \"my-repo\"}],\n    \"SourceKind\": \"local\",\n    \"Signing\": {\n        \"Skip\": true\n    }\n}' \n</code></pre> update<pre><code># PUT /api/publish/{prefix}/{distribution}\n# Empty prefix\n\ncurl -X PUT http://localhost:8080/api/publish//jammy\n-H 'Content-Type: application/json' \\\n--data '\n{\n    \"ForceOverwrite\": true,\n    \"Architectures\": [\n        \"amd64\"\n    ],\n    \"SourceKind\": \"local\",\n    \"Sources\": [\n    {\n      \"Component\": \"main\",\n      \"Name\": \"my-repo\"\n    },\n    \"Signing\": {\n        \"Skip\": true\n  },\n}'\n</code></pre> show published repository<pre><code>curl http://localhost:8080/api/publish/repos/jammy | jq .\n</code></pre>","tags":["aptly","rest"]},{"location":"DevOps/tools/aptly/aptly_rest_api/#demo-upload-deb-package-to-exists-repository","title":"Demo: upload deb package to exists repository","text":"<p>The demo base and how to create simple shell debian package</p> <p>The demo assume that the repository exists and we all ready publish it. no snapshot </p> <p>Demo steps:</p> <ul> <li>Upload deb file</li> <li>Add file to repository</li> <li>Update publisher</li> <li>Serve</li> <li>Update local apt</li> </ul>","tags":["aptly","rest"]},{"location":"DevOps/tools/aptly/aptly_rest_api/#pre","title":"Pre","text":"run aptly<pre><code>aptly serve\n</code></pre> create repository using aptly cli<pre><code>REPO_NAME=\"my-repo\"\n\naptly -distribution=\"jammy\" -architectures=\"amd64\" -comment=\"my repo desc\" \\\nrepo \\\ncreate \\\n${REPO_NAME}\n</code></pre> publish repo using aptly cli<pre><code>REPO_NAME=\"my-repo\"\n\naptly -distribution=\"jammy\" -architectures=\"amd64\" -skip-signing=\"true\" \\\npublish \\\nrepo \\\n${REPO_NAME}\n\n##\n#Now you can add following line to apt sources:\n#  deb http://your-server/ jammy main\n</code></pre>","tags":["aptly","rest"]},{"location":"DevOps/tools/aptly/aptly_rest_api/#rest-api","title":"rest api","text":"<pre><code>aptly api serve\n</code></pre>","tags":["aptly","rest"]},{"location":"DevOps/tools/aptly/aptly_rest_api/#upload","title":"Upload","text":"<pre><code>FILE=my-tool_0.0.1_amd64.deb\ncurl -X POST -F file=@${FILE} http://localhost:8080/api/files/uploads\n</code></pre>","tags":["aptly","rest"]},{"location":"DevOps/tools/aptly/aptly_rest_api/#update-repository","title":"Update repository","text":"<pre><code>REPO_NAME=\"my-repo\"\ncurl -X POST http://localhost:8080/api/repos/${REPO_NAME}/file/uploads\n</code></pre>","tags":["aptly","rest"]},{"location":"DevOps/tools/aptly/aptly_rest_api/#update-publisher","title":"Update publisher","text":"<pre><code>REPO_NAME=\"my-repo\"\n\ncurl -X PUT http://localhost:8080/api/publish//jammy \\\n-H 'Content-Type: application/json' \\\n--data '\n{\n    \"ForceOverwrite\": true,\n    \"Architectures\": [\n        \"amd64\"\n    ],\n    \"SourceKind\": \"local\",\n    \"Sources\": [\n        {\n        \"Component\": \"main\",\n        \"Name\": \"${REPO_NAME}\"\n        }\n    ],\n    \"Signing\": {\n        \"Skip\": true\n  }\n}'\n</code></pre>","tags":["aptly","rest"]},{"location":"DevOps/tools/aptly/aptly_rest_api/#serve","title":"Serve","text":"<ul> <li>Serve</li> <li>Add to <code>sources.list</code> or <code>sources.list.d</code></li> <li>Run <code>apt update</code></li> <li>Install package</li> </ul> <pre><code># serve with aptly or use nginx\naptly serve\n# ./jammy [amd64] publishes {main: [my-repo]: my repo desc}\ndeb http://127.0.0.1:8080/ jammy main\n</code></pre> <p>repositories URL</p> <p>When run <code>aptly server</code> it print all the publish repositories and the deb line add to the sources.list</p> <pre><code># repos/jammy [amd64] publishes {main: [my-repo]}\ndeb http://lap:8080/repos/ jammy main\n</code></pre> <pre><code>sudo vim /etc/apt/sources.list.d/my_repo.list\n</code></pre> <pre><code>deb [trusted=yes] http://127.0.0.1:8080/ jammy main\n</code></pre> <pre><code>sudo apt update\n</code></pre> <pre><code>apt search my-tool\n#\nSorting... Done\nFull Text Search... Done\nmy-tool/jammy 0.0.1 amd64\n  My Tool \u2013 brief description\n</code></pre>","tags":["aptly","rest"]},{"location":"DevOps/tools/aptly/aptly_rest_api/#vscode","title":"VSCode","text":"<p>Using vscode task to automate the above rest api calls</p> <ul> <li>Upload deb file</li> <li>Add files to repository</li> <li>Update publisher</li> </ul> <p>aptly api</p> <p>Run server</p> <pre><code>aptly api serve\n</code></pre>","tags":["aptly","rest"]},{"location":"DevOps/tools/aptly/aptly_rest_api/#upload-task","title":"Upload task","text":"<p>VSCode command variable</p> <p>Using command variable extension to pick deb file for upload</p> task section: upload file<pre><code>{\n\"label\": \"upload deb to aptly\",\n\"type\": \"shell\",\n\"command\": \"curl\",\n\"args\": [\n    \"-X\",\n    \"POST\",\n    \"-F\",\n    \"file=@${input:file_path}\",\n    \"http://localhost:8080/api/files/uploads\"\n],\n\"problemMatcher\": []\n}\n</code></pre> input add pickFile<pre><code>{\n    \"id\": \"file_path\",\n    \"type\": \"command\",\n    \"command\": \"extension.commandvariable.file.pickFile\",\n    \"args\":{\n        \"include\": \"**/*.deb\"\n    }\n}\n</code></pre>","tags":["aptly","rest"]},{"location":"DevOps/tools/aptly/aptly_rest_api/#update-repo","title":"Update repo","text":"task: update repository<pre><code>{\n    \"label\": \"add/update files to repository\",\n    \"type\": \"shell\",\n    \"command\": \"curl\",\n    \"args\": [\n        \"-X\",\n        \"POST\",\n        \"http://localhost:8080/api/repos/${input:repo_name}/file/uploads\"\n    ],\n    \"problemMatcher\": []\n}\n</code></pre> input: repo name<pre><code>{\n    \"id\": \"repo_name\",\n    \"default\": \"my-repo\",\n    \"type\": \"promptString\",\n    \"description\": \"my repository name\"\n}\n</code></pre>","tags":["aptly","rest"]},{"location":"DevOps/tools/aptly/aptly_rest_api/#update-publish","title":"Update publish","text":"<p>no prefix</p> <p>The double <code>//</code> is because no prefix define</p> task: update publish finish json part<pre><code>{\n    \"label\": \"update publish\",\n    \"type\": \"shell\",\n    \"command\": \"curl\",\n    \"args\": [\n        \"-X\",\n        \"PUT\",\n        \"http://localhost:8080/api/publish//jammy\",\n        \"-H\",\n        \"Content-Type: application/json\",\n        \"--data\",\n        \"{\\\"ForceOverwrite\\\": true, \\\"Architectures\\\": [\\\"amd64\\\"],\\\"SourceKind\\\": \\\"local\\\",\\\"Sources\\\": [{\\\"Component\\\": \\\"main\\\",\\\"Name\\\": \\\"${REPO_NAME}\\\"}],\\\"Signing\\\": {\\\"Skip\\\": true}}\"\n\n    ],\n    \"problemMatcher\": []\n}\n</code></pre> <p>download vscode full tasks.json file</p>","tags":["aptly","rest"]},{"location":"DevOps/tools/aptly/aptly_rest_api/#check","title":"Check","text":"<ul> <li>update sources.list</li> <li>run aptly</li> </ul> <pre><code>apt update\n</code></pre> <pre><code>apt search my-tool\n#\nSorting... Done\nFull Text Search... Done\nmy-tool/jammy 0.0.2 amd64\n  My Tool \u2013 brief description\n</code></pre> <pre><code>apt list -a my-tool\n#\nListing... Done\nmy-tool/jammy 0.0.2 amd64\nmy-tool/jammy 0.0.1 amd64\n</code></pre>","tags":["aptly","rest"]},{"location":"DevOps/tools/gpg/","title":"GPG","text":"<ul> <li>GPG (GNU Privacy Guard) is an open-source implementation of the OpenPGP standard used for encryption, signing, and verifying data</li> <li>GPG2 (GNU Privacy Guard 2) is an updated version of GPG (GnuPG) that provides improved cryptographic features, better security, and supports modern encryption algorithms.</li> </ul> encrypt<pre><code>gpg --symmetric --cipher-algo AES256 --passphrase-file password.txt --batch secret.txt\n</code></pre> decrypt<pre><code>gpg --decrypt --passphrase-file password.txt --batch secret.txt.gpg &gt; secret.txt\n</code></pre> <ul> <li>--batch: Prevent GPG from prompting for interactive input.</li> </ul>","tags":["gpg","encrypt"]},{"location":"DevOps/tools/terminator/","title":"Terminator","text":"<p>Custom layout</p> <p>check</p> <p>All layout save in config file at <code>.config/terminator</code> folder</p>","tags":["terminator"]},{"location":"DevOps/vscode/","title":"VSCode","text":"<p>Settings</p> <p>DevContainer</p> <p>Remote ssh</p> <p>Extensions</p> <p>Copilot</p> <p>MCP</p>","tags":["vscode"]},{"location":"DevOps/vscode/#extensions","title":"Extensions","text":"<p>Open VSX Registry</p>","tags":["vscode"]},{"location":"DevOps/vscode/#video-and-posts","title":"Video and posts","text":"","tags":["vscode"]},{"location":"DevOps/vscode/#todo-read","title":"ToDO: read","text":"<ul> <li>vscode profile</li> </ul>","tags":["vscode"]},{"location":"DevOps/vscode/copilot/","title":"VSCode copilot","text":"<p>Copilot tips setting and resource </p>","tags":["vscode","copilot"]},{"location":"DevOps/vscode/copilot/#control-completion","title":"Control completion","text":"<pre><code>\"github.copilot.enable\": {\n        \"*\": true,\n        \"plaintext\": false,\n        \"markdown\": false,\n        \"scminput\": false\n    }\n</code></pre>","tags":["vscode","copilot"]},{"location":"DevOps/vscode/copilot/#participants","title":"Participants","text":"<pre><code>@workspace: ask about files in your workspace\n</code></pre>","tags":["vscode","copilot"]},{"location":"DevOps/vscode/copilot/#slash","title":"Slash","text":"<p>highlight the code</p> <p>/doc</p> <p>/fix</p> <p>/test</p> <p>GitHub Copilot's @Workspace - Deep Dive</p>","tags":["vscode","copilot"]},{"location":"DevOps/vscode/copilot/#copilot","title":"copilot","text":"<ul> <li> Get to know GitHub Copilot in VS Code and be productive IMMEDIATELY </li> <li>VS Code Agent Mode Just Changed Everything</li> <li>Get Started with GitHub Copilot in VS Code (2025)</li> </ul>","tags":["vscode","copilot"]},{"location":"DevOps/vscode/dev_container/","title":"VSCode Dev Container","text":"<p>features</p> <p>TBD</p> <p>TBD</p>","tags":["vscode","devcontainer","docker"]},{"location":"DevOps/vscode/dev_container/#resource","title":"Resource","text":"<ul> <li>Development Containers : An open specification for enriching containers with development specific content and settings. </li> <li>Run DevContainer on remote host</li> <li>VScode docker volume</li> </ul>","tags":["vscode","devcontainer","docker"]},{"location":"DevOps/vscode/dev_container/vscode_devcontainer_remote_host/","title":"Run dev container on remote host","text":"","tags":["vscode","devcontainer","remote","context"]},{"location":"DevOps/vscode/dev_container/vscode_devcontainer_remote_host/#prepared-host","title":"Prepared host","text":"","tags":["vscode","devcontainer","remote","context"]},{"location":"DevOps/vscode/dev_container/vscode_devcontainer_remote_host/#ssh-key","title":"SSH key","text":"<pre><code>ssh-keygen -t ed25519 -C \"dev@gmail.com\"\n</code></pre> <pre><code>ssh-copy-id &lt;user&gt;r@&lt;host&gt;\n</code></pre>","tags":["vscode","devcontainer","remote","context"]},{"location":"DevOps/vscode/dev_container/vscode_devcontainer_remote_host/#prepared-vscode","title":"Prepared VSCode","text":"<ul> <li>install <code>Remote - SSH</code> (ms-vscode-remote.remote-ssh) extension</li> <li>install <code>Dev Containers</code> (ms-vscode-remote.remote-containers) extension</li> </ul>","tags":["vscode","devcontainer","remote","context"]},{"location":"DevOps/vscode/dev_container/vscode_devcontainer_remote_host/#config-docker-context","title":"Config docker context","text":"<p>Docker context defines the endpoint (i.e., the target Docker Engine) that the Docker CLI talks to. This allows you to easily switch between local Docker engines, remote Docker hosts</p>","tags":["vscode","devcontainer","remote","context"]},{"location":"DevOps/vscode/dev_container/vscode_devcontainer_remote_host/#create-docker-context-for-the-remote-host","title":"Create docker context for the remote host","text":"<pre><code>docker context create &lt;remote_name&gt;&lt;/remote_bane&gt; --docker \"host=ssh://user@remote-host\"\n\ndocker context create orin --docker \"host=ssh://user@10.0.0.4\"\n\ndocker context ls\n</code></pre>","tags":["vscode","devcontainer","remote","context"]},{"location":"DevOps/vscode/dev_container/vscode_devcontainer_remote_host/#vscode-working-with-devcontainer-on-remote-machine","title":"VSCode working with Devcontainer on Remote machine","text":"<ul> <li>Create folder on host and remote machine with the same path</li> <li>Change to remote context from docker/containers extension</li> </ul>","tags":["vscode","devcontainer","remote","context"]},{"location":"DevOps/vscode/dev_container/vscode_devcontainer_remote_host/#change-docker-context","title":"Change docker context","text":"","tags":["vscode","devcontainer","remote","context"]},{"location":"DevOps/vscode/dev_container/vscode_devcontainer_remote_host/#create-folders","title":"Create folders","text":"<p>Create project folder on the remote machine in the same location like the local machine</p>","tags":["vscode","devcontainer","remote","context"]},{"location":"DevOps/vscode/dev_container/vscode_devcontainer_remote_host/#demo","title":"Demo","text":"devcontainer.json<pre><code>{\n  \"name\": \"Remote DevContainer\",\n  \"workspaceFolder\": \"/workspaces/vscode_remote_devcontainer\",\n  \"build\": {\n    \"dockerfile\": \"Dockerfile\"\n  },\n  \"remoteUser\": \"user\",\n  \"runArgs\": [\"--network=host\"],\n  \"postCreateCommand\": \"echo 'DevContainer is ready!'\"\n}\n</code></pre>","tags":["vscode","devcontainer","remote","context"]},{"location":"DevOps/vscode/dev_container/vscode_devcontainer_remote_host/#dockerfile","title":"Dockerfile","text":"<p>Base on ubuntu 22.04 add none root user and install and config <code>sudo</code></p> <pre><code>FROM ubuntu:22.04\n\nARG DEBIAN_FRONTEND=noninteractive\n\nARG USERNAME=user\nARG USER_UID=1000\nARG USER_GID=$USER_UID\n\n# Check if \"ubuntu\" user exists, delete it if it does, then create the desired user\nRUN if getent passwd ubuntu &gt; /dev/null 2&gt;&amp;1; then \\\n        userdel -r ubuntu &amp;&amp; \\\n        echo \"Deleted existing ubuntu user\"; \\\n    fi &amp;&amp; \\\n    groupadd --gid $USER_GID $USERNAME &amp;&amp; \\\n    useradd -s /bin/bash --uid $USER_UID --gid $USER_GID -m $USERNAME &amp;&amp; \\\n    echo \"Created new user $USERNAME\"\n\n# Add sudo support for the non-root user\nRUN apt-get update &amp;&amp; apt-get install -y sudo \\\n  &amp;&amp; echo $USERNAME ALL=\\(root\\) NOPASSWD:ALL &gt; /etc/sudoers.d/$USERNAME\\\n  &amp;&amp; chmod 0440 /etc/sudoers.d/$USERNAME \\\n  &amp;&amp; rm -rf /var/lib/apt/lists/*\n\n\n  ARG DEBIAN_FRONTEND=\n</code></pre>","tags":["vscode","devcontainer","remote","context"]},{"location":"DevOps/vscode/dev_container/vscode_devcontainer_remote_host/#run","title":"Run","text":"<p>Warning</p> <p>How to sync files from remote to local machine</p>","tags":["vscode","devcontainer","remote","context"]},{"location":"DevOps/vscode/dev_container/vscode_docker_volume/","title":"VSCode docker volume","text":"<p>Using devcontainer vscode save <code>vscode-server</code> on docker volume to share between different containers</p> <p>It save the <code>vscode-server</code> binary in <code>/vscode/vscode-server/bin/linux-x64/&lt;commit id&gt;</code>, each time we upgrade the vscode it add new <code>&lt;commit id&gt;</code> folder</p> list servers<pre><code>docker run -it --rm -v vscode:/vscode busybox ls /vscode/vscode-server/bin/linux-x64\n</code></pre> <p>vscode version and commit id</p> <pre><code>code -v\n</code></pre> <pre><code>code -v | head -n 2 | tail -n 1\n</code></pre>","tags":["vscode","devcontainer","volume","docker"]},{"location":"DevOps/vscode/dev_container/vscode_docker_volume/#backup","title":"backup","text":"<pre><code>ver=$(code -v | head -n 1)\ndocker run --rm \\\n  -v vscode:/vscode \\\n  -v $(pwd):/backup \\\n  busybox \\\n  sh -c \"tar czf /backup/vscode_volume_${ver}.tar.gz -C /vscode .\"\n</code></pre>","tags":["vscode","devcontainer","volume","docker"]},{"location":"DevOps/vscode/dev_container/vscode_docker_volume/#restore","title":"Restore","text":"<pre><code>ver=$(code -v | head -n 1)\ndocker run --rm \\\n  -v vscode:/vscode \\\n  -v $(pwd):/backup \\\n  busybox \\\n  sh -c \"tar xzf /backup/vscode_volume_${ver}.tar.gz -C /vscode\"\n</code></pre>","tags":["vscode","devcontainer","volume","docker"]},{"location":"DevOps/vscode/dev_container/vscode_docker_volume/#clean-volume","title":"Clean volume","text":"remove all vscode-server old folder<pre><code>commit_id=$(code -v | head -n 2 | tail -n 1)\ndocker run -it --rm \\\n-v vscode:/vscode busybox \\\nbusybox \\\nsh -c \"cd /vscode/vscode-server/bin/linux-x64 &amp;&amp; for d in *; do [ \\\"\\$d\\\" != \\\"${commit_id}\\\" ] &amp;&amp; [ -d \\\"\\$d\\\" ] &amp;&amp; rm -rf \\\"\\$d\\\"; done\"\n</code></pre>","tags":["vscode","devcontainer","volume","docker"]},{"location":"DevOps/vscode/dev_container/features/","title":"Dev container features","text":"<p>Dev container features are modular, pre-built scripts and configurations that automatically install tools, libraries, or settings inside your dev container, without needing to write a full Dockerfile.</p> <p>They are reusable building blocks to build and config containers.</p> <p>Note</p> <p>The feature run after The docker finish it build stage</p> <p>Check feature templates more</p>","tags":["vscode","devcontainers","features"]},{"location":"DevOps/vscode/dev_container/features/#demo-add-none-root-user-using-feature","title":"Demo: Add none root user using feature","text":"<pre><code>\u251c\u2500\u2500 .devcontainer\n\u2502   \u251c\u2500\u2500 devcontainer.json\n\u2502   \u251c\u2500\u2500 Dockerfile\n\u2502   \u2514\u2500\u2500 features\n\u2502       \u2514\u2500\u2500 none_root_user\n\u2502           \u251c\u2500\u2500 devcontainer-feature.json\n\u2502           \u2514\u2500\u2500 install.sh\n\u251c\u2500\u2500 docker-compose.yaml\n</code></pre> .devcontainer.json<pre><code>{\n    \"name\": \"demo\",\n    \"dockerComposeFile\": [\n      \"../docker-compose.yaml\",\n    ],\n    \"features\": {\n      \"./features/none_root_user\": {\n        \"user\": \"ros\"\n      }\n    },\n    \"service\": \"dev\",\n    \"shutdownAction\": \"stopCompose\",\n    \"workspaceFolder\": \"/workspace\",\n    \"customizations\": {\n      \"vscode\": {\n        \"extensions\": [\n        ],\n        \"settings\": {}\n      }\n    }\n  }\n</code></pre> .devcontainer/features/none_root_user/devcontainer-feature.json<pre><code>{\n    \"name\": \"add none root user\",\n    \"id\": \"hello\",\n    \"version\": \"1.0.0\",\n    \"description\": \"add a non-root user with sudo\",\n    \"options\": {\n        \"user\": {\n            \"type\": \"string\",\n            \"proposals\": [\n                \"user\"\n            ],\n            \"default\": \"user\",\n            \"description\": \"The name of the user to create.\"\n        }\n    }\n}\n</code></pre> .devcontainer/features/none_root_user/install.sh<pre><code>#!/bin/bash\nset -e\n\n\nUSERNAME=${USER}\nUSER_UID=1000\nUSER_GID=$USER_UID\n# Check if \"ubuntu\" user exists, delete it if it does, then create the desired user\nif getent passwd ubuntu &gt; /dev/null 2&gt;&amp;1; then \\\n        userdel -r ubuntu &amp;&amp; \\\n        echo \"Deleted existing ubuntu user\"; \\\n    fi &amp;&amp; \\\n    groupadd --gid $USER_GID $USERNAME &amp;&amp; \\\n    useradd -s /bin/bash --uid $USER_UID --gid $USER_GID -m $USERNAME &amp;&amp; \\\n    echo \"Created new user $USERNAME\"\n# Add sudo support for the non-root user\napt-get update &amp;&amp; apt-get install -y sudo \\\n  &amp;&amp; echo $USERNAME ALL=\\(root\\) NOPASSWD:ALL &gt; /etc/sudoers.d/$USERNAME\\\n  &amp;&amp; chmod 0440 /etc/sudoers.d/$USERNAME \\\n  &amp;&amp; rm -rf /var/lib/apt/lists/*\n</code></pre> <p>variable</p> <p>To use variable declare in <code>devcontainer-feature.json</code> in the install.sh use the name uppercase <code>${USER}</code></p>","tags":["vscode","devcontainers","features"]},{"location":"DevOps/vscode/extensions/","title":"VSCode Extensions","text":"<p>Command Variable</p> <p>TBD</p> <p>TBD</p>","tags":["vscode","extensions"]},{"location":"DevOps/vscode/extensions/#download-vsix-link","title":"Download vsix link","text":"<pre><code> https://marketplace.visualstudio.com/_apis/public/gallery/publishers/${publisher}/vsextensions/${extension}/${version}/vspackage\n</code></pre>","tags":["vscode","extensions"]},{"location":"DevOps/vscode/extensions/#demo","title":"Demo","text":"<p>Download ROS2 Topic Viewer and install offline</p> <ul> <li>publisher: AlessandroSofia</li> <li>extension: ros2-topic-viewer</li> <li>Version: 0.1.3</li> </ul> <pre><code>wget https://marketplace.visualstudio.com/_apis/public/gallery/publishers/AlessandroSofia/vsextensions/ros2-topic-viewer/0.1.3/vspackage\n</code></pre> <pre><code>code --install-extension AlessandroSofia.ros2-topic-viewer-0.1.3.vsix\n</code></pre>","tags":["vscode","extensions"]},{"location":"DevOps/vscode/extensions/command_variable/","title":"command_variable","text":"<p>Extend vscode command variables to use in <code>tasks.json</code> and <code>launch.json</code> marketplace</p>","tags":["vscode","extensions","command_variable"]},{"location":"DevOps/vscode/extensions/command_variable/#file-pick-demo","title":"file pick demo","text":"<p>Open file select Can filter the file list to show using include and exclude arguments more</p> tasks.json<pre><code>{\n    \"version\": \"2.0.0\",\n    \"tasks\": [\n      {\n        \"label\": \"echo select file\",\n        \"type\": \"shell\",\n        \"command\": \"echo\",\n        \"args\": [\n          \"${input:file_path}\"\n        ],\n        \"problemMatcher\": []\n      }\n    ],\n    \"inputs\": [\n      {\n        \"id\": \"file_path\",\n        \"type\": \"command\",\n        \"command\": \"extension.commandvariable.file.pickFile\",\n        \"args\":{\n            \"include\": \"**/control\"\n        }\n\n      }\n    ]\n}\n</code></pre>","tags":["vscode","extensions","command_variable"]},{"location":"DevOps/vscode/mcp/","title":"MCP","text":"","tags":["mcp","vscode"]},{"location":"DevOps/vscode/mcp/#good-videos-and-posts","title":"Good videos  and posts","text":"<ul> <li>Visual Studio code + CMP server getting started guid what why how</li> </ul>","tags":["mcp","vscode"]},{"location":"DevOps/vscode/mcp/#must-watch","title":"Must watch","text":"<ul> <li>[Create MCP Servers from Python Code in 10.5 Minutes]|(https://youtu.be/2hwrxAbw-9Y)</li> </ul>","tags":["mcp","vscode"]},{"location":"DevOps/vscode/mcp/#must-read","title":"Must Read","text":"<ul> <li>MCP Server in Python \u2014 Everything I Wish I\u2019d Known on Day One</li> </ul>","tags":["mcp","vscode"]},{"location":"DevOps/vscode/remote_ssh/","title":"Remote ssh","text":"","tags":["vscode","remote","ssh","vscode-server"]},{"location":"DevOps/vscode/remote_ssh/#tips","title":"Tips","text":"","tags":["vscode","remote","ssh","vscode-server"]},{"location":"DevOps/vscode/remote_ssh/#add-x11-support","title":"Add x11 support","text":"<p>Add ForwardX11 and ForwardX11Trusted to user <code>.ssh/config</code> file</p> <pre><code>Host 10.0.0.4\n  HostName 10.0.0.4\n  User user\n  ForwardX11 yes\n  ForwardX11Trusted yes\n</code></pre>","tags":["vscode","remote","ssh","vscode-server"]},{"location":"DevOps/vscode/remote_ssh/#vscode-server-offline","title":"VSCode server offline","text":"<pre><code>code --version\n1.100.0\n19e0f9e681ecb8e5c09d8784acaa601316ca4571\nx64\n</code></pre> <pre><code>https://update.code.visualstudio.com/commit:{COMMIT_ID}/server-linux-x64/stable\n</code></pre> <pre><code># Download vscode server\nwget https://update.code.visualstudio.com/commit:19e0f9e681ecb8e5c09d8784acaa601316ca4571/server-linux-x64/stable\nwget https://update.code.visualstudio.com/commit:19e0f9e681ecb8e5c09d8784acaa601316ca4571/server-linux-arm64/stable\n</code></pre>","tags":["vscode","remote","ssh","vscode-server"]},{"location":"DevOps/vscode/tips_settings/","title":"VSCode tips and settings","text":"<p>Tasks</p> <p>Launch</p> <p>Snippets</p> <ul> <li>Keyboard shortcuts</li> <li>Editor</li> <li>Workbanch</li> <li>Terminal</li> </ul>","tags":["vscode","tips","settings"]},{"location":"DevOps/vscode/tips_settings/#keyboard-shortcuts","title":"keyboard shortcuts","text":"","tags":["vscode","tips","settings"]},{"location":"DevOps/vscode/tips_settings/#vscode-explorer","title":"VSCode explorer","text":"<p>Add <code>new file</code> and <code>new folder</code> keyboard shortcut in file explorer</p> <p>Add <code>key</code> to <code>keybindings.json</code> file <pre><code>{\n    \"key\": \"ctrl+n\",\n    \"command\": \"explorer.newFile\",\n    \"when\": \"explorerViewletFocus\"\n},\n{\n    \"key\": \"ctrl+shift+n\",\n    \"command\": \"explorer.newFolder\",\n    \"when\": \"explorerViewletFocus\"\n},\n</code></pre></p>","tags":["vscode","tips","settings"]},{"location":"DevOps/vscode/tips_settings/#terminal","title":"Terminal","text":"","tags":["vscode","tips","settings"]},{"location":"DevOps/vscode/tips_settings/#run-script-when-terminal-open","title":"run script when terminal open","text":"<pre><code>\"terminal.integrated.profiles.linux\": {\n      \"bash\": {\n          \"path\": \"bash\",\n          \"icon\": \"terminal-bash\",\n          \"args\": [\"--rcfile\", \"&lt;project&gt;/env.sh\"]\n      }\n  }\n</code></pre> <ul> <li>rcfile: specify an alternative initialization file (RC file) to source when starting a new bash session</li> </ul>","tags":["vscode","tips","settings"]},{"location":"DevOps/vscode/tips_settings/#editor","title":"Editor","text":"","tags":["vscode","tips","settings"]},{"location":"DevOps/vscode/tips_settings/#use-tab-instead-of-space","title":"Use tab instead of space","text":"<p>Config <code>tab</code> and not <code>space</code> for shell script <pre><code> \"[shellscript]\": {\n            \"editor.insertSpaces\": false,\n            \"editor.tabSize\": 4,\n            \"editor.detectIndentation\": false\n        },\n</code></pre></p> <p>When <code>editor.detectIndentation</code> false, VS Code ignores the file\u2019s existing indentation and uses the user-defined settings (e.g., editor.tabSize, editor.insertSpaces).</p>","tags":["vscode","tips","settings"]},{"location":"DevOps/vscode/tips_settings/#workbench","title":"Workbench","text":"<ul> <li>Mark active tab</li> <li>Tab focus mode</li> <li>Preview mode</li> </ul>","tags":["vscode","tips","settings"]},{"location":"DevOps/vscode/tips_settings/#tab-key-function","title":"Tab key function","text":"<p>I accidentally pressed some key combonition and the \"Tab\" switch the focus mode between pans' using command pallette to change tab function</p> <p></p>","tags":["vscode","tips","settings"]},{"location":"DevOps/vscode/tips_settings/#add-custom-color-to-active-tab","title":"Add custom color to active tab","text":"<pre><code>\"workbench.colorCustomizations\": {\n        \"tab.activeBorder\": \"#ff0000\",\n        \"tab.activeBackground\": \"#373737\"\n    },\n</code></pre>","tags":["vscode","tips","settings"]},{"location":"DevOps/vscode/tips_settings/#preview-mode","title":"Preview mode","text":"<p>preview or not</p>","tags":["vscode","tips","settings"]},{"location":"DevOps/vscode/tips_settings/#preview-mode_1","title":"Preview mode","text":"<p>VSCode default</p> <p>Preview Mode tabs are not kept open. As soon as you go to open another file from the sidebar, the existing Preview Mode tab (if one exists) is used. You can determine if a tab is in Preview Mode, by looking at its title in the tab bar. If the title is italic, the tab is in preview mode.</p> <p>To open a file for editing (i.e. don't open in Preview Mode), double-click on the file in the sidebar, or single-click it in the sidebar then double click the title of its Preview Mode tab.</p> <ul> <li>Clicking on a file in the explorer opens it in the editor in preview (the file name well be italic).</li> <li>Dbl-clicking on a file in the explorer opens it in the editor in a new tab.</li> <li>To switch file from preview to tab, dbl-click on the file title bar. (or start to edit)</li> </ul>","tags":["vscode","tips","settings"]},{"location":"DevOps/vscode/tips_settings/#disabled-preview-mode","title":"Disabled preview mode","text":"<pre><code>\"workbench.editor.enablePreview\": false,\n</code></pre>","tags":["vscode","tips","settings"]},{"location":"DevOps/vscode/tips_settings/launch/","title":"VSCode launch","text":"<p>VSCode launch.json is used to configure debugging settings for different programming languages and environments. It allows you to define how VS Code should start, attach to, or debug an application.</p>","tags":["vscode","launch"]},{"location":"DevOps/vscode/tips_settings/snippets/","title":"VSCode snippets","text":"<ul> <li>Markdown snippet</li> </ul>","tags":["vscode","snippets"]},{"location":"DevOps/vscode/tips_settings/tasks/","title":"VSCode Tasks","text":"","tags":["vscode","tips","tasks"]},{"location":"DevOps/vscode/tips_settings/tasks/#inputs","title":"Inputs","text":"<p>Inputs provide a way to get user-defined values before running a task.</p> <ul> <li>promptString</li> <li>pickString</li> </ul>","tags":["vscode","tips","tasks"]},{"location":"DevOps/vscode/tips_settings/tasks/#promptstring","title":"promptString","text":"<pre><code>{\n  \"version\": \"2.0.0\",\n  \"tasks\": [\n    {\n      \"label\": \"Run script with input\",\n      \"type\": \"shell\",\n      \"command\": \"echo User entered: ${input:myInput}\",\n      \"problemMatcher\": [],\n      \"group\": \"build\"\n    }\n  ],\n  \"inputs\": [\n    {\n      \"id\": \"myInput\",\n      \"type\": \"promptString\",\n      \"description\": \"Enter a value\"\n    }\n  ]\n}\n</code></pre>","tags":["vscode","tips","tasks"]},{"location":"DevOps/vscode/tips_settings/tasks/#pickstring","title":"pickString","text":"<pre><code>{\n  \"version\": \"2.0.0\",\n  \"tasks\": [\n    {\n      \"label\": \"Run script with input\",\n      \"type\": \"shell\",\n      \"command\": \"echo User entered: ${input:myInput}\",\n      \"problemMatcher\": [],\n      \"group\": \"build\"\n    }\n  ],\n  \"inputs\": [\n    {\n      \"id\": \"myInput\",\n      \"type\": \"pickString\",\n      \"description\": \"Enter a value\",\n      \"options\": [\"Option A\", \"Option B\", \"Option C\"]\n    }\n  ]\n}\n</code></pre> VSCode pickString","tags":["vscode","tips","tasks"]},{"location":"Embedded/","title":"Embedded","text":"<p>Arduino</p> <p>ESP32</p> <p>Jetson</p> <p>RPi</p> <p>TinyML</p> <p>Other embedded boards</p> <p>micro python</p>"},{"location":"Embedded/ESP32/","title":"ESP32","text":"<ul> <li>simple FOC</li> </ul>","tags":["esp32"]},{"location":"Embedded/ESP32/esp32_mqtt/","title":"ESP32 MQTT","text":"<p>Connect esp32 running arduino framework to ubuntu machine using MQTT protocol</p> <p>Connect ESP32 to PlotJuggler to visualize data</p>","tags":["arduino","esp32","mqtt","tutorial"]},{"location":"Embedded/ESP32/esp32_mqtt/#prerequisites","title":"Prerequisites","text":"<p>Install mqtt broker on ubuntu machine</p> <pre><code>sudo apt install mosquitto mosquitto-clients\n</code></pre> <pre><code>sudo systemctl status mosquitto\n</code></pre>","tags":["arduino","esp32","mqtt","tutorial"]},{"location":"Embedded/ESP32/esp32_mqtt/#test-mqtt-broker","title":"Test mqtt broker","text":"<ul> <li>Without authentication</li> </ul> terminal 1, subscriber<pre><code>mosquitto_sub -t \"hello/topic\"\n</code></pre> terminal 2, publisher<pre><code>mosquitto_pub -t 'hello/topic' -m 'hello MQTT'\n</code></pre>","tags":["arduino","esp32","mqtt","tutorial"]},{"location":"Embedded/ESP32/esp32_mqtt/#under-construction","title":"UNDER CONSTRUCTION","text":"","tags":["arduino","esp32","mqtt","tutorial"]},{"location":"Embedded/ESP32/esp32_simple_foc/","title":"Esp32 simple foc","text":"","tags":["esp32","simpleFOC","bldc","encoder"]},{"location":"Embedded/ESP32/esp32_simple_foc/#bom","title":"BOM","text":"","tags":["esp32","simpleFOC","bldc","encoder"]},{"location":"Embedded/Jetson/","title":"Nvidia Jetson","text":"<p>Jetpack </p> <p>Docker </p> <p>vpi </p> <ul> <li>using gpio using python</li> <li>build opencv with cuda support</li> <li>tensorrt</li> <li>nvidia jetson minimalist images</li> <li>nvidia flash bootloader only</li> </ul>","tags":["embedded","nvidia","jetson","orin"]},{"location":"Embedded/Jetson/build_opencv_with_cuda_support/","title":"OpenCV with cuda support on jetson","text":"<p>Build OpenCV with CUDA support on Jetson  Pack it using DEB for future use.</p> <p>Build scripts from  Qengineering/Install-OpenCV-Jetson-Nano </p> <pre><code>&gt;&gt;&gt; import cv2\n&gt;&gt;&gt; cv2.__version__\n'4.10.0'\n&gt;&gt;&gt; cv2.cuda.getCudaEnabledDeviceCount()\n1\n</code></pre> <pre><code>cmake -D CMAKE_BUILD_TYPE=RELEASE \\\n-D CMAKE_INSTALL_PREFIX=/usr \\\n-D OPENCV_EXTRA_MODULES_PATH=~/opencv_contrib/modules \\\n-D EIGEN_INCLUDE_PATH=/usr/include/eigen3 \\\n-D WITH_OPENCL=OFF \\\n-D CUDA_ARCH_BIN=${ARCH} \\\n-D CUDA_ARCH_PTX=${PTX} \\\n-D WITH_CUDA=ON \\\n-D WITH_CUDNN=ON \\\n-D WITH_CUBLAS=ON \\\n-D ENABLE_FAST_MATH=ON \\\n-D CUDA_FAST_MATH=ON \\\n-D OPENCV_DNN_CUDA=ON \\\n-D ENABLE_NEON=ON \\\n-D WITH_QT=OFF \\\n-D WITH_OPENMP=ON \\\n-D BUILD_TIFF=ON \\\n-D WITH_FFMPEG=ON \\\n-D WITH_GSTREAMER=ON \\\n-D WITH_TBB=ON \\\n-D BUILD_TBB=ON \\\n-D BUILD_TESTS=OFF \\\n-D WITH_EIGEN=ON \\\n-D WITH_V4L=ON \\\n-D WITH_LIBV4L=ON \\\n-D WITH_PROTOBUF=ON \\\n-D OPENCV_ENABLE_NONFREE=ON \\\n-D INSTALL_C_EXAMPLES=OFF \\\n-D INSTALL_PYTHON_EXAMPLES=OFF \\\n-D PYTHON3_PACKAGES_PATH=/usr/lib/python3/dist-packages \\\n-D OPENCV_GENERATE_PKGCONFIG=ON \\\n-D BUILD_EXAMPLES=OFF \\\n-D CMAKE_CXX_FLAGS=\"-march=native -mtune=native\" \\\n-D CMAKE_C_FLAGS=\"-march=native -mtune=native\" \\\n-D CPACK_BINARY_DEB=ON \\\n-D CPACK_PACKAGE_VERSION=4.10.0 \\\n-D CPACK_DEBIAN_PACKAGE_VERSION=4.10.0-1 \\\n..\n</code></pre> <p>CUDA_ARCH_BIN, CUDA_ARCH_PTX</p> <p>DEB</p> <p>The CPACK_BINARY_DEB option in OpenCV\u2019s CMake configuration enables packaging OpenCV as a Debian (.deb) package using CPack.</p> <pre><code>-D CPACK_BINARY_DEB=ON\n-D CPACK_PACKAGE_VERSION=4.10.0 \n-D CPACK_DEBIAN_PACKAGE_VERSION=4.10.0-1\n</code></pre> <pre><code>make package ..\n</code></pre>","tags":["nvidia","jetson","opencv","cuda"]},{"location":"Embedded/Jetson/build_opencv_with_cuda_support/#check-installation","title":"Check installation","text":"pull cuda runtime image<pre><code>docker pull nvidia/cuda:12.6.0-runtime-ubuntu22.04\n</code></pre> run and share cv build folder<pre><code># from build folder\ndocker run  --gpus all --runtime=nvidia \\\n    -it --rm --hostname test \\\n    -v `pwd`:/tmp/cv \\\n    nvidia/cuda:12.6.0-cudnn-runtime-ubuntu22.04  \\\n    /bin/bash\n</code></pre> <p>docker image</p> <p>We can start with docker that the cudnn is preinstall</p> <pre><code>docker pull nvidia/cuda:12.6.0-cudnn-runtime-ubuntu22.04\n</code></pre> <pre><code>docker pull  nvidia/cuda:12.6.0-runtime-ubuntu22.04 /bin/bash\n</code></pre> install dependencies<pre><code>apt update\napt install cudnn9 # skip if use the preinstall cudnn\napt install python3\napt install python3-numpy\n#\n#install all opencv debs\ncd /tmp/cv\napt install ./*.deb\n</code></pre> check cuda installation<pre><code>&gt;&gt;&gt; import cv2\n&gt;&gt;&gt; cv2.__version__\n'4.10.0'\n&gt;&gt;&gt; cv2.cuda.getCudaEnabledDeviceCount()\n1\n</code></pre>","tags":["nvidia","jetson","opencv","cuda"]},{"location":"Embedded/Jetson/flash_bootloader_only/","title":"Bootloader","text":"flash bootloader qspi<pre><code>l4t_initrd_flash.sh --qspi-only =p \"-c bootloader/generic/cfg/flash_t234_qpsi.xml\" cti/orin-nx/hadron/base internal\n</code></pre>","tags":["nvidia","bootloader","flash"]},{"location":"Embedded/Jetson/nvidia_gpio_using_python/","title":"GPIO on Nvidia jetson using python","text":"","tags":["nvidia","jetson","gpio","python"]},{"location":"Embedded/Jetson/nvidia_gpio_using_python/#todo-gpiod","title":"TODO: gpiod","text":"","tags":["nvidia","jetson","gpio","python"]},{"location":"Embedded/Jetson/nvidia_jetson_minimalist_images/","title":"Nvidia Jetson Minimalist Images","text":"<p>The need for the minimalist images came from the official jetson images being large in size and containing pre-installed packages that are not necessary, resulting in the consumption of valuable disk space and memory. github</p> <p>Tip</p> <p>user: jetson pass: jetson</p>","tags":["jetson","rootfs","image"]},{"location":"Embedded/Jetson/dockers/","title":"Docker nvidia","text":"<p>Nvidia NGC Catalog</p>","tags":["nvidia","jetson","docker","docker-compose"]},{"location":"Embedded/Jetson/dockers/#jetpack","title":"Jetpack","text":"<pre><code>docker pull nvcr.io/nvidia/l4t-jetpack:r36.4.0\n</code></pre>","tags":["nvidia","jetson","docker","docker-compose"]},{"location":"Embedded/Jetson/dockers/#nvidia-container-runtime","title":"Nvidia container runtime","text":"<pre><code>sudo apt install nvidia-container-toolkit\n</code></pre> usage<pre><code>sudo docker run --gpus all --runtime=nvidia -it --rm nvcr.io/nvidia/l4t-jetpack:r36.4.0 nvidia-smi\n</code></pre>","tags":["nvidia","jetson","docker","docker-compose"]},{"location":"Embedded/Jetson/dockers/#using-compose","title":"Using compose","text":"<p>Using compose override to run nvidia docker on pc and jetson</p> <p>nvidia runtime on jetson</p> <ul> <li>jetPack includes NVIDIA Container Runtime for Jetson, which is based on nvidia-docker2, but it does not auto-assign <code>runtime: nvidia</code>.</li> <li>You must explicitly request the nvidia runtime in your Docker Compose file to enable GPU access.</li> </ul>","tags":["nvidia","jetson","docker","docker-compose"]},{"location":"Embedded/Jetson/dockers/#what-does-runtime-nvidia-do","title":"What Does runtime: nvidia Do?:","text":"<ul> <li>Enables GPU passthrough into the container.</li> <li>Loads required GPU drivers and libraries into container's environment.</li> <li>Makes nvidia-smi, CUDA, cuDNN, TensorRT available in the container.</li> </ul>","tags":["nvidia","jetson","docker","docker-compose"]},{"location":"Embedded/Jetson/dockers/#demo-using-vscode-devcontainer-with-docker-compose","title":"Demo: using vscode devcontainer with docker compose","text":"<ul> <li>use <code>nvidia/cuda:12.6.0-cudnn-runtime-ubuntu22.04</code> as a base image</li> <li>use compose override to support pc and jetson running</li> <li>check running using <code>nvidia-smi</code></li> </ul> <pre><code>FROM nvidia/cuda:12.6.0-cudnn-runtime-ubuntu22.04\n</code></pre> docker-compose.yaml<pre><code>services:\n  dev:\n    build:\n      context: .\n      dockerfile: .devcontainer/Dockerfile\n    deploy:\n      resources:\n        reservations:\n          devices:\n            - capabilities: [gpu]\n    volumes:\n      - .:/workspace:cached\n    hostname: dev\n    network_mode: host\n    stdin_open: true\n    tty: true\n</code></pre> docker-compose.jetson.yaml<pre><code>services:\n  dev:\n    runtime: nvidia\n    environment:\n      - NVIDIA_VISIBLE_DEVICES=all\n      - NVIDIA_DRIVER_CAPABILITIES=compute,utility\n</code></pre>","tags":["nvidia","jetson","docker","docker-compose"]},{"location":"Embedded/Jetson/dockers/#vscode-devcontainer","title":"VScode devcontainer","text":"<pre><code>{\n    \"name\": \"opencv_cuda\",\n    \"dockerComposeFile\": [\n      \"../docker-compose.yaml\",\n      \"../docker-compose.jetson.yaml\"\n    ],\n    \"service\": \"dev\",\n    \"shutdownAction\": \"stopCompose\",\n    \"workspaceFolder\": \"/workspace\",\n    \"customizations\": {\n      \"vscode\": {\n        \"extensions\": [],\n        \"settings\": {}\n      }\n    }\n  }\n</code></pre>","tags":["nvidia","jetson","docker","docker-compose"]},{"location":"Embedded/Jetson/jetpack/","title":"Nvidia jetson Jetpack","text":"","tags":["nvidia","jetson","jetpack"]},{"location":"Embedded/Jetson/jetpack/#sdk-manager","title":"SDK Manager","text":"<pre><code># TODO: check when and way to command relevant\n# I install from sdk and missing opencv and nvcc, the command fix it\nsudo apt install nvidia-jetpack\n</code></pre>","tags":["nvidia","jetson","jetpack"]},{"location":"Embedded/Jetson/jetpack/#mapping","title":"Mapping","text":"<p>Mapping between Jetpack version and Jetson Linux</p> <pre><code>cat /etc/nv_tegra_release\n#\n# R36 (release), REVISION: 4.3,\n</code></pre> <p>it's map to Jetson linux 36.4.3</p> <p>Jetson linux Downloads</p> <p>The version map to link for download roosfs and toolchain</p> <pre><code>https://developer.nvidia.com/embedded/jetson-linux-r3643\n</code></pre>","tags":["nvidia","jetson","jetpack"]},{"location":"Embedded/Jetson/vpi/","title":"Jetson VPI","text":"<p>Vision Programming Interface is software library from NVIDIA for implementing algorithms on computing engines. more</p> <p>NVIDIA Optical Flow SDK</p> <p>The vpi and optical-flow-sdk are different library  the sdk not working with jetson more  opencv cuda_NvidiaOpticalFlow_1_0 class use the sdk to run.</p>","tags":["vpi","jetson","nvidia"]},{"location":"Embedded/Jetson/vpi/#resource","title":"Resource","text":"<ul> <li>VPI - Vision Programming Interface Documentation</li> <li> Introduction to NVIDIA VPI </li> </ul>","tags":["vpi","jetson","nvidia"]},{"location":"Embedded/RPI/","title":"Raspberry Pi","text":"<p>pico</p> <p></p>","tags":["rpi","raspberry"]},{"location":"Embedded/RPI/lora_hat/","title":"RPi zero with lora HAT","text":"<p>SX1268 433M LoRa HAT</p> <p></p>","tags":["zero","rpi","lora"]},{"location":"Embedded/RPI/lora_hat/#enable-serial-port","title":"Enable Serial port","text":"<ul> <li>Run <code>sudo raspi-config</code></li> <li>From Inerfacing Option select serial</li> </ul>","tags":["zero","rpi","lora"]},{"location":"Embedded/RPI/lora_hat/#install-python-dependencies","title":"Install python dependencies","text":"<pre><code>sudo apt install python3-pip\npip3 install --break-system-packages pyserial\n</code></pre>","tags":["zero","rpi","lora"]},{"location":"Embedded/RPI/lora_hat/#add-user-to-dialout","title":"Add user to dialout","text":"<pre><code>sudo usermod -aG dialout $USER\n</code></pre>","tags":["zero","rpi","lora"]},{"location":"Embedded/RPI/lora_hat/#run-demo","title":"Run demo","text":"<pre><code>cd ~/SX126X_LoRa_HAT_Code/raspberrypi/python/\npython3 main.py\n</code></pre>","tags":["zero","rpi","lora"]},{"location":"Embedded/RPI/lora_hat/#pinout","title":"PinOut","text":"","tags":["zero","rpi","lora"]},{"location":"Embedded/RPI/lora_hat/#gpio","title":"GPIO","text":"","tags":["zero","rpi","lora"]},{"location":"Embedded/arduino/","title":"Arduino","text":"<p>Dev environment</p> <p>platformio</p> <p>Libraries</p>","tags":["arduino","vscode","pio"]},{"location":"Embedded/arduino/#posts","title":"Posts","text":"<ul> <li>Arduino i2c</li> <li>Simple FOC with arduino</li> <li>Arduino REST Server</li> </ul>","tags":["arduino","vscode","pio"]},{"location":"Embedded/arduino/arduino_foc/","title":"Using SimpleFOC library with arduino","text":"","tags":["arduino","foc","bldc"]},{"location":"Embedded/arduino/arduino_foc/#bom","title":"BOM","text":"Item GM3506 Gimbal Motor Datasheet SimpleFOCMini V1.0","tags":["arduino","foc","bldc"]},{"location":"Embedded/arduino/arduino_foc/#wiring","title":"Wiring","text":"mini pin EN IN3 IN2 IN1 GND Uno pin 4 5 6 9 GND","tags":["arduino","foc","bldc"]},{"location":"Embedded/arduino/arduino_foc/#code","title":"Code","text":"src/main.cpp<pre><code>#include &lt;Arduino.h&gt;\n#include &lt;SimpleFOC.h&gt;\n\n// Define motor driver pins\n#define PWM_A 9\n#define PWM_B 6\n#define PWM_C 5\n#define ENABLE_PIN 4\n\n// Create the BLDC driver object\nBLDCDriver3PWM driver(PWM_A, PWM_B, PWM_C, ENABLE_PIN);\n\n// Create the BLDC motor object\nBLDCMotor motor = BLDCMotor(11); // 7 pole pairs (estimate for GM3506)\n\n// Create an open-loop velocity control\nvoid setup()\n{\n  Serial.begin(9600);\n\n  // Initialize driver\n  driver.voltage_power_supply = 12; // Set to your supply voltage\n  driver.init();\n\n  // Link driver to motor\n  motor.linkDriver(&amp;driver);\n\n  // Open-loop velocity mode\n  motor.voltage_limit = 6; // Limit voltage to half supply\n  motor.controller = MotionControlType::velocity_openloop;\n\n  // Initialize motor\n  motor.init();\n  Serial.println(\"Motor Ready!\");\n}\n\nvoid loop()\n{\n  motor.move(1);\n  motor.loopFOC();\n}\n</code></pre> <p>Note</p> <p>In <code>velocity_openloop</code> mode the speed depends on supply voltage and motor parameters. </p> platformio.ini<pre><code>[env:uno]\nplatform = atmelavr\nboard = uno\nframework = arduino\nlib_deps = askuric/Simple FOC@^2.2\n</code></pre>","tags":["arduino","foc","bldc"]},{"location":"Embedded/arduino/arduino_foc/#add-encoder","title":"Add encoder","text":"","tags":["arduino","foc","bldc"]},{"location":"Embedded/arduino/arduino_foc/#wiring_1","title":"Wiring","text":"color desc uno pin black CSN  (chip select) D10 (any gpio) purple CLK D13 (SCK) yellow MOSI (master out slave in) D11 (COPI) green MISO (master in slave out) D12 (CIPO) red 5/3.3 white GND","tags":["arduino","foc","bldc"]},{"location":"Embedded/arduino/arduino_foc/#code_1","title":"Code","text":"<p>Using FOC library with encoder</p> src/main.cpp<pre><code>#include &lt;Arduino.h&gt;\n#include &lt;SimpleFOC.h&gt;\n\n// Define motor driver pins\n#define PWM_A 9\n#define PWM_B 6\n#define PWM_C 5\n#define ENABLE_PIN 4\n\n// Create the BLDC driver object\nBLDCDriver3PWM driver(PWM_A, PWM_B, PWM_C, ENABLE_PIN);\n\n// Create the BLDC motor object\nBLDCMotor motor = BLDCMotor(11); // 7 pole pairs (estimate for GM3506)\nMagneticSensorSPI as5047u = MagneticSensorSPI(10, 14, 0x3FFF);\n// Create an open-loop velocity control\nvoid setup()\n{\n  Serial.begin(115200);\n  as5047u.init();\n  Serial.println(\"as5047u ready\");\n  // Initialize driver\n  driver.voltage_power_supply = 12; // Set to your supply voltage\n  driver.init();\n\n  // Link driver to motor\n  motor.linkDriver(&amp;driver);\n\n  // Open-loop velocity mode\n  motor.voltage_limit = 6; // Limit voltage to half supply\n  motor.controller = MotionControlType::velocity_openloop;\n\n  // Initialize motor\n  motor.init();\n  Serial.println(\"Motor Ready!\");\n}\n\nvoid loop()\n{\n  motor.move(1);\n  motor.loopFOC();\n  as5047u.update();\n  // display the angle and the angular velocity to the terminal\n  Serial.print(as5047u.getAngle());\n  Serial.print(\"\\t\");\n  Serial.println(as5047u.getVelocity());\n}\n</code></pre>","tags":["arduino","foc","bldc"]},{"location":"Embedded/arduino/arduino_i2c/","title":"Arduino i2c","text":"","tags":["arduino","i2c","scanner"]},{"location":"Embedded/arduino/arduino_i2c/#i2c-scanner","title":"i2c scanner","text":"i2c scanner<pre><code>#include &lt;Arduino.h&gt;\n\n#include &lt;Wire.h&gt;\n\nvoid setup()\n{\n  Wire.begin();\n\n  Serial.begin(9600);\n  while (!Serial)\n  Serial.println(\"\\nI2C Scanner\");\n}\n\nvoid loop()\n{\n  byte error, address;\n  int nDevices;\n\n  Serial.println(\"Scanning...\");\n\n  nDevices = 0;\n  for (address = 1; address &lt; 127; address++)\n  {\n    // The i2c_scanner uses the return value of\n    // the Write.endTransmisstion to see if\n    // a device did acknowledge to the address.\n    Wire.beginTransmission(address);\n    error = Wire.endTransmission();\n\n    if (error == 0)\n    {\n      Serial.print(\"I2C device found at address 0x\");\n      if (address &lt; 16)\n        Serial.print(\"0\");\n      Serial.print(address, HEX);\n      Serial.println(\"  !\");\n\n      nDevices++;\n    }\n    else if (error == 4)\n    {\n      Serial.print(\"Unknown error at address 0x\");\n      if (address &lt; 16)\n        Serial.print(\"0\");\n      Serial.println(address, HEX);\n    }\n  }\n  if (nDevices == 0)\n    Serial.println(\"No I2C devices found\\n\");\n  else\n    Serial.println(\"done\\n\");\n\n  delay(5000); // wait 5 seconds for next scan\n}\n</code></pre>","tags":["arduino","i2c","scanner"]},{"location":"Embedded/arduino/arduino_i2c_gpio_extension/","title":"Arduino i2c gpio extension","text":"","tags":["mcp23017","i2c","arduino"]},{"location":"Embedded/arduino/arduino_i2c_gpio_extension/#boom","title":"Boom","text":"<ul> <li>MCP23017 I2C Interface 16bit I/O Extension</li> </ul>","tags":["mcp23017","i2c","arduino"]},{"location":"Embedded/arduino/arduino_mqtt/","title":"Connect Arduino with PC using MQTT","text":"<p>Publish data from arduino that run on ESP32 device to pc that run <code>mosquito</code> MQTT broker via wifi</p>","tags":["arduino","mqtt","PubSubClient","Mosquito"]},{"location":"Embedded/arduino/arduino_mqtt/#pc","title":"PC","text":"<ul> <li>Install </li> <li>Config</li> </ul>","tags":["arduino","mqtt","PubSubClient","Mosquito"]},{"location":"Embedded/arduino/arduino_mqtt/#config","title":"Config","text":"<p>Add this line allow broker to listen to all port and allow connection without user and password</p> /etc/mosquitto/mosquitto.conf<pre><code>listener 1883 0.0.0.0\nallow_anonymous true\n</code></pre> restart service<pre><code>systemctl restart mosquitto\n</code></pre> <pre><code>[env:esp32dev]\nplatform = espressif32\nplatform_packages=\n  framework-arduinoespressif32 @ https://github.com/espressif/arduino-esp32.git#3.0.3\n  framework-arduinoespressif32-libs @ https://github.com/espressif/arduino-esp32/releases/download/3.0.3/esp32-arduino-libs-3.0.3.zip\nboard = esp32dev\nframework = arduino\nserial_speed = 115200\nmonitor_speed = 115200\nlib_deps = \n    PubSubClient\n</code></pre>","tags":["arduino","mqtt","PubSubClient","Mosquito"]},{"location":"Embedded/arduino/arduino_mqtt/#arduino-code","title":"Arduino code","text":"<pre><code>#include &lt;WiFi.h&gt;\n#include &lt;PubSubClient.h&gt;\n\n// WiFi\nconst char *ssid = \"&lt;&gt;\"; // Enter your Wi-Fi name\nconst char *password = \"&lt;&gt;\";  // Enter Wi-Fi password\n\n// MQTT Broker\nconst char *mqtt_broker = \"&lt;&gt;\";\nconst char *topic = \"mqtt/esp32\";\nconst int mqtt_port = 1883;\n\nWiFiClient espClient;\nPubSubClient client(espClient);\n\nvoid callback(char *topic, byte *payload, unsigned int length) {\n  Serial.print(\"Message arrived in topic: \");\n  Serial.println(topic);\n  Serial.print(\"Message:\");\n  for (int i = 0; i &lt; length; i++) {\n      Serial.print((char) payload[i]);\n  }\n  Serial.println();\n  Serial.println(\"-----------------------\");\n}\n\nvoid setup() {\n    // Set software serial baud to 115200;\n    Serial.begin(115200);\n    // Connecting to a WiFi network\n    WiFi.begin(ssid, password);\n    while (WiFi.status() != WL_CONNECTED) {\n        delay(500);\n        Serial.println(\"Connecting to WiFi..\");\n    }\n    Serial.println(\"Connected to the Wi-Fi network\");\n    //connecting to a mqtt broker\n    client.setServer(mqtt_broker, mqtt_port);\n    client.setCallback(callback);\n    while (!client.connected()) {\n        String client_id = \"esp32-client-\";\n        client_id += String(WiFi.macAddress());\n        Serial.printf(\"The client %s connects to the public MQTT broker\\n\", client_id.c_str());\n        if (client.connect(client_id.c_str())) {\n            Serial.println(\"Public EMQX MQTT broker connected\");\n        } else {\n            Serial.print(\"failed with state \");\n            Serial.print(client.state());\n            delay(2000);\n        }\n    }\n    // Publish and subscribe\n    client.publish(topic, \"Hi, I'm ESP32 ^^\");\n    client.subscribe(topic);\n}\n\n\n\nvoid loop() {\n    client.loop();\n}\n</code></pre>","tags":["arduino","mqtt","PubSubClient","Mosquito"]},{"location":"Embedded/arduino/arduino_mqtt/#usage","title":"usage","text":"<pre><code>mosquitto_sub -t \"mqtt/esp32\"\n</code></pre>","tags":["arduino","mqtt","PubSubClient","Mosquito"]},{"location":"Embedded/arduino/arduino_mqtt/#reference","title":"Reference","text":"<ul> <li>MQTT on ESP32: A Beginner's Guide</li> <li>PubSibClient API</li> </ul>","tags":["arduino","mqtt","PubSubClient","Mosquito"]},{"location":"Embedded/arduino/arduino_web_rest_server/","title":"Implement RESET Server using Arduino on ESP32 board","text":"<p>Using esp32 board with arduino platform to create REST server</p> <p>BOM</p> esp32 seeed_xiao_esp32s3","tags":["arduino","esp32","web","REST"]},{"location":"Embedded/arduino/arduino_web_rest_server/#init-project","title":"init project","text":"<pre><code>[env:seeed_xiao_esp32]\nplatform = espressif32\nboard = seeed_xiao_esp32s3\nframework = arduino\nlib_deps = bblanchon/ArduinoJson@^7.3.0\n</code></pre>","tags":["arduino","esp32","web","REST"]},{"location":"Embedded/arduino/arduino_web_rest_server/#init-vscode-project","title":"init vscode project","text":"<p>Create vscode <code>c_cpp_properties.json</code> for declared board in the platformio.ini files</p> <pre><code>pio init --ide vscode\n</code></pre>","tags":["arduino","esp32","web","REST"]},{"location":"Embedded/arduino/arduino_web_rest_server/#install-libraries","title":"Install libraries","text":"<pre><code>pio lib install bblanchon/ArduinoJson@^7.3.0\n</code></pre>","tags":["arduino","esp32","web","REST"]},{"location":"Embedded/arduino/arduino_web_rest_server/#rest-app","title":"REST App","text":"<ul> <li>Simple code that init the wifi and create GET REST api <code>getValues</code> that return json</li> </ul> code <pre><code>#include &lt;Arduino.h&gt;\n#include &lt;WiFi.h&gt;\n#include &lt;WebServer.h&gt;\n#include &lt;ArduinoJson.h&gt;\n\n#pragma region consts\nconst char* ssid = \"xxx\";\nconst char* password = \"xxxx\";\n#pragma endregion\n\n#pragma region globals\nWebServer server(80);\nStaticJsonDocument&lt;1024&gt; jsonDocument;\nchar buffer[1024];\n#pragma endregion\n\n#pragma region REST API\nvoid getValues(){\n  Serial.println(\"get all values\");\n  jsonDocument.clear();\n    jsonDocument[\"name\"] = \"hello\";\n  serializeJson(jsonDocument, buffer);\n    server.send(200, \"application/json\", buffer);\n}\nvoid setupApi() {\n  server.on(\"/getValues\", getValues);\n  // server.on(\"/setStatus\", HTTP_POST, handlePost);\n\n  // start server\n  server.begin();\n}\n\n#pragma endregion REST API\n\n#pragma region init\nvoid initWiFi() {\n  WiFi.mode(WIFI_STA);\n  WiFi.begin(ssid, password);\n  Serial.print(\"Connecting to WiFi ..\");\n  while (WiFi.status() != WL_CONNECTED) {\n    Serial.println(\".!\");\n    delay(1000);\n  }\n  Serial.println(WiFi.localIP());\n\n}\n#pragma endregion\n\nvoid setup() {\n  Serial.begin(115200);\n  initWiFi();\n  Serial.print(\"RRSI: \");\n  Serial.println(WiFi.RSSI());\n  setupApi();\n}\n\nvoid loop() {\n  server.handleClient();\n}\n</code></pre>","tags":["arduino","esp32","web","REST"]},{"location":"Embedded/arduino/arduino_web_rest_server/#build-and-upload","title":"build and upload","text":"<pre><code># build\npio run\n\n# upload\npio run --target upload\n</code></pre>","tags":["arduino","esp32","web","REST"]},{"location":"Embedded/arduino/arduino_web_rest_server/#usage","title":"usage","text":"<pre><code>http://10.100.102.24/getValues\n</code></pre>","tags":["arduino","esp32","web","REST"]},{"location":"Embedded/arduino/arduino_web_rest_server/#add-post","title":"Add POST","text":"Post <pre><code>void handlePost() {\n  if (server.hasArg(\"plain\")) {  // Check if there is a body\n      String message = server.arg(\"plain\");  // Get POST body\n      deserializeJson(jsonDocument, message);\n      Serial.println(\"Received POST Data: \" + message);\n      Serial.println(\"Received json Data: \" + String((const char*)jsonDocument[\"cmd\"]));\n      server.send(HTTP_OK, CONTENT_TYPE, \"{\\\"status\\\":\\\"success\\\"}\");\n  } else {\n      server.send(HTTP_ERROR, \"text/plain\", \"Bad Request\");\n  }\n}\n\nvoid setupApi() {\n    server.on(\"/getValues\", getValues);\n    server.on(\"/setStatus\", HTTP_POST, handlePost);\n\n    server.begin();\n}\n</code></pre>","tags":["arduino","esp32","web","REST"]},{"location":"Embedded/arduino/arduino_web_rest_server/#usage_1","title":"usage","text":"<pre><code>curl -X POST http://10.100.102.24/setStatus \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\"cmd\": \"value\"}'\n\n# result\n{\"status\":\"success\"}(venv)\n</code></pre>","tags":["arduino","esp32","web","REST"]},{"location":"Embedded/arduino/arduino_web_rest_server/#reference","title":"Reference","text":"<ul> <li>ESP32 Useful Wi-Fi Library Functions </li> <li>How to build a REST API server with ESP32user</li> </ul>","tags":["arduino","esp32","web","REST"]},{"location":"Embedded/arduino/libraries/","title":"Arduino libraries","text":"<ul> <li>Arduino Json</li> </ul>","tags":["arduino","libraries"]},{"location":"Embedded/arduino/libraries/arduino_jeson/","title":"ArduinoJson","text":"<p>Read and more</p>","tags":["arduino","json","library"]},{"location":"Embedded/arduino/libraries/arduino_jeson/#demos","title":"Demos","text":"","tags":["arduino","json","library"]},{"location":"Embedded/arduino/libraries/arduino_jeson/#deserialization","title":"Deserialization","text":"platformio ini     Using ESP32 hardware   <pre><code>[env:seeed_xiao]\nplatform = espressif32\nplatform_packages=\n  framework-arduinoespressif32 @ https://github.com/espressif/arduino-esp32.git#3.0.3\n  framework-arduinoespressif32-libs @ https://github.com/espressif/arduino-esp32/releases/download/3.0.3/esp32-arduino-libs-3.0.3.zip\n\nboard = seeed_xiao_esp32s3\nframework = arduino\nupload_port = /dev/ttyACM0\nmonitor_speed = 115200\n\nlib_deps =\n    bblanchon/ArduinoJson\n</code></pre> <ul> <li>Parser json demo</li> </ul>","tags":["arduino","json","library"]},{"location":"Embedded/arduino/platformio/","title":"Platformio","text":"","tags":["platformio","arduino"]},{"location":"Embedded/arduino/platformio/#arduino","title":"Arduino","text":"","tags":["platformio","arduino"]},{"location":"Embedded/arduino/platformio/#esp32","title":"ESP32","text":"<p>The Arduino framework for ESP32 is actually a wrapper around the Espressif ESP-IDF. This means that while you write Arduino-style code (setup() and loop() functions), under the hood, ESP-IDF components handle tasks like Wi-Fi, Bluetooth, and RTOS scheduling. Arduino ESP32</p>","tags":["platformio","arduino"]},{"location":"Embedded/arduino/platformio/#config","title":"Config","text":"<pre><code>[env:esp32dev]\nplatform = espressif32\nboard = esp32dev\nframework = arduino\nmonitor_speed = 115200\nupload_speed = 921600\n</code></pre> <p>Upgrade Arduino ESP32 version</p> <ul> <li>framework-arduinoespressif32: core Arduino-ESP32 framework package</li> <li>framework-arduinoespressif32-libs: additional precompiled libraries that can speed up compilation.</li> </ul> <pre><code>[env:esp32dev]\nplatform = espressif32\nplatform_packages=\nframework-arduinoespressif32 @ https://github.com/espressif/arduino-esp32.git#3.0.3\nframework-arduinoespressif32-libs @ https://github.com/espressif/arduino-esp32/releases/download/3.0.3/esp32-arduino-libs-3.0.3.zip\nboard = esp32dev\nframework = arduino\n</code></pre>","tags":["platformio","arduino"]},{"location":"Embedded/arduino/vscode_dev/","title":"Using VSCode with platformio cli as Arduino dev environment","text":"<p>Using Platformio CLI to develop, build, and upload firmware for embedded systems</p> <p>Platformio VSCode extension</p> <p>Graphical interface that integrates with VS Code for an easier development experience.</p>","tags":["arduino","dev","vscode","pio","platformio"]},{"location":"Embedded/arduino/vscode_dev/#install","title":"Install","text":"<pre><code>pip install platformio\n</code></pre>","tags":["arduino","dev","vscode","pio","platformio"]},{"location":"Embedded/arduino/vscode_dev/#basic-command-cheat","title":"Basic command cheat","text":"Command Description pio project init --board  Create a new project pio lib install  Install libraries pio run Build firmware pio run --target upload Upload code to the board pio device monitor Open Serial Monitor pio run --target clean   Clean compiled files","tags":["arduino","dev","vscode","pio","platformio"]},{"location":"Embedded/arduino/vscode_dev/#init-project","title":"Init project","text":"<pre><code>pio project init --board &lt;board name&gt;\n</code></pre> <pre><code># search for arduino mega 2560 atmelmegaavr bord\npio boards | grep -i mega | grep 2560\n\n# select megaatmega2560 from the list\n\npio project init --board megaatmega2560\n</code></pre>","tags":["arduino","dev","vscode","pio","platformio"]},{"location":"Embedded/arduino/vscode_dev/#project-struct","title":"Project struct","text":"<pre><code>\u251c\u2500\u2500 .vscode\n|        \u2514\u2500\u2500 c_cpp_properties.json\n\u251c\u2500\u2500 include\n|        \u2514\u2500\u2500 helper.hpp\n\u251c\u2500\u2500 lib                                # External libraries (if manually added)\n\u251c\u2500\u2500 platformio.ini                     # PlatformIO configuration file\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 src\n|    \u251c\u2500\u2500 helper.cpp\n|    \u2514\u2500\u2500 main.cpp\n\u2514\u2500\u2500 test\n</code></pre> <p>create c_cpp_properties.json</p> <pre><code>pio init --ide vscode\n</code></pre> <p>code organize</p> <ul> <li>include libraries</li> <li>defines and constants</li> <li>global variables</li> <li>user defined function or function signatures</li> <li>setup</li> <li>loop</li> </ul>","tags":["arduino","dev","vscode","pio","platformio"]},{"location":"Embedded/arduino/vscode_dev/#demo","title":"Demo","text":"<p>Use blink LED demo to learn how to split project to</p> <ul> <li>Multiple file</li> <li>Create Library</li> <li>Arduino OOP</li> </ul>","tags":["arduino","dev","vscode","pio","platformio"]},{"location":"Embedded/arduino/vscode_dev/#multiple-files","title":"Multiple files","text":"<p>Split utils function to header and code good reference</p>","tags":["arduino","dev","vscode","pio","platformio"]},{"location":"Embedded/arduino/vscode_dev/#project","title":"Project","text":"<pre><code>\u251c\u2500\u2500 include\n\u2502   \u2514\u2500\u2500 led_function.hpp\n\u251c\u2500\u2500 platformio.ini\n\u2514\u2500\u2500 src\n    \u251c\u2500\u2500 led_function.cpp\n    \u2514\u2500\u2500 main.cpp\n</code></pre> lef_function.hpp<pre><code>#ifndef LED_FUNCTUIN_H\n#define LED_FUNCTUIN_H\n\n#include &lt;Arduino.h&gt;\n\nvoid powerOnLed(byte pin);\nvoid powerOffLed(byte pin);\n\n#endif\n</code></pre> lef_function.cpp<pre><code>#include \"led_function.hpp\"\n\nvoid powerOnLed(byte pin){\n    digitalWrite(pin, HIGH);   // Turn the LED on\n  }\n\n  void powerOffLed(byte pin){\n    digitalWrite(pin, LOW);   // Turn the LED on\n  }\n</code></pre> main.cpp<pre><code>#include &lt;Arduino.h&gt;\n#include \"led_function.hpp\"\n\n# define LED_PIN 13\n\nvoid setup() {\n  Serial.begin(115200);\n  // Print log\n  Serial.println(\"setup\");\n  pinMode(LED_PIN, OUTPUT);\n}\n\nvoid loop() {\n\n  powerOnLed(LED_PIN);\n  delay(1000);                   // Wait for a second\n  powerOffLed(LED_PIN);\n  delay(1000);                   // Wait for a second\n}\n</code></pre>","tags":["arduino","dev","vscode","pio","platformio"]},{"location":"Embedded/arduino/vscode_dev/#create-custom-library","title":"Create custom Library","text":"<p>Create an Arduino library</p>","tags":["arduino","dev","vscode","pio","platformio"]},{"location":"Embedded/arduino/vscode_dev/#todo-arduino-custom-library","title":"TODO: Arduino custom library","text":"","tags":["arduino","dev","vscode","pio","platformio"]},{"location":"Embedded/arduino/vscode_dev/#arduino-oop","title":"Arduino OOP","text":"<p>Arduino OOP [40-Minute Crash Course]</p>","tags":["arduino","dev","vscode","pio","platformio"]},{"location":"Embedded/arduino/vscode_dev/#todo-arduino-oop","title":"TODO: arduino OOP","text":"","tags":["arduino","dev","vscode","pio","platformio"]},{"location":"Embedded/micro_python/","title":"Micro Python","text":"<p>MicroPython is a lean and efficient implementation of the Python 3 programming language that includes a small subset of the Python standard library and is optimised to run on microcontrollers and in constrained environments. more</p> <p>RPI Pico</p> <p></p> <p></p>","tags":["micro python","esp32","thonny"]},{"location":"Embedded/micro_python/pico/","title":"Raspberry PI pico with MicroPython","text":"","tags":["pico","micropython"]},{"location":"Embedded/micro_python/pico/#install","title":"Install","text":"<p>Download , boot with bootsel press and drag it to mass storage</p>","tags":["pico","micropython"]},{"location":"Embedded/micro_python/pico/#pinout","title":"Pinout","text":"","tags":["pico","micropython"]},{"location":"Embedded/micro_python/pico/#thonny","title":"Thonny","text":"","tags":["pico","micropython"]},{"location":"Embedded/micro_python/pico/#demo-blink-led","title":"Demo: blink led","text":"blink<pre><code>from machine import Pin\nfrom time import sleep\n\nled = Pin(\"LED\", Pin.OUT)\n\nwhile True:\n    led.toggle()\n    sleep(1)        # Wait 1 second\n</code></pre>","tags":["pico","micropython"]},{"location":"Embedded/micro_python/pico/#demo-web-server","title":"Demo: Web Server","text":"<ul> <li>install micodot library</li> <li>set wlan using network library</li> </ul> <pre><code># default port 5000\nimport network\nimport time\nimport asyncio\nfrom microdot import Microdot\n\n# === Connect to Wi-Fi ===\nssid = '&lt;ssid&gt;'\npassword = '&lt;pass&gt;'\n\nwlan = network.WLAN(network.STA_IF)\nwlan.active(True)\nwlan.connect(ssid, password)\n\nprint('Connecting to WiFi...', end='')\nwhile not wlan.isconnected():\n    print('.', end='')\n    time.sleep(1)\n\nprint('\\nConnected. IP:', wlan.ifconfig()[0])\n\napp = Microdot()\n\n@app.route('/')\nasync def index(request):\n    return 'Hello, world!'\n\nasync def main():\n    # start the server in a background task\n    server = asyncio.create_task(app.start_server())\n\n    # ... do other asynchronous work here ...\n\n    # cleanup before ending the application\n    await server\n\nasyncio.run(main())\n</code></pre>","tags":["pico","micropython"]},{"location":"Embedded/other_boards/","title":"Index","text":"<p>Odroid</p> <p>TBD</p> <p>TBD</p>","tags":["embedded","boards"]},{"location":"Embedded/other_boards/odroid/","title":"Odroid","text":"<p>An affordable, power-efficient, high-performance Single Board Computer that supports Android and Linux platforms. more</p>","tags":["odroid","gpio","gpiod"]},{"location":"Embedded/other_boards/odroid/#install","title":"Install","text":"<ul> <li>docs</li> <li>Download os</li> </ul> <p>1.8 v</p> <p>All GPIO use 1.8 vdc for signaling Don't connect 3.3VDC or 5VDC</p> <p></p> <p></p>","tags":["odroid","gpio","gpiod"]},{"location":"Embedded/other_boards/odroid/#demo","title":"Demo","text":"<p>Mapping gpio name to gpiod command</p> <p>from the pinout table we locate ping 13 as GPX1.5 using <code>/sys/kernel/debug/gpio</code> we look for gpx1 pins</p> <pre><code>sudo cat /sys/kernel/debug/gpio | grep gpx\n#\ngpiochip1: GPIOs 8-15, parent: platform/13400000.pinctrl, gpx0:\ngpiochip2: GPIOs 16-23, parent: platform/13400000.pinctrl, gpx1:\ngpiochip3: GPIOs 24-31, parent: platform/13400000.pinctrl, gpx2:\ngpiochip4: GPIOs 32-39, parent: platform/13400000.pinctrl, gpx3:\n</code></pre> gpioinfo on gpiochip2<pre><code>sudo gpioinfo gpiochip2\n\ngpiochip2 - 8 lines:\n        line   0:      unnamed       unused   input  active-high \n        line   1:      unnamed       unused   input  active-high \n        line   2:      unnamed       unused   input  active-high \n        line   3:      unnamed       unused   input  active-high \n        line   4:      unnamed       unused   input  active-high \n        line   5:      unnamed       unused   input  active-high \n        line   6:      unnamed       unused   input  active-high \n        line   7:      unnamed       unused   input  active-high \n</code></pre> <p>1.8 v</p> <p>All GPIO use 1.8 vdc for signaling Don't connect 3.3VDC or 5VDC</p> gpioset<pre><code># toggle line5 to high (1.8v)\nsudo gpioset gpiochip2 5=1\n# toggle line5 to low\nsudo gpioset gpiochip2 5=0\n</code></pre> gpioinfo on gpiochip2 after the set command<pre><code>sudo gpioinfo gpiochip2\ngpiochip2 - 8 lines:\n        line   0:      unnamed       unused  output  active-high \n        line   1:      unnamed       unused   input  active-high \n        line   2:      unnamed       unused   input  active-high \n        line   3:      unnamed       unused   input  active-high \n        line   4:      unnamed       unused   input  active-high \n        line   5:      unnamed       unused  output  active-high \n        line   6:      unnamed       unused   input  active-high \n        line   7:      unnamed       unused   input  active-high \n</code></pre>","tags":["odroid","gpio","gpiod"]},{"location":"Embedded/other_boards/odroid/#demo-do-it-again","title":"Demo: do it again","text":"<pre><code>sudo cat /sys/kernel/debug/gpio | grep gpx\n#\ngpiochip1: GPIOs 8-15, parent: platform/13400000.pinctrl, gpx0:\ngpiochip2: GPIOs 16-23, parent: platform/13400000.pinctrl, gpx1:\ngpiochip3: GPIOs 24-31, parent: platform/13400000.pinctrl, gpx2:\ngpiochip4: GPIOs 32-39, parent: platform/13400000.pinctrl, gpx3:\n</code></pre> <p>from the pinout table we locate ping 19 as GPX2.6</p> gpioset<pre><code># toggle line5 to high (1.8v)\nsudo gpioset gpiochip3 6=1\n# toggle line5 to low\nsudo gpioset gpiochip3 6=0\n</code></pre>","tags":["odroid","gpio","gpiod"]},{"location":"Embedded/tiny_ml/","title":"TinyML","text":"","tags":["tinyml"]},{"location":"Embedded/tiny_ml/#tensorflow-light","title":"Tensorflow light","text":"<pre><code>pip3 install tensorflow\npip3 install tflite-runtime\n</code></pre>","tags":["tinyml"]},{"location":"Embedded/tiny_ml/#resources","title":"Resources","text":"<ul> <li> Building with TensorFlow Lite for microcontrollers | Workshop </li> <li>IoT and Tiny Machine Learning (Spring 2024)</li> </ul>","tags":["tinyml"]},{"location":"Embedded/tiny_ml/xiao/","title":"TinyML","text":"","tags":["tiny_ml","xiao","tf-lite"]},{"location":"Embedded/tiny_ml/xiao/#hardware","title":"Hardware","text":"<p>Seeed Studio XIAO ESP32S3</p> <p></p> <p></p> blink code simple blink<pre><code>#include &lt;Arduino.h&gt;\n\nconst int ledPin = 21; // Change this to the pin your LED is connected to\n\nvoid setup() {\n    pinMode(ledPin, OUTPUT);\n}\n\nvoid loop() {\n    digitalWrite(ledPin, HIGH); // Turn the LED on\n    delay(1000);                // Wait for a second\n    digitalWrite(ledPin, LOW);  // Turn the LED off\n    delay(1000);                // Wait for a second\n}\n</code></pre> platformio.ini<pre><code>[env:seeed_xiao_esp32s3]\nplatform = espressif32\nplatform_packages=\n  framework-arduinoespressif32 @ https://github.com/espressif/arduino-esp32.git#3.0.3\n  framework-arduinoespressif32-libs @ https://github.com/espressif/arduino-esp32/releases/download/3.0.3/esp32-arduino-libs-3.0.3.zip\n\nboard = seeed_xiao_esp32s3\nframework = arduino\n</code></pre>","tags":["tiny_ml","xiao","tf-lite"]},{"location":"Other/","title":"Other","text":"<p>GStreamer</p> <p>markdown </p> <p>Block 3 Description</p> <p>Block 4 Description</p> <p>courses and books</p> <p>Presentation</p>"},{"location":"Other/Gstreamer/","title":"GStreamer","text":"<p>Element and Pipes</p> <p>mpegts</p> <p>python_bindings</p>"},{"location":"Other/Gstreamer/#more-examples","title":"More examples","text":"<ul> <li>rtsp server exemple</li> <li>Video stream pipes</li> <li>pipes examples</li> </ul>"},{"location":"Other/Gstreamer/gst_stream_pipes/","title":"GStreamer video stream pipe","text":"<p>Using gstreamer to stream h264/h265 over network</p>","tags":["gstreamer","streaming","h265","h264"]},{"location":"Other/Gstreamer/gst_stream_pipes/#h265-cpu-encoder","title":"H265 cpu encoder","text":"<pre><code>gst-launch-1.0 videotestsrc \\\n! video/x-raw, width=640, height=480, framerate=30/1, format=I420 \\\n! videoconvert \\\n! x265enc tune=zerolatency speed-preset=ultrafast key-int-max=30 bitrate=500 \\\n! rtph265pay config-interval=1 mtu=1400 \\\n! udpsink host=127.0.0.1 port=5000 sync=true\n</code></pre> property description more ... config-interval Send VPS, SPS and PPS Insertion Interval in seconds (default 0) help decoder to interpret video stream key-int-max defines the maximum interval between keyframes, keyframes: is a full image <pre><code>## receive\ngst-launch-1.0 udpsrc port=5000 \\\n! application/x-rtp, encoding-name=H265, payload=96 \\\n! rtpjitterbuffer latency=10 \\\n! rtph265depay \\\n! decodebin \\\n! fpsdisplaysink sync=true\n</code></pre>","tags":["gstreamer","streaming","h265","h264"]},{"location":"Other/Gstreamer/gst_stream_pipes/#h265-nvidia-jetson","title":"H265 nvidia jetson","text":"<pre><code>gst-launch-1.0 videotestsrc ! video/x-raw, width=640, height=480, framerate=30/1, format=I420 \\\n! nvvidconv ! 'video/x-raw(memory:NVMM)' \\\n! nvv4l2h265enc preset-level=UltraFastPreset \\\nbitrate=500000 vbv-size=500000 control-rate=GST_V4L2_VIDENC_CONSTANT_BITRATE \\\n! rtph265pay config-interval=1 \\\n! udpsink host=10.0.0.1 port=5000 sync=true\n</code></pre> property description more ... vbv-size Control the encoder buffer size, affecting bitrate variability Smaller values = Stable bitrate (good for live streaming) <pre><code>## receive\ngst-launch-1.0 udpsrc port=5000 \\\n! application/x-rtp, encoding-name=H265, payload=96 \\\n! rtpjitterbuffer latency=10 \\\n! rtph265depay \\\n! decodebin \\\n! fpsdisplaysink sync=true\n</code></pre>","tags":["gstreamer","streaming","h265","h264"]},{"location":"Other/Gstreamer/gst_stream_pipes/#multicast","title":"Multicast","text":"<p>IPv4 multicast address define from <code>222.0.0.0</code> to <code>239.255.255.255</code></p> <p>To Stream over multicast just change the ip to multicast range udpsink support multicast by default</p> <p>lo multicast</p> <p>By default multicast disabled on LO</p> <pre><code>#check \nifconfig lo | grep -i multicast\n\n# enable\nsudo ifconfig lo multicast\n#or\nsudo ip list set lo multicast on\n</code></pre> <pre><code>gst-launch-1.0 videotestsrc \\\n! video/x-raw, width=640, height=480, framerate=30/1, format=I420 \\\n! videoconvert \\\n! x265enc tune=zerolatency speed-preset=ultrafast key-int-max=30 bitrate=500 \\\n! rtph265pay config-interval=1 mtu=1400 \\\n! udpsink host=224.0.0.1 port=5000 sync=true\n</code></pre>","tags":["gstreamer","streaming","h265","h264"]},{"location":"Other/Gstreamer/gst_stream_pipes/#h264","title":"H264","text":"sender<pre><code>gst-launch-1.0 videotestsrc is-live=true \\\n! video/x-raw,width=640,height=480,framerate=20/1 \\\n! videoconvert \\\n! x264enc tune=zerolatency speed-preset=ultrafast bitrate=500 key-int-max=20 \\\n! rtph264pay config-interval=1 pt=96 \\\n! udpsink host=127.0.0.1 port=5000 sync=true\n</code></pre> receiver<pre><code>gst-launch-1.0 udpsrc port=5000 caps=\"application/x-rtp, media=video, encoding-name=H264, payload=96\" \\\n! rtph264depay \\\n! avdec_h264 \\\n! videoconvert \\\n! autovideosink sync=true\n</code></pre> <p>Fast sync between sender and receiver</p> <p>The idea H264/H265 is to send full frame in intervals and between the send partial changes</p> <ul> <li>I-frames: (keyframe) full image</li> <li>P-frames:</li> <li>B-frames:</li> </ul> <p>x264 uses adaptive keyframe intervals, which can go very long without IDRs (especially for static syne) The receiver wait for i-frame to sync and it can take 6-8 sec when we are in static sync use key-int-max=20 force the encoder to send i-frame each 30 frames, in 20 fps rate it send full image every 1 sec.</p>","tags":["gstreamer","streaming","h265","h264"]},{"location":"Other/Gstreamer/pipes_examples/","title":"Gstreamer pipes example","text":"","tags":["gstreamer","pipes","demos"]},{"location":"Other/Gstreamer/pipes_examples/#control-framerate","title":"Control framerate","text":"<p>Control 60hz source and reduce stream to 10 hz Queue save only the newest frames</p> <pre><code>gst-launch-1.0 v4l2src device=/dev/video4 \\\n! video/x-raw,width=640,height=480,framerate=60/1 \\\n! videoconvert \\\n! queue max-size-buffers=1 leaky=downstream \\\n! videorate \\\n! video/x-raw,framerate=10/1 \\\n! fpsdisplaysink\n</code></pre>","tags":["gstreamer","pipes","demos"]},{"location":"Other/Gstreamer/pipes_examples/#capture-one-image-from-camera","title":"Capture one image from camera","text":"<pre><code>gst-launch-1.0 v4l2src device=/dev/video0 num-buffers=1 \\\n! video/x-raw \\\n! jpegenc \\\n! filesink location=frame.jpg\n</code></pre>","tags":["gstreamer","pipes","demos"]},{"location":"Other/Gstreamer/gstreamer/","title":"Gstreamer","text":"","tags":["gstreamer"]},{"location":"Other/Gstreamer/mpegts/","title":"Gstreamer mpegts","text":"<p>klv</p> <p>TBD</p> <p>TBD</p>","tags":["gstreamer","mpegts"]},{"location":"Other/Gstreamer/mpegts/#demo","title":"Demo","text":"<p>Send video over udp using h264 encoder and mpegts as a transform (no RTP)</p> sender<pre><code>gst-launch-1.0 -v videotestsrc is-live=true \\\n! x264enc tune=zerolatency bitrate=1000 speed-preset=superfast key-int-max=15 \\\n! video/x-h264,profile=main \\\n! mpegtsmux \\\n! udpsink host=127.0.0.1 port=5000\n</code></pre> <ul> <li>key-int-max=15: Forces a keyframe every 15 frames (lower values reduce startup delay).</li> <li>tune=zerolatency: Removes internal buffering.</li> </ul> receiver<pre><code>gst-launch-1.0 -v udpsrc port=5000 \\\n! tsdemux \\\n! h264parse \\\n! avdec_h264 \\\n! autovideosink\n</code></pre> <p>Tip</p> <p>key-int-max=15: Forces a keyframe every 15 frames (lower values reduce startup delay).</p> <p>tmuxp script to run the pipes</p>","tags":["gstreamer","mpegts"]},{"location":"Other/Gstreamer/mpegts/#more-then-one-stream","title":"More then one stream","text":"<ul> <li>Using RTP</li> </ul> sender<pre><code>gst-launch-1.0 -v mpegtsmux name=mux alignment=7 \\\n    ! rtpmp2tpay \\\n    ! udpsink host=127.0.0.1 port=5000 \\\nvideotestsrc pattern=ball is-live=true ! videoconvert ! x264enc tune=zerolatency bitrate=1000 speed-preset=superfast key-int-max=15 ! h264parse ! queue ! mux. \\\nvideotestsrc pattern=smpte is-live=true ! videoconvert ! x264enc tune=zerolatency bitrate=1000 speed-preset=superfast key-int-max=15  ! h264parse ! queue ! mux.\n</code></pre> receiver<pre><code>gst-launch-1.0 -v udpsrc port=5000 buffer-size=2000000 caps=\"application/x-rtp, media=video, encoding-name=MP2T, payload=33\" \\\n! rtpmp2tdepay \\\n! tsdemux name=demux \\\ndemux. ! queue ! h264parse ! avdec_h264 ! videoconvert ! autovideosink \\\ndemux. ! queue ! h264parse ! avdec_h264 ! videoconvert ! autovideosink\n</code></pre> <p>Note</p> <p>TODO: read more about the difference</p> <p>Tip</p> <pre><code>gst-launch-1.0 -v udpsrc port=5000 ! fakesink dump=true\ngst-launch-1.0 -v udpsrc port=5000 caps=\"video/mpegts, systemstream=true\" ! tsdemux ! fakesink\n</code></pre> <p>dump stream data to screen</p>","tags":["gstreamer","mpegts"]},{"location":"Other/Gstreamer/mpegts/#appsrc-demo","title":"AppSrc Demo","text":"<p>Send generated image using opencv to <code>appsrc</code> element</p> Send image using appsrc example <pre><code>\"\"\"simple pipeline and wait for bus message\n\nTags:\n    - add_signal_watch\n    - bus\n    - pipeline\n        - set_state\n        - get_bus\n\"\"\"\nimport gi\nimport numpy as np\nimport cv2\ngi.require_version(\"Gst\", \"1.0\")\nfrom gi.repository import Gst, GLib\n\n# Initialize GStreamer\nGst.init(None)\n\nWIDTH, height, FRAMERATE = 640, 480, 20\nPIPELINE = f\"\"\"appsrc is-live=true name=source is-live=true format=time \\\n! video/x-raw,format=BGR,width={WIDTH},height={height},framerate={FRAMERATE}/1 \\\n! videoconvert \\\n! timeoverlay time-mode=buffer-count \\\n! x264enc tune=zerolatency bitrate=1000 speed-preset=ultrafast key-int-max={FRAMERATE} \\\n! video/x-h264,profile=main \\\n! mpegtsmux \\\n! udpsink host=127.0.0.1 port=5000\"\"\"\n\n\n# change pipe for rtp support\nPIPELINE = f\"\"\"appsrc is-live=true name=source is-live=true format=time \\\n! video/x-raw,format=BGR,width={WIDTH},height={height},framerate={FRAMERATE}/1 \\\n! videoconvert \\\n! timeoverlay time-mode=buffer-count \\\n! queue \\\n! x264enc tune=zerolatency bitrate=1000 speed-preset=ultrafast key-int-max={FRAMERATE} \\\n! video/x-h264,profile=main \\\n! mpegtsmux alignment=7 \\\n! rtpmp2tpay \\\n! udpsink host=127.0.0.1 port=5000\"\"\"\n\ndef gen_frame(id:int) -&gt; bytes:\n    \"\"\"Generate omage\n    Create black image with counter text\n    \"\"\"\n    frame = np.zeros((height, WIDTH, 3), dtype=np.uint8)\n    cv2.putText(frame, f\"Appsrc Video {id}\", (50, height // 2), cv2.FONT_HERSHEY_SIMPLEX, 2, (255, 255, 255), 3)\n    # Convert the frame to a GStreamer buffer\n    data = frame.tobytes()\n    return data\n\ndef push_data():\n    \"\"\"push gen image to gst buffer\n    set pts dts and duration\n    Returns:\n        _type_: _description_\n    \"\"\"\n    data = gen_frame(push_data.counter)\n    buf = Gst.Buffer.new_allocate(None, len(data), None)\n    buf.fill(0, data)\n\n    duration_ns = int(1e9 / FRAMERATE)\n    buf.pts = buf.dts = push_data.counter * duration_ns\n    buf.duration = duration_ns\n    GLib.log_default_handler(\"MyApp\", GLib.LogLevelFlags.LEVEL_MESSAGE, f\"This {push_data.counter}\")\n    # Push the buffer to appsrc\n    retval = appsrc.emit(\"push-buffer\", buf)\n    if retval != Gst.FlowReturn.OK:\n        print(\"Error pushing buffer:\", retval)\n        loop.quit()\n\n    push_data.counter += 1\n    return True\n\ndef bus_callback(bus, message, loop):\n    \"\"\"\n    Handle GStreamer bus messages.\n    \"\"\"\n    if message.type == Gst.MessageType.EOS:\n        print(\"End-of-stream received, exiting.\")\n        loop.quit()\n    elif message.type == Gst.MessageType.ERROR:\n        err, debug = message.parse_error()\n        print(f\"Error: {err}, Debug Info: {debug}\")\n        loop.quit()\n    elif message.type == Gst.MessageType.STATE_CHANGED:\n        old, new, pending = message.parse_state_changed()\n        print(f\"State changed from {old.value_name} to {new.value_name}\")\n    return True\n\npipeline = Gst.parse_launch(PIPELINE)\nappsrc = pipeline.get_by_name(\"source\")\npipeline.set_state(Gst.State.PLAYING)\npush_data.counter = 0\nbus = pipeline.get_bus()\nbus.add_signal_watch()\nloop = GLib.MainLoop()\nbus.connect(\"message\", bus_callback, loop)\n# gst timer\nGLib.timeout_add(1000 // FRAMERATE, push_data)\ntry:\n    loop.run()\nexcept KeyboardInterrupt:\n    print(\"Exiting...\")\nfinally:\n    pipeline.set_state(Gst.State.NULL)\n</code></pre>","tags":["gstreamer","mpegts"]},{"location":"Other/Gstreamer/mpegts/#usage","title":"usage","text":"<p>Run script and receiver pipe</p> receiver<pre><code>gst-launch-1.0 -v udpsrc port=5000 \\\n! tsdemux \\\n! h264parse \\\n! avdec_h264 \\\n! autovideosink\n</code></pre> <p></p>","tags":["gstreamer","mpegts"]},{"location":"Other/Gstreamer/mpegts/#add-rtp","title":"Add RTP","text":"<p>Sending MPEG video over RTP - RTP includes sequence numbers in each packet, allowing the receiver to reorder packets if they arrive out of order. using jitter - RTP packets contain timestamps to help the receiver synchronize playback.</p> <ul> <li>TODO: Add more why, check when direct UDP is batter</li> </ul> <pre><code># change pipe for rtp support\nPIPELINE = f\"\"\"appsrc is-live=true name=source is-live=true format=time \\\n! video/x-raw,format=BGR,width={WIDTH},height={height},framerate={FRAMERATE}/1 \\\n! videoconvert \\\n! timeoverlay time-mode=buffer-count \\\n! x264enc tune=zerolatency bitrate=1000 speed-preset=superfast key-int-max=15 \\\n! video/x-h264,profile=main \\\n! mpegtsmux alignment=7 \\\n! rtpmp2tpay \\\n! udpsink host=127.0.0.1 port=5000\"\"\"\n</code></pre> description mpegtsmux alignment=7 The alignment property in mpegtsmux determines how MPEG-TS packets are arranged inside the output transport stream.  <p>7: Fully aligned \u2013 combines all alignments above for better RTP streaming.</p> rtpmp2tpay Encapsulates MPEG-TS (Transport Stream) data into RTP packets receiver pipe<pre><code>gst-launch-1.0 -v udpsrc port=5000 buffer-size=2000000 caps=\"application/x-rtp, media=video, encoding-name=MP2T, payload=33\" \\\n! rtpmp2tdepay \\\n! tsdemux name=demux \\\n! h264parse \\\n! avdec_h264 \\\n! autovideosink\n</code></pre>","tags":["gstreamer","mpegts"]},{"location":"Other/Gstreamer/mpegts/klv/","title":"KLV","text":"<p>A KLV stream is a sequence of Key-Length-Value encoded messages Using gstreamer we can send and receive klv data in <code>SMPTE 336M</code> standard</p> <p>SMPTE 336M</p> <p>The standard require 16 byte Universal Label (UL) as the key.  more</p>","tags":["klv","gstreamer"]},{"location":"Other/Gstreamer/mpegts/klv/#demo","title":"Demo","text":"<p>Send and Receive klv using gstreamer python binding</p> sender<pre><code>import gi\ngi.require_version('Gst', '1.0')\nfrom gi.repository import Gst, GLib\nimport time\n\nGst.init()\n\npipeline_str = \"appsrc name=klv_source caps=meta/x-klv,parsed=true ! rtpklvpay ! udpsink host=127.0.0.1 port=5002\"\npipeline = Gst.parse_launch(pipeline_str)\n\nappsrc = pipeline.get_by_name(\"klv_source\")\n\ndef push_klv_data():\n    # Create dummy KLV data\n    klv_data = bytes([\n        0x06, 0x0E, 0x2B, 0x34, 0x01, 0x01, 0x01, 0x01, 0x0E, 0x01, 0x03, 0x01, 0x01, 0x00, 0x00, 0x00,  # Key\n        0x02,  # Length\n        0x01, 0x02   # Value\n    ])\n\n    buf = Gst.Buffer.new_allocate(None, len(klv_data), None)\n    buf.fill(0, klv_data)\n    appsrc.emit(\"push-buffer\", buf)\n    return True\n\n# Set up the main loop\nloop = GLib.MainLoop()\n\n# Start the pipeline\npipeline.set_state(Gst.State.PLAYING)\n\n# Push KLV data periodically\nGLib.timeout_add_seconds(1, push_klv_data)\n\ntry:\n    loop.run()\nexcept KeyboardInterrupt:\n    pass\n\n# Clean up\npipeline.set_state(Gst.State.NULL)\n</code></pre> receiver<pre><code># klv_receiver.py\nimport gi\ngi.require_version('Gst', '1.0')\nfrom gi.repository import Gst, GLib\n\nGst.init(None)\n\ndef on_new_sample(sink):\n    sample = sink.emit(\"pull-sample\")\n    buf = sample.get_buffer()\n    success, map_info = buf.map(Gst.MapFlags.READ)\n    if success:\n        data = map_info.data\n        print(\"Received KLV:\", list(data))\n        buf.unmap(map_info)\n    return Gst.FlowReturn.OK\n\npipeline = Gst.parse_launch(\"\"\"\nudpsrc port=5002 caps=\"application/x-rtp, media=application, encoding-name=SMPTE336M, payload=96\" !\nrtpklvdepay ! appsink name=sink emit-signals=true sync=true\n\"\"\")\n\nsink = pipeline.get_by_name(\"sink\")\nsink.connect(\"new-sample\", on_new_sample)\n\npipeline.set_state(Gst.State.PLAYING)\nloop = GLib.MainLoop()\nloop.run()\n</code></pre>","tags":["klv","gstreamer"]},{"location":"Other/Gstreamer/mpegts/klv/gst_demo/","title":"MPEG with KLV","text":"mpeg send image and kvl data sender mpeg receiver parse kvl data receiver","tags":["gstreamer","mpegts","klv","metadata","python"]},{"location":"Other/Gstreamer/mpegts/klv/gst_demo/#reference-to-check-and-read","title":"Reference , To check and read","text":"<ul> <li>GStreamer KVL plugins</li> <li>klv_decoder</li> </ul>","tags":["gstreamer","mpegts","klv","metadata","python"]},{"location":"Other/Gstreamer/mpegts/klv/klv_stanag/","title":"KLV","text":"<p>A KLV stream is a sequence of Key-Length-Value encoded messages</p> <p>MISB/STANAG</p> <p>TBD</p> <p>TBD</p> Description MISB Motion Imagery Standard Board ST 601 MISB Defines UAS Datalink Local Set (core telemetry format) STANAG 4609 NATO Standardization Agreement (include MISB ST 601) UAS metadata Sensor telemetry sent with drone imagery","tags":["klv"]},{"location":"Other/Gstreamer/mpegts/klv/klv_stanag/#unmanned-air-system-uas-metadata","title":"Unmanned Air System (UAS) Metadata","text":"<p>UAS metadata refers to the telemetry and context information transmitted alongside video or sensor feeds from an Unmanned Aerial System (drone/UAV). It includes:</p> <ul> <li>Timestamp</li> <li>Platform orientation</li> <li>Platform position</li> <li>more ..</li> </ul>","tags":["klv"]},{"location":"Other/Gstreamer/mpegts/klv/klv_stanag/#demo-using-klvdata-python-library","title":"Demo: using klvdata python library","text":"<p>klvdata github</p> <pre><code>pip install klvdata\n</code></pre>","tags":["klv"]},{"location":"Other/Gstreamer/mpegts/klv/klv_stanag/#reference","title":"Reference","text":"<ul> <li>MISB ST 0601.8 UAS Datalink Local Set</li> <li>mpg video with klv stream</li> <li>klvdata - python library for MISB 601 </li> </ul>","tags":["klv"]},{"location":"Other/Gstreamer/python_bindings/","title":"GStreamer python bindings","text":"","tags":["gstreamer","python","bindings","gst-bindings"]},{"location":"Other/Gstreamer/python_bindings/#install","title":"Install","text":"<pre><code>sudo apt-get install gstreamer1.0-tools gstreamer1.0-python3 \n</code></pre>","tags":["gstreamer","python","bindings","gst-bindings"]},{"location":"Other/Gstreamer/python_bindings/#simple-usage","title":"Simple usage","text":"<pre><code>import gi\ngi.require_version('Gst', '1.0')\nfrom gi.repository import Gst, GLib\n\n# Initialize GStreamer\nGst.init(None)\n\n# Create a GStreamer pipeline\npipeline = Gst.parse_launch(\"videotestsrc ! videoconvert ! autovideosink\")\n\n# Start playing the video\npipeline.set_state(Gst.State.PLAYING)\n\n# Creates a main loop to keep the program running.\nloop = GLib.MainLoop()\nloop.run()\n</code></pre>","tags":["gstreamer","python","bindings","gst-bindings"]},{"location":"Other/Gstreamer/python_bindings/#appsrc","title":"AppSrc","text":"<p>todo: explain the code</p> <pre><code>import sys\nimport numpy as np\nimport traceback\nimport time\nimport gi\ngi.require_version('Gst', '1.0')\nfrom gi.repository import Gst, GLib\n\n# Initializes Gstreamer, it's variables, paths\nGst.init(sys.argv)\n\nPIPELINE = \"appsrc name=app_src ! video/x-raw,width=640,height=480,format=BGR,framerate=10/1 ! videoconvert ! autovideosink\"\n\ndef ndarray_to_gst_buffer(array: np.ndarray) -&gt; Gst.Buffer:\n    \"\"\"Converts numpy array to Gst.Buffer\"\"\"\n    return Gst.Buffer.new_wrapped(array.tobytes())\n\n\ndef on_message(bus: Gst.Bus, message: Gst.Message, loop: GLib.MainLoop):\n    mtype = message.type\n    if mtype == Gst.MessageType.EOS:\n        print(\"End of stream\")\n        loop.quit()\n\n    elif mtype == Gst.MessageType.ERROR:\n        err, debug = message.parse_error()\n        print(err, debug)\n        loop.quit()\n\n    elif mtype == Gst.MessageType.WARNING:\n        err, debug = message.parse_warning()\n        print(err, debug)\n\n    return True\n\npipeline = Gst.parse_launch(PIPELINE)\nappsource = pipeline.get_by_name(\"app_src\")\nbus = pipeline.get_bus()\n# allow bus to emit messages to main thread\nbus.add_signal_watch()\n# Start pipeline\npipeline.set_state(Gst.State.PLAYING)\n# Init GObject loop to handle Gstreamer Bus Events\nloop = GLib.MainLoop()\n\n# Add handler to specific signal\nbus.connect(\"message\", on_message, loop)\n\n# Push buffer and check\nfor _ in range(10):\n    arr = np.random.randint(low=0,high=255,size=(480,640,3),dtype=np.uint8)\n    appsource.emit(\"push-buffer\", ndarray_to_gst_buffer(arr))\n    time.sleep(1/10)\nappsource.emit(\"end-of-stream\")\n\ntry:\n    loop.run()\nexcept Exception:\n    traceback.print_exc()\n    loop.quit()\n\n# Stop Pipeline\npipeline.set_state(Gst.State.NULL)\n</code></pre>","tags":["gstreamer","python","bindings","gst-bindings"]},{"location":"Other/Gstreamer/rtsp/","title":"Index","text":"server.py<pre><code>import sys\nimport gi\n\ngi.require_version('Gst', '1.0')\ngi.require_version('GstRtspServer','1.0')\nfrom gi.repository import Gst, GstRtspServer, GLib\n\nloop = GLib.MainLoop()\nGst.init(None)\n\nclass MyFactory(GstRtspServer.RTSPMediaFactory):\n    def __init__(self):\n        GstRtspServer.RTSPMediaFactory.__init__(self)\n\n    def do_create_element(self, url):\n        s_src = \"v4l2src ! video/x-raw,rate=30,width=320,height=240 ! videoconvert ! video/x-raw,format=I420\"\n        s_h264 = \"videoconvert ! vaapiencode_h264 bitrate=1000\"\n        s_src = \"videotestsrc ! video/x-raw,rate=30,width=320,height=240,format=I420\"\n        s_h264 = \"x264enc tune=zerolatency\"\n        pipeline_str = \"( {s_src} ! queue max-size-buffers=1 name=q_enc ! {s_h264} ! rtph264pay name=pay0 pt=96 )\".format(**locals())\n        if len(sys.argv) &gt; 1:\n            pipeline_str = \" \".join(sys.argv[1:])\n        print(pipeline_str)\n        return Gst.parse_launch(pipeline_str)\n\nclass GstServer():\n    def __init__(self):\n        self.server = GstRtspServer.RTSPServer()\n        f = MyFactory()\n        f.set_shared(True)\n        m = self.server.get_mount_points()\n        m.add_factory(\"/test\", f)\n        self.server.attach(None)\n\nif __name__ == '__main__':\n    s = GstServer()\n    loop.run()\n\n# gst-play-1.0 rtsp://127.0.0.1:8554/test\n</code></pre> player<pre><code>gst-launch-1.0 rtspsrc location=rtsp://127.0.0.1:8554/test ! rtph264depay ! avdec_h264 ! autovideosink\n</code></pre>","tags":["gstreamer","rtsp","server","python"]},{"location":"Other/Gstreamer/rtsp/#todo-explain-server","title":"todo: explain server","text":"","tags":["gstreamer","rtsp","server","python"]},{"location":"Other/Presentation/","title":"Presentaions","text":"<p>ROS Application from development to deploy using docker and vscode</p> <p>Block 2 Description</p> <p>Block 3 Description</p>"},{"location":"Other/Presentation/learn_path/","title":"Index","text":"<p>Robotics Software Development</p>"},{"location":"Other/Presentation/learn_path/#skills","title":"Skills","text":"<ul> <li>Programming</li> <li>Robotics</li> <li>ROS</li> <li>DevOps</li> <li>Do not afraid to learn new things</li> </ul>"},{"location":"Other/Presentation/learn_path/#prerequisites","title":"Prerequisites","text":"<ul> <li>Linux</li> <li>Python</li> </ul>"},{"location":"Other/Presentation/learn_path/#novice","title":"Novice","text":"<ul> <li>Git</li> <li>C++ for robotics (cmake)</li> <li>ROS2 basics</li> <li>Docker basics</li> <li>Robot simulation (basic)</li> <li>more linux</li> <li>bash</li> <li>OS</li> </ul>"},{"location":"Other/Presentation/learn_path/#beginner","title":"Beginner","text":"<ul> <li>ROS2 advanced</li> <li>Unit testing</li> <li>GStreamer</li> <li>Mavlink</li> <li>Ardupilot</li> <li>Networking</li> </ul>"},{"location":"Other/Presentation/learn_path/#more","title":"More","text":"<ul> <li>Robot Perception</li> <li>Math for robotics</li> <li>Deployment</li> <li>More programming skills</li> <li>Adv python</li> <li>Adv C++</li> <li>UI</li> </ul>"},{"location":"Other/Presentation/learn_path/#advanced","title":"Advanced","text":"<ul> <li>Embedded</li> <li>AI</li> <li>Filters / Kalman filter</li> <li>SLAM</li> <li>Advanced perception</li> </ul>"},{"location":"Other/Presentation/learn_path/#done","title":"Done","text":""},{"location":"Other/Presentation/presentation_source/ros2_dev_2_deploy/","title":"ROS2 from dev to deploy","text":""},{"location":"Other/Presentation/presentation_source/ros2_dev_2_deploy/#on-nvidia-jetson","title":"on nvidia jetson","text":""},{"location":"Other/Presentation/presentation_source/ros2_dev_2_deploy/#agenda","title":"Agenda","text":"<ul> <li>Dev</li> <li>Build and test</li> <li>Deploy</li> <li>Source control (??)</li> <li>Version control</li> </ul>"},{"location":"Other/Presentation/presentation_source/ros2_dev_2_deploy/#today","title":"Today","text":"<ul> <li>Dev on linux machine as python project (no ROS)</li> <li>Deploy: copy python files to remote system </li> <li>Deploy as ZIP</li> <li>Deploy: Burn pre cocked jetson image</li> </ul>"},{"location":"Other/Presentation/presentation_source/ros2_dev_2_deploy/#docker-as-a-way-of-life","title":"Docker as a way of life","text":"<ul> <li>Dev: using vscode devcontainer</li> <li>Build: using docker to build for different architecture</li> <li>Test: using docker as test environment (allow clean system)</li> <li>Deploy: Deploy the application as cocked docker image </li> </ul>"},{"location":"Other/Presentation/presentation_source/ros2_dev_2_deploy/#dev","title":"Dev","text":"<ul> <li>Using VSCode devcontainer</li> <li>support remote development (run on jetson)</li> <li>Docker hierarchy</li> <li>OS with Chosen ROS version + simulator + common dev tools</li> <li>Project runtime dependencies (runtime/test)</li> <li>Project dev dependencies (dev)</li> <li>Project cycle (forget package and python pip) </li> </ul>"},{"location":"Other/Presentation/presentation_source/ros2_dev_2_deploy/#build","title":"Build","text":"<ul> <li>Cross Compiler</li> <li>Using docker as cross compiler environment</li> <li>using dev docker that build for the jetson arm architecture</li> </ul>"},{"location":"Other/Presentation/presentation_source/ros2_dev_2_deploy/#test","title":"Test","text":"<ul> <li>Using docker as consistent and repetitive environment for testing</li> <li>Use it to test package install tests</li> </ul>"},{"location":"Other/Presentation/presentation_source/ros2_dev_2_deploy/#deploy-find-your-way","title":"Deploy - Find your way","text":"<ul> <li>deb packages</li> <li>docker image</li> <li>jetson image </li> </ul>"},{"location":"Other/Presentation/presentation_source/ros2_dev_2_deploy/#deploy-debian-package","title":"Deploy - debian package","text":"<ul> <li>Standard</li> <li>The linux/debian way </li> <li>every package are installable has version and metadata</li> <li>easy to deploy from remote</li> </ul>"},{"location":"Other/Presentation/presentation_source/ros2_dev_2_deploy/#deploy-jetson-image","title":"Deploy - jetson image","text":"<ul> <li>pre install jetson image with all project dependencies and code</li> <li>Code install as debian package</li> <li>easy to copy</li> <li></li> </ul>"},{"location":"Other/Presentation/presentation_source/ros2_dev_2_deploy/#deploy-with-docker","title":"Deploy - with docker","text":"<ul> <li>Build application docker with all dependencies</li> <li>Easy deploy</li> </ul>"},{"location":"Other/Presentation/presentation_source/ros2_dev_2_deploy/#deploy-with-docker-when","title":"Deploy - with docker - when","text":"<ul> <li>legacy</li> <li>test's</li> <li>mixing system</li> <li>when is no other way</li> </ul>"},{"location":"Other/Presentation/presentation_source/ros2_dev_2_deploy/#deploy-with-docker-why-not","title":"Deploy - with docker - why not","text":"<ul> <li>Hardware issue</li> <li>Hard to deploy from remote</li> </ul>"},{"location":"Other/Presentation/presentation_source/ros2_dev_2_deploy/#version","title":"Version","text":"<ul> <li>Every thing has a version</li> <li>package</li> <li>OS image</li> <li>docker image</li> <li>Every project / application has version page</li> </ul>"},{"location":"Other/Presentation/presentation_source/ros2_dev_2_deploy/#control-after-release","title":"Control after release","text":"<ul> <li>Dev days: yes, we know ourself</li> <li>From release and on:</li> <li>Source control</li> <li>Ticket and issue</li> <li>Code review and test</li> </ul>"},{"location":"Other/Presentation/presentation_source/ros2_dev_2_deploy/#all-fit-together","title":"All fit together","text":"<ul> <li>Build Debian packages</li> <li>Install Packages on the docker image</li> <li>Backup jetson image with docker include </li> </ul>"},{"location":"Other/Presentation/presentation_source/ros2_dev_2_deploy/#final-thought","title":"Final thought","text":"<p> Docker for dev using devcontainer  Docker for build  Docker for test  Docker for production</p>"},{"location":"Other/Presentation/ros4manager/ros4manager/","title":"ROS2","text":"<p>What, Why and basic verbs and concept</p> <p></p>"},{"location":"Other/Presentation/ros4manager/ros4manager/#what","title":"What","text":"<ul> <li>Open source software development kit for robotics applications.</li> <li>Standard</li> <li>From research and prototyping through to deployment and production</li> </ul>"},{"location":"Other/Presentation/ros4manager/ros4manager/#why","title":"Why","text":"<ul> <li>For me it a STANDARD</li> </ul>"},{"location":"Other/Presentation/ros4manager/ros4manager/#verbs","title":"Verbs","text":"<ul> <li>DDS</li> <li>Node</li> <li>Pub / Sub</li> <li>Service</li> <li>Parameters</li> </ul>"},{"location":"Other/Presentation/ros4manager/ros4manager/#tools","title":"Tools","text":"<ul> <li>Rqt</li> <li>Rviz</li> <li>Gazebo</li> </ul>"},{"location":"Other/Presentation/ros4manager/ros4manager/#what-to-remember","title":"What to remember","text":"<ul> <li>ROS2 is a standard</li> <li>Don't invite the wheel (reuse other works)</li> <li>ROS2 is a way of thinking to solve robotics problems</li> <li>ROS2 is a SDK</li> </ul>"},{"location":"Other/Presentation/ros4manager/ros4manager/#learn-from-others","title":"Learn from others","text":"<ul> <li>Autonomous, GPS-Denied Quadrotor Flight</li> </ul>"},{"location":"Other/Presentation/ros4manager/ros4manager/#darpa","title":"DARPA","text":"<p>link</p>"},{"location":"Other/Presentation/ros4manager/ros4manager/#vrx","title":"VRX","text":""},{"location":"Other/Presentation/ros4manager/ros4manager/#eye-on-the-prize-glance-to-the-future","title":"Eye on the prize. glance to the future","text":"<ul> <li>ROS Version</li> <li>Simulation</li> <li>Gazebo version</li> <li>Flight controller</li> <li>PX4 /ArduPilot</li> </ul> <p>2024 ROS Metrics Report</p>"},{"location":"Other/Presentation/ros4manager/ros4manager/#node-message-and-topic","title":"Node message and topic","text":"<p>Node: A node is an executable that uses ROS to communicate with other nodes. Message: ROS data type Topics: ROS2 topic is a way of communication between ROS2 nodes</p>"},{"location":"Other/Presentation/ros4manager/ros4manager/#pub-sub","title":"Pub / Sub","text":""},{"location":"Other/Presentation/ros4manager/ros4manager/#service","title":"Service","text":""},{"location":"Other/Presentation/ros4manager/ros4manager/#action","title":"Action","text":""},{"location":"Other/Presentation/ros4manager/ros4manager/#rqt","title":"Rqt","text":"<p>RQT is a Qt-based framework for GUI development for ROS</p> <p></p>"},{"location":"Other/Presentation/ros4manager/ros4manager/#rviz","title":"Rviz","text":"<ul> <li>Rviz is a 3D visualization tool for ROS</li> <li>It allows you to visualize sensor data and other information from your robot in real-time</li> </ul>"},{"location":"Other/Presentation/ros4manager/ros4manager/#gazebo","title":"Gazebo","text":""},{"location":"Other/Presentation/ros4manager/ros4manager/#without-words","title":"Without words","text":"<p>video link</p>"},{"location":"Other/Presentation/ros4manager/ros4manager/#final","title":"Final","text":"<ul> <li>ROS is a standard </li> <li>Way of thinking</li> <li>SDK for develop robotics application</li> </ul>"},{"location":"Other/buy_list/","title":"new laptop","text":"<ul> <li>ASUS Zenbook 14X OLED (UX3404)</li> <li>nvidia 3050</li> </ul> spec Asus ux3404 cpu i9-13900H memory 32GB gpu RTX 3050 <p>Asus Zenbook 14X OLED UX3404VC-M9025W vc - nvidia gpu M9025W - </p>","tags":["buy list"]},{"location":"Other/buy_list/#alternative","title":"Alternative","text":"<ul> <li>Lenovo Yoga Pro 7-14IMH9 83E2003JIV</li> </ul>","tags":["buy list"]},{"location":"Other/courses_and_books/","title":"Courses","text":"<ul> <li>YT Event base robot vision 2020</li> </ul>","tags":["course","book"]},{"location":"Other/courses_and_books/#books","title":"Books","text":"<ul> <li>TinyML</li> </ul>","tags":["course","book"]},{"location":"Other/markdown/","title":"Markdown Cheatsheet and VSCode Extensions","text":"<p>Github Docs - Basic writing and formatting syntax</p>","tags":["markdown","cheatsheet","vscode"]},{"location":"Other/markdown/#markdown","title":"Markdown","text":"Tag Markdown <code>**bold**</code> bold <code>*italic*</code> italic <code>~~strikethrough~~</code> ~~strikethrough~~ <p>| <code>$\\LaTeX$</code>  | \\(\\LaTeX\\)  | | <code>---</code>  | ---  |</p>","tags":["markdown","cheatsheet","vscode"]},{"location":"Other/markdown/#links","title":"Links","text":"new tab <code>[link](https://uri){:target=\"_blank\"}</code>","tags":["markdown","cheatsheet","vscode"]},{"location":"Other/markdown/#images","title":"images","text":"width control <code>![](images/markdown.png){ width=10% }</code> width control <code>![](images/markdown.png){ width=20% }</code>","tags":["markdown","cheatsheet","vscode"]},{"location":"Other/markdown/#headings","title":"headings","text":"","tags":["markdown","cheatsheet","vscode"]},{"location":"Other/markdown/#heading-1","title":"Heading 1","text":"<p><code># Heading 1</code></p>","tags":["markdown","cheatsheet","vscode"]},{"location":"Other/markdown/#heading-2","title":"Heading 2","text":"<p><code>## Heading 2</code></p>","tags":["markdown","cheatsheet","vscode"]},{"location":"Other/markdown/#heading-3","title":"Heading 3","text":"<p><code>### Heading 3</code></p>","tags":["markdown","cheatsheet","vscode"]},{"location":"Other/markdown/#emoji","title":"emoji","text":"<p>Complete list</p> <p>:sunglasses: <code>:sunglasses:</code> :heart: <code>:heart:</code></p>","tags":["markdown","cheatsheet","vscode"]},{"location":"Programming/","title":"Programing","text":"<p>Python</p> <p>C/CPP</p> <p>Web</p> <p>AI</p> <p>Vision</p> <p>QML</p>"},{"location":"Programming/ai/","title":"AI ML and what inside","text":"<p>Math</p> <p>Math</p>"},{"location":"Programming/ai/#resources","title":"Resources","text":"<ul> <li>Deep Learning with PyTorch Step-by-Step Official repository of my book: \"Deep Learning with PyTorch Step-by-Step: A Beginner's Guide\" </li> </ul>"},{"location":"Programming/ai/math/","title":"AI Math","text":"<ul> <li>Linear Algebra for Machine Learning</li> </ul>"},{"location":"Programming/ai/onnx/","title":"ONNX","text":"<p>ONNX (Open Neural Network Exchange) is an open-source format for representing machine learning models, designed to enable interoperability between different deep learning frameworks</p>","tags":["onnx","ai"]},{"location":"Programming/ai/onnx/#references","title":"References","text":"<ul> <li>onnx tutorial</li> <li>ONNX Explained with Example | Quick ML Tutorial</li> </ul>","tags":["onnx","ai"]},{"location":"Programming/cpp/","title":"CPP","text":"<p>VSCode dev env.</p> <p>CMake</p> <p>TBD</p>","tags":["cpp","vscode"]},{"location":"Programming/cpp/#posts","title":"Posts","text":"<ul> <li>Cpp threading</li> </ul>","tags":["cpp","vscode"]},{"location":"Programming/cpp/cpp_threading/","title":"CPP Threading","text":"","tags":["cpp","threading"]},{"location":"Programming/cpp/cpp_threading/#hello-demo","title":"Hello Demo","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;thread&gt;\n\nvoid threadFunction(int threadNumber) {\n    std::cout &lt;&lt; \"Thread \" &lt;&lt; threadNumber &lt;&lt; \" is running\\n\";\n}\n\nint main() {\n    // thread requires a callable object\n    std::thread t1(threadFunction, 1);\n    std::thread t2(threadFunction, 2);\n\n    // Joining the threads with the main thread\n    t1.join();\n    t2.join();\n\n    std::cout &lt;&lt; \"Both threads have completed their execution\\n\";\n\n    return 0;\n}\n</code></pre>","tags":["cpp","threading"]},{"location":"Programming/cpp/cpp_threading/#mutex-race-conditiion-and-critical-section","title":"Mutex, Race Conditiion and Critical Section","text":"<p>A std::mutex is an object that prevents multiple threads from accessing a shared resource simultaneously. It ensures that only one thread can lock it at a time, avoiding race conditions.</p> <pre><code>#include&lt;mutex&gt;\n#include&lt;thread&gt;\n#include &lt;iostream&gt;&gt;\n\nusing namespace std;\n\nint amount=0;\n\nstd::mutex m;\n\nvoid addAmount(){\n    m.lock();\n    amount++;//Critical Section\n    m.unlock();\n}\n\nint main(){\n    std::thread t1(addAmount);\n    std::thread t2(addAmount);\n    t1.join();\n    t2.join();\n    cout &lt;&lt; amount &lt;&lt; endl;\n    return 0;\n}\n</code></pre> <ul> <li>std::lock_guard: Automatically locks the mutex when it\u2019s created and unlocks it when destroyed.</li> <li>std::unique_lock: More flexible than lock_guard. Can lock and unlock mutexes multiple times.</li> </ul>","tags":["cpp","threading"]},{"location":"Programming/cpp/cpp_threading/#lock_guard","title":"lock_guard","text":"<p>Instead of manually calling lock() and unlock(), use std::lock_guard, which automatically releases the lock when it goes out of scope.</p> <ul> <li>Prevents forgetting unlock()</li> <li>Handles exceptions safely</li> </ul> <pre><code>void addAmount(){\n    std::lock_guard&lt;std::mutex&gt; guard(mtx);\n    amount++;//Critical Section\n} // Automatically unlocks when `guard` goes out of scope\n</code></pre>","tags":["cpp","threading"]},{"location":"Programming/cpp/cpp_threading/#thread-synchronization","title":"Thread Synchronization","text":"<p>logging</p> <p>Using spdlog for logging</p> install<pre><code>sudo apt update &amp;&amp; sudo apt install libspdlog-dev\n</code></pre> usage<pre><code>#include &lt;spdlog/spdlog.h&gt;\n\nint main()\n{\n    spdlog::info(\"Hello, this is an info message!\");\n    spdlog::warn(\"Warning! Something might be wrong.\");\n    spdlog::error(\"An error occurred!\");\n\n    return 0;\n}\n</code></pre> <pre><code>find_package(spdlog REQUIRED)\n...\ntarget_link_libraries(&lt;target&gt; PRIVATE spdlog::spdlog)\n</code></pre> <p>std::condition_variable is used for thread synchronization. It allows one or more threads to wait until a condition is met and another thread notifies them.</p> <ul> <li>std::unique_lock lock(mtx); \u2192 Locks the mutex so no other thread can modify ready. <li>cv.wait(lock, [] { return ready; }); \u2192<ul> <li>Puts the thread to sleep if ready == false.</li> <li>Releases the mutex while waiting (so other threads can change ready).</li> <li>If another thread calls cv.notify_one() or cv.notify_all(), the waiting thread wakes up.</li> <li>Before resuming execution, it relocks the mutex.</li> </ul> </li> <li>The consumer thread continues execution only when ready == true.</li> syc producer/consumer<pre><code>#include &lt;iostream&gt;\n#include &lt;thread&gt;\n#include &lt;mutex&gt;\n#include &lt;condition_variable&gt;\n#include &lt;chrono&gt;\n#include &lt;spdlog/spdlog.h&gt;\n#include &lt;spdlog/sinks/stdout_color_sinks.h&gt;\n\nstd::mutex mtx;\nstd::condition_variable cv;\nbool ready = false;  // Shared flag\n\nvoid producer()\n{\n    std::unique_lock&lt;std::mutex&gt; lock(mtx);\n    spdlog::info(\"Producer: wait 3 sec before notify...\");\n    std::this_thread::sleep_for(std::chrono::seconds(3));\n\n    ready = true; // Update the shared flag\n    spdlog::info(\"Producer: notify consumer\");\n\n    cv.notify_one(); // Notify consumer\n}\n\nvoid consumer()\n{\n    std::unique_lock&lt;std::mutex&gt; lock(mtx);\n    spdlog::info(\"Consumer: waiting for notification...\");\n\n    // Wait until `ready` is true\n    cv.wait(lock, [] { return ready; });\n\n    spdlog::info(\"Consumer: received notification!\");\n}\n\nint main()\n{\n    std::thread prod1(producer);\n    std::thread cons1(consumer);\n    cons1.join();\n    prod1.join();\n\n\n    return 0;\n}\n</code></pre>","tags":["cpp","threading"]},{"location":"Programming/cpp/cpp_threading/#thread-synchronization-with-timeout","title":"Thread Synchronization with timeout","text":"synchronization with timeout<pre><code>#include &lt;iostream&gt;\n#include &lt;thread&gt;\n#include &lt;condition_variable&gt;\n#include &lt;chrono&gt;\n#include &lt;spdlog/spdlog.h&gt;\n\nstd::condition_variable cv;\nstd::mutex mtx;\nbool ready = false;\n\n\nvoid producer(int period) {\n    std::this_thread::sleep_for(std::chrono::seconds(period));  // Simulate work\n    std::unique_lock&lt;std::mutex&gt; lock(mtx);\n    spdlog::info(\"Producer: notify consumer\");\n    ready = true;\n    cv.notify_one();\n}\n\nvoid consumer(int period) {\n    std::unique_lock&lt;std::mutex&gt; lock(mtx);\n    spdlog::info(\"Consumer: waiting for notification...\");\n\n    if (cv.wait_for(lock, std::chrono::seconds(period), [] { return ready; })) {\n        spdlog::info(\"Received notification!\");\n    } else {\n        spdlog::error(\"Timeout occurred!\");\n    }\n}\n\nint main() {\n    std::thread t1(producer, 3);\n    std::thread t2(consumer, 5);\n\n    t1.join();\n    t2.join();\n    return 0;\n}\n</code></pre> <pre><code># notify:3 timeout: 5\n[2025-02-10 21:26:02.795] [info] Consumer: waiting for notification...\n[2025-02-10 21:26:05.795] [info] Producer: notify consumer\n[2025-02-10 21:26:05.795] [info] Received notification!\n\n# notify:5 timeout: 3\n[2025-02-10 21:28:57.871] [info] Consumer: waiting for notification...\n[2025-02-10 21:29:00.871] [error] Timeout occurred!\n[2025-02-10 21:29:02.871] [info] Producer: notify consumer\n</code></pre>","tags":["cpp","threading"]},{"location":"Programming/cpp/cmake/","title":"CMake","text":"","tags":["cmake","cpp"]},{"location":"Programming/cpp/dev_env/","title":"VSCode CPP dev environment","text":"","tags":["cpp","vscode","settings","dev environment"]},{"location":"Programming/python/","title":"Python","text":"<p>VSCode dev env.</p> <p>python_project</p> <p>python</p>","tags":["python"]},{"location":"Programming/python/#packages","title":"Packages","text":"<ul> <li>zmq</li> </ul>","tags":["python"]},{"location":"Programming/python/dev_env/","title":"VSCode python dev env.","text":"<p>Using vscode and <code>uv</code> to setup a python development environment.</p>","tags":["python","vscode","dev_env"]},{"location":"Programming/python/dev_env/#create-project-using-uv","title":"create project using uv","text":"<pre><code>uv init\n# create venv install pytest and update pyproject.toml\n</code></pre>","tags":["python","vscode","dev_env"]},{"location":"Programming/python/dev_env/#pytest","title":"pytest","text":"<pre><code>uv add --dev pytest\n</code></pre>","tags":["python","vscode","dev_env"]},{"location":"Programming/python/dev_env/#pyprojecttoml","title":"pyproject.toml","text":"<p>Add pytest settings</p> <pre><code>[tool.pytest.ini_options]\npythonpath = [\n  \".\"\n]\n</code></pre>","tags":["python","vscode","dev_env"]},{"location":"Programming/python/dev_env/#vscode","title":"VSCode","text":"","tags":["python","vscode","dev_env"]},{"location":"Programming/python/dev_env/#extensions","title":"Extensions","text":"<ul> <li>ruff</li> </ul>","tags":["python","vscode","dev_env"]},{"location":"Programming/python/dev_env/#settings","title":"Settings","text":"","tags":["python","vscode","dev_env"]},{"location":"Programming/python/dev_env/#vscode-python-autocomplete","title":"VSCode python autocomplete","text":"<pre><code>\"python.analysis.extraPaths\": [\n    \"${workspaceFolder}/src\"\n]\n</code></pre>","tags":["python","vscode","dev_env"]},{"location":"Programming/python/dev_env/#ruff","title":"ruff","text":"<pre><code>\"ruff.importStrategy\": \"useBundled\",\n\"editor.defaultFormatter\": \"charliermarsh.ruff\",\n\"editor.formatOnPaste\": true,\n\"editor.formatOnSave\": true,\n\"editor.formatOnSaveMode\": \"file\",\n\"editor.codeActionsOnSave\": {\n    \"source.organizeImports\": \"always\",\n    \"source.fixAll\": \"always\"\n},\n</code></pre>","tags":["python","vscode","dev_env"]},{"location":"Programming/python/dev_env/#ruff-settings","title":"ruff settings","text":"ruff.toml<pre><code>line-length = 88\nindent-width = 4\n\n[format]\nquote-style = \"double\"\nindent-style = \"space\"\nskip-magic-trailing-comma = false\nline-ending = \"auto\"\ndocstring-code-format = true\ndocstring-code-line-length = \"dynamic\"\n</code></pre>","tags":["python","vscode","dev_env"]},{"location":"Programming/python/python/","title":"Index","text":"","tags":["python"]},{"location":"Programming/python/python/#good-posts-and-videos","title":"Good Posts and videos","text":"<ul> <li>Understanding Python Decorators in 12 Easy Steps!</li> <li>Transforming Code into Beautiful, Idiomatic Python</li> </ul>","tags":["python"]},{"location":"Programming/python/python_project/","title":"under construction","text":"","tags":["python","debian","project"]},{"location":"Programming/python/python_project/#from-python-project-to-debian-package","title":"From python project to debian package","text":"<p>Create Minimal python project and create debian package from it</p> <pre><code>\u251c\u2500\u2500 debian\n\u2502   \u251c\u2500\u2500 changelog\n\u2502   \u251c\u2500\u2500 compat\n\u2502   \u251c\u2500\u2500 control\n\u2502   \u251c\u2500\u2500 postinst\n\u2502   \u251c\u2500\u2500 postrm\n\u2502   \u2514\u2500\u2500 rules\n\u251c\u2500\u2500 my_python_app\n\u2502   \u251c\u2500\u2500 app.py\n\u2502   \u2514\u2500\u2500 __init__.py\n\u251c\u2500\u2500 setup.py\n\u2514\u2500\u2500 venv\n</code></pre>","tags":["python","debian","project"]},{"location":"Programming/python/python_project/#first-step-python-project","title":"First step: Python project","text":"<p>Create python project struct - venv - setup.py - project module - register the project in the venv</p> <pre><code>from setuptools import setup, find_packages\n\nsetup(\n    name=\"my-python-app\",\n    version=\"0.1\",\n    packages=find_packages(),\n    entry_points={\n        \"console_scripts\": [\n            \"myapp=my_python_app.app:main\"\n        ]\n    },\n    install_requires=[],  # Add dependencies here if any\n    author=\"Your Name\",\n    description=\"A simple Python app\",\n)\n</code></pre> my_python_app/app.py<pre><code>def main():\n    print(\"Hello, this is my Python app!\")\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code># source into venv\npip install -e .\n</code></pre> <pre><code>#execute `myapp` (application entry point)\nmyapp\n</code></pre>","tags":["python","debian","project"]},{"location":"Programming/python/python_project/#step2-debian","title":"Step2: Debian","text":"<pre><code>sudo apt install build-essential devscripts debhelper dh-python\n</code></pre> <p>Create <code>debian</code> folder with this files - debian/control - debian/rules - debian/changelog - debian/postinst (optional) - debian/postrm (optional)</p>","tags":["python","debian","project"]},{"location":"Programming/python/python_project/#control","title":"control","text":"<pre><code>Source: my-python-app\nSection: utils\nPriority: optional\nMaintainer: Your Name &lt;your.email@example.com&gt;\nBuild-Depends: debhelper (&gt;= 9), dh-python, python3-all\nStandards-Version: 4.5.0\nHomepage: &lt;optional URL&gt;\n\nPackage: my-python-app\nArchitecture: all\nDepends: python3 (&gt;= 3.5), ${misc:Depends}, ${python3:Depends}\nDescription: A simple Python application\n This is a test package for my Python app.\n</code></pre>","tags":["python","debian","project"]},{"location":"Programming/python/python_project/#rules","title":"rules","text":"<p>executable permission</p> <pre><code>#!/usr/bin/make -f\n%:\n     dh $@ --with python3 --buildsystem=pybuild\n</code></pre> <p>check for tabs</p> <pre><code>cat -t debian/rules\n#\n^I as tab and not spaces\n</code></pre>","tags":["python","debian","project"]},{"location":"Programming/python/python_project/#changelog","title":"changelog","text":"<pre><code>dch --create --package my-python-app -v 0.1-1 \"Initial release\"\n</code></pre>","tags":["python","debian","project"]},{"location":"Programming/python/python_project/#format","title":"Format","text":"template<pre><code>&lt;package-name&gt; (&lt;version&gt;) &lt;distribution&gt;; urgency=&lt;urgency&gt;\n\n  * &lt;change description&gt;\n  * &lt;another change&gt;\n\n -- &lt;maintainer-name&gt; &lt;email&gt;  &lt;timestamp&gt;\n</code></pre> example<pre><code>my-python-app (1.0-1) unstable; urgency=medium\n\n  * Initial release.\n  * Added feature X for better performance.\n  * Fixed bug in module Y.\n\n -- John Doe &lt;john@example.com&gt;  Mon, 17 Mar 2025 12:34:56 +0000\n</code></pre> <p>my-python-app (1.0-1) unstable; urgency=medium - package name: my-python-app - version: (1.0-1)     - 1.0: upstream (code version)     - -1: Debian version (change in the rules and control files) - distribution:      - unstable \u2192 Default for new packages.     - stable \u2192 For official stable releases.     - testing \u2192 For testing before stable.     - experimental \u2192 For experimental features. - urgency:     - low \u2192 No hurry.     - medium \u2192 Normal (default).     - high \u2192 Important security fixes.     - emergency \u2192 Critical fixes, immediate attention.</p>","tags":["python","debian","project"]},{"location":"Programming/python/python_project/#compat","title":"compat","text":"<pre><code>13\n</code></pre>","tags":["python","debian","project"]},{"location":"Programming/python/python_project/#postinst","title":"postinst","text":"<pre><code>#!/bin/sh\nset -e  # Exit on any error\n\n# Example: Create a config directory for your Python app\nif [ \"$1\" = \"configure\" ]; then\n    mkdir -p /etc/my-python-app\n    echo \"Configuration directory created.\"\nfi\n\nexit 0\n</code></pre>","tags":["python","debian","project"]},{"location":"Programming/python/python_project/#postrm","title":"postrm","text":"<pre><code>#!/bin/sh\nset -e  # Exit on any error\n\n# Example: Remove the config directory on purge\nif [ \"$1\" = \"purge\" ]; then\n    if [ -d /etc/my-python-app ]; then\n        rm -rf /etc/my-python-app\n        echo \"Configuration directory removed.\"\n    fi\nfi\n\nexit 0\n</code></pre>","tags":["python","debian","project"]},{"location":"Programming/python/python_project/#step3-build-the-package","title":"Step3: build the package","text":"<pre><code>debuild -us -uc -b\n</code></pre> <p>deb files</p> <p>The deb file create in the parent folder</p>","tags":["python","debian","project"]},{"location":"Programming/python/python_project/#step4-add-user-input-during-installation","title":"Step4: Add user input during installation","text":"<pre><code>sudo apt install debconf debconf-utils\n</code></pre>","tags":["python","debian","project"]},{"location":"Programming/python/python_project/#todo","title":"TODO","text":"","tags":["python","debian","project"]},{"location":"Programming/python/python_project/#debianchangelog","title":"debian/changelog?","text":"<p>The debian/changelog file is a required part of a Debian package. It\u2019s a human-readable log of changes made to the package across its versions. It follows a specific format and is used by tools like dpkg and apt to display package history and determine version ordering. It\u2019s also critical for maintaining a package in a Debian repository. Format of debian/changelog</p> <pre><code>my-python-app (0.1-1) unstable; urgency=medium #(1)\n\n  * Initial release of my Python app. #(2)\n\n -- Your Name &lt;your.email@example.com&gt;  Mon, 17 Mar 2025 12:00:00 +0000 #(3)\n</code></pre> <ol> <li> <p>First Line:         my-python-app: Package name.         (0.1-1): Version (explained below).         unstable: Target distribution (e.g., unstable, stable, or a codename like bookworm).         urgency=medium: Priority of the update (e.g., low, medium, high, critical).</p> </li> <li> <p>Change List:         Bullet points (*) describing what changed in this version.</p> </li> <li>Signature Line:         Author\u2019s name, email, and timestamp.</li> </ol>","tags":["python","debian","project"]},{"location":"Programming/python/python_project/#what-is-dch","title":"What is dch?","text":"<p>dch (Debian CHangelog) is a command-line tool from the devscripts package that simplifies editing debian/changelog. It helps you:</p> <ul> <li>Create a new changelog file.</li> <li>Add new version entries.</li> <li>Update timestamps and metadata.</li> </ul> <pre><code>sudo apt install devscripts\n</code></pre>","tags":["python","debian","project"]},{"location":"Programming/python/python_project/#create-a-new-changelog","title":"Create a New Changelog:","text":"<pre><code>dch --create --package my-python-app -v 0.1-1 \"Initial release\"\n</code></pre> <pre><code>dch -v 0.2-1 \"Added new feature X\"\n</code></pre> <p>Edit Manually: <pre><code>dch -e\n#    Opens the changelog in your default editor (e.g., nano or VS Code if configured).\n</code></pre></p>","tags":["python","debian","project"]},{"location":"Programming/python/python_project/#versioning-what-does-number-mean","title":"Versioning: What Does -[number] Mean?","text":"<p>The version in debian/changelog (e.g., 0.1-1) follows Debian\u2019s versioning scheme: [upstream_version]-[debian_revision].</p> <ul> <li>Upstream Version (0.1):     This is the version of your software (e.g., from setup.py in your Python project).     You increment this when you make changes to the actual code (e.g., 0.1 to 0.2 for a new feature).</li> <li>Debian Revision (-1):     This is the packaging version, incremented when you change the Debian packaging (e.g., fix a bug in debian/rules or postinst) without changing the upstream code.     Example: If you release 0.1-1 and later fix a packaging issue, the next version would be 0.1-2.</li> </ul> <p>Rules for the - and Number</p> <pre><code>Initial Release: Start with -1 (e.g., 0.1-1).\nPackaging Changes Only: Keep the upstream version the same and increment the revision (e.g., 0.1-1 \u2192 0.1-2).\nNew Upstream Release: Increment the upstream version and reset the revision to -1 (e.g., 0.1-1 \u2192 0.2-1).\nNo - Needed: If you\u2019re not maintaining separate upstream and Debian versions (common for simple projects), you can omit the revision (e.g., 0.1), but including it (e.g., 0.1-1) is standard practice.\n</code></pre> <p>Examples</p> <pre><code>0.1-1: First Debian package of upstream version 0.1.\n0.1-2: Second packaging attempt of upstream 0.1 (e.g., fixed a typo in debian/control).\n0.2-1: New upstream version 0.2, first Debian package.\n</code></pre>","tags":["python","debian","project"]},{"location":"Programming/python/python_project/#git-and-debian-package","title":"Git and debian package","text":"<pre><code>sudo apt install git-buildpackage\n</code></pre> <pre><code>git-dch --release --auto --git-author\n</code></pre> <ul> <li>--release: Marks this as a full release.</li> <li>--auto: Generates entries from commit messages since the last tag.</li> <li>--git-author: Uses Git commit authors in the changelog.</li> </ul>","tags":["python","debian","project"]},{"location":"Programming/python/zmq/","title":"ZMQ","text":"<ul> <li>zmq_req_rep</li> <li>zmq_req_rep using ipc</li> </ul>","tags":["python","zmq"]},{"location":"Programming/python/zmq/zmq_req_rep/","title":"Client/Server Req/Rep zmq pattern with msgpack","text":"<p>Synchronous messaging pattern where one side (the Requester) sends a request, and the other side (the Replier) sends a response.</p> <ul> <li>socket zmq.REQ will block on send unless it has successfully received a reply back.</li> <li>socket zmq.REP will block on recv unless it has received a request.</li> </ul> <p>Tip</p> <p>If you want to set a timeout on the REQ socket, you can use the <code>zmq.POLLIN</code> flag with <code>zmq.Poller</code> to check if there is a message to receive. or use RCVTIMEO on the socket.</p>","tags":["python","zmq","msgpack"]},{"location":"Programming/python/zmq/zmq_req_rep/#install","title":"install","text":"install dependencies<pre><code>pip install msgpack\npip install pyzmq\n</code></pre>","tags":["python","zmq","msgpack"]},{"location":"Programming/python/zmq/zmq_req_rep/#demo-reqrep-zmq-pattern-with-msgpack","title":"Demo: Req/Rep zmq pattern with msgpack","text":"<p>ZMQ Req/Rep zmq pattern with python dataclasses and msgpack</p> code req/rep<pre><code>import multiprocessing\nimport logging\nfrom dataclasses import dataclass, asdict\nimport msgpack\nimport zmq\n\nFMT = \"%(asctime)s - %(lineno)s - %(levelname)s - %(message)s\"\nlogging.basicConfig(format=FMT, level=logging.INFO)\n\nlog = logging.getLogger(__name__)\n\nTOPIC = b\"topic\"\nSERVICE_PORT = 5555\n\n\n@dataclass\nclass Data_Request:\n    f_int: int\n    f_float: float\n    f_string: str\n\n\n@dataclass\nclass Data_Response:\n    success: bool\n\n\ndef server():\n    context = zmq.Context()\n    socket = context.socket(zmq.REP)\n    socket.bind(f\"tcp://*:{SERVICE_PORT}\")\n    topic, data = socket.recv_multipart()\n\n    msg = msgpack.unpackb(data)\n    log.info(f\"server get request: {msg}\")\n\n    response = Data_Response(success=True)\n    data = msgpack.packb(asdict(response))\n    socket.send(data)\n\n\ndef client():\n    context = zmq.Context()\n    socket = context.socket(zmq.REQ)\n    socket.connect(f\"tcp://127.0.0.1:{SERVICE_PORT}\")\n\n    # Create request msg\n    msg = Data_Request(1, 2.0, \"string\")\n    raw = asdict(msg)\n    data = msgpack.packb(raw)\n    socket.send_multipart([TOPIC, data])\n\n    # Recv response from server\n    data = socket.recv()\n    # unpack socket data\n    raw = msgpack.unpackb(data)\n    # Convert to msg\n    msg = Data_Response(**raw)\n    log.info(f\"server response: {msg.success}\")\n\n\nif __name__ == \"__main__\":\n    p_server = multiprocessing.Process(target=server)\n    p_client = multiprocessing.Process(target=client)\n    p_client.start()\n    p_server.start()\n\n    p_server.join()\n    p_client.join()\n</code></pre>","tags":["python","zmq","msgpack"]},{"location":"Programming/python/zmq/zmq_req_rep/#demo2-using-socket-rcvtimeo","title":"Demo2 : Using socket RCVTIMEO","text":"code <pre><code>import zmq\nimport time\n\ncontext = zmq.Context()\nsocket = context.socket(zmq.REQ)\nsocket.connect(\"tcp://localhost:5555\")\n\n# Set both send and receive timeouts\nsocket.setsockopt(zmq.RCVTIMEO, 5000)  # 5-second receive timeout\nsocket.setsockopt(zmq.SNDTIMEO, 5000)  # 5-second send timeout\nsocket.setsockopt(zmq.LINGER, 0)       # Prevent blocking on close\n\ntry:\n    print(\"Sending request...\")\n    socket.send(b\"Hello\")  # Send request (this can block)\n\n    message = socket.recv()  # Wait for response (times out after 5 sec)\n    print(f\"Received reply: {message.decode()}\")\n\nexcept zmq.error.Again:\n    print(\"Timeout: No response received, exiting.\")\n\nfinally:\n    socket.close()  # Ensure socket is closed properly\n    context.term()  # Terminate the context to free resources\n\nprint(\"Program exited.\")\n</code></pre>","tags":["python","zmq","msgpack"]},{"location":"Programming/python/zmq/zmq_req_rep/#demo3-using-zmqpoller","title":"Demo3 : Using zmq.Poller","text":"code <pre><code>import zmq\n\ncontext = zmq.Context()\ntimeout_ms = 5000  # 5-second timeout\nmax_retries = 3    # Number of retries\n\nfor attempt in range(1, max_retries + 1):\n    print(f\"Attempt {attempt}: Sending request...\")\n\n    # Create a new REQ socket for each attempt\n    socket = context.socket(zmq.REQ)\n    socket.connect(\"tcp://localhost:5555\")\n    socket.setsockopt(zmq.LINGER, 0)  # Prevent blocking on close\n\n    poller = zmq.Poller()\n    poller.register(socket, zmq.POLLIN)  # Monitor socket for a response\n\n    try:\n        socket.send(b\"Hello\")  # Send request\n\n        socks = dict(poller.poll(timeout_ms))  # Wait for response with timeout\n\n        if socket in socks:  # If response is received\n            message = socket.recv()\n            print(f\"Received reply: {message.decode()}\")\n            socket.close()\n            break  # Exit loop on success\n        else:\n            print(\"Timeout: No response received.\")\n\n    except zmq.ZMQError as e:\n        print(f\"ZeroMQ Error: {e}\")\n\n    finally:\n        socket.close()  # Ensure the socket is properly closed\n\n    if attempt == max_retries:\n        print(\"Max retries reached. Exiting.\")\n\ncontext.term()  # Clean up context\nprint(\"Program exited.\")\n</code></pre>","tags":["python","zmq","msgpack"]},{"location":"Programming/python/zmq/zmq_req_rep_ipc/","title":"Client/Server Req/Rep zmq pattern with msgpack and IPC as transport","text":"ZMQ Ipc <pre><code>import multiprocessing\nimport logging\nfrom dataclasses import dataclass, asdict\nimport msgpack\nimport zmq\n\nFMT = \"%(asctime)s - %(lineno)s - %(levelname)s - %(message)s\"\nlogging.basicConfig(format=FMT, level=logging.INFO)\n\nlog = logging.getLogger(__name__)\n\nTOPIC = b\"topic\"\nIPC_PATH = \"/tmp/zmq-ipc\"\n\n\n@dataclass\nclass Data_Request:\n    f_int: int\n    f_float: float\n    f_string: str\n\n\n@dataclass\nclass Data_Response:\n    success: bool\n\n\ndef server():\n    context = zmq.Context()\n    socket = context.socket(zmq.REP)\n    socket.bind(f\"ipc://{IPC_PATH}\")\n    topic, data = socket.recv_multipart()\n\n    msg = msgpack.unpackb(data)\n    log.info(f\"server get request: {msg}\")\n\n    response = Data_Response(success=True)\n    data = msgpack.packb(asdict(response))\n    socket.send(data)\n\n\ndef client():\n    context = zmq.Context()\n    socket = context.socket(zmq.REQ)\n    socket.connect(f\"ipc://{IPC_PATH}\")\n\n    # Create request msg\n    msg = Data_Request(1, 2.0, \"string\")\n    raw = asdict(msg)\n    data = msgpack.packb(raw)\n    socket.send_multipart([TOPIC, data])\n\n    # Recv response from server\n    data = socket.recv()\n    # unpack socket data\n    raw = msgpack.unpackb(data)\n    # Convert to msg\n    msg = Data_Response(**raw)\n    log.info(f\"server response: {msg.success}\")\n\n\nif __name__ == \"__main__\":\n    p_server = multiprocessing.Process(target=server)\n    p_client = multiprocessing.Process(target=client)\n    p_client.start()\n    p_server.start()\n\n    p_server.join()\n    p_client.join()\n</code></pre> <p>shm</p> <p>I try using <code>shm</code> protocol but i got an error that the protocol not supported I read the i need to compile with the draft option, </p> <pre><code>import zmq\nprint(zmq.has(\"draft\")) \n</code></pre>","tags":["python","zmq","msgpack","ipc"]},{"location":"Programming/qml/","title":"QML","text":"","tags":["qt","qml"]},{"location":"Programming/qml/#hello-world","title":"Hello World","text":"<p>uv</p> <p>Using uv package manager</p> <pre><code>pip install uv\n</code></pre> <pre><code># create virtual env.\nuv venv\n\n# source\nsource .venv/bin/activate\n\n# install qml\nuv install PySide6\n</code></pre>","tags":["qt","qml"]},{"location":"Programming/qml/#projects","title":"Projects","text":"<pre><code>\u2514\u2500\u2500 qml_tutorial\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 main.py\n    \u2514\u2500\u2500 main.qml\n</code></pre> main.py<pre><code>import sys\nfrom PySide6.QtWidgets import QApplication\nfrom PySide6.QtQml import QQmlApplicationEngine\n\n# Create the application instance\napp = QApplication(sys.argv)\n\n# Load the QML file\nengine = QQmlApplicationEngine()\nengine.load(\"main.qml\")\n\n# Exit if QML fails to load\nif not engine.rootObjects():\n    sys.exit(-1)\n\n# Run the application\nsys.exit(app.exec())\n</code></pre> main.qml<pre><code>import QtQuick 6.5\nimport QtQuick.Controls 6.5\n\nApplicationWindow {\n    visible: true\n    width: 400\n    height: 300\n    title: \"Hello QML with Python\"\n\n    Rectangle {\n        anchors.fill: parent\n        color: \"lightblue\"\n\n        Text {\n            text: \"Hello, World!\"\n            anchors.centerIn: parent\n            font.pixelSize: 24\n        }\n    }\n}\n</code></pre>","tags":["qt","qml"]},{"location":"Programming/vision/","title":"Computer Vision","text":"<p>Visual Trackers</p> <p>OpenCV</p> <p>nvidia</p>","tags":["vision"]},{"location":"Programming/vision/#article-and-post-to-read","title":"Article and post to read","text":"<ul> <li>Optical Flow (Shi-Tomasi Corner Detection,Sparse(Lucas-kanade, Horn schunck) &amp; Dense(Gunnar Farneback) )-Part I</li> </ul>","tags":["vision"]},{"location":"Programming/vision/#event-base-camera","title":"Event base camera","text":"<ul> <li>Event Cameras - Everything you need to know</li> </ul>","tags":["vision"]},{"location":"Programming/vision/nvidia/","title":"Index","text":"<p>TensorRT</p> <p>OpenCV</p> <p>nvidia</p>","tags":["nvidia"]},{"location":"Programming/vision/nvidia/tensorrt/","title":"TensorRT","text":"<ul> <li>docker install: Docker image</li> </ul>","tags":["nvidia","tensorrt"]},{"location":"Programming/vision/nvidia/tensorrt/docker_install/","title":"TensorRT","text":"","tags":["embedded","nvidia","jetson","orin","tensorrt"]},{"location":"Programming/vision/nvidia/tensorrt/docker_install/#install","title":"Install","text":"<p>Tip</p> <p>To download tensorrt we must login to nvidia</p> <ul> <li>download local repo package</li> <li>install the package</li> <li>register the gpg key</li> <li>run <code>apt update</code></li> <li> <p>install <code>apt tensorrt</code></p> </li> <li> <p>Download from nvidia</p> </li> </ul> <p></p> Install TensorRT<pre><code>dpkg -i nv-tensorrt-local-repo-ubuntu2204-10.3.0-cuda-12.5_1.0-1_arm64.deb \ncp /var/nv-tensorrt-local-repo-ubuntu2204-10.3.0-cuda-12.5/nv-tensorrt-local-F9A70CFC-keyring.gpg /usr/share/keyrings/\napt update\napt install tensorrt\n# check\ndpkg -l | grep tensorrt\n</code></pre> <pre><code>import tensorrt as trt\n\nlogger = trt.Logger(trt.Logger.WARNING)\nruntime = trt.Runtime(logger)\n\nwith open(\"model.engine\", \"rb\") as f:\n    engine = runtime.deserialize_cuda_engine(f.read())\n</code></pre> <p></p>","tags":["embedded","nvidia","jetson","orin","tensorrt"]},{"location":"Programming/vision/nvidia/tensorrt/docker_install/#reference","title":"Reference","text":"<p>TensorRT In Docker</p>","tags":["embedded","nvidia","jetson","orin","tensorrt"]},{"location":"Programming/vision/opencv/","title":"Index","text":"<p>Build</p> <p>CUDA</p> <p>tbd</p>","tags":["opencv"]},{"location":"Programming/vision/opencv/opencv_build_from_source/","title":"Build opencv from source with cuda support","text":"","tags":["opencv","build","cuda"]},{"location":"Programming/vision/opencv/opencv_build_from_source/#tip-find-cuda-capability","title":"Tip: find CUDA Capability","text":"<p>using <code>deviceQuery</code> sample application</p> <pre><code>git clone --depth 1 --filter=blob:none --sparse https://github.com/NVIDIA/cuda-samples.git\ncd cuda-samples\ngit sparse-checkout set Samples/1_Utilities/deviceQuery Common\n</code></pre> <pre><code>cd cuda-samples/Samples/1_Utilities/deviceQuery/\nmkdir build\ncmake ..\nmake\n</code></pre> <pre><code>./deviceQuery\n#\n CUDA Device Query (Runtime API) version (CUDART static linking)\n\nDetected 1 CUDA Capable device(s)\n\nDevice 0: \"NVIDIA GeForce MX450\"\n  CUDA Driver Version / Runtime Version          12.6 / 11.5\n  CUDA Capability Major/Minor version number:    7.5\n  ...\n</code></pre>","tags":["opencv","build","cuda"]},{"location":"Programming/vision/opencv/build/","title":"Build opencv from source with cuda support","text":"<p>Using docker to build opencv from source with cuda support for python and cpp. pack the result as debs file to install on other machines.</p> <p>Check machine CUDA version</p> <pre><code>nvidia-smi\n</code></pre> <p>The docker base on the host CUDA version,  I use pre-built docker image from NVIDIA, <code>FROM nvidia/cuda:${CUDA}-cudnn-devel-ubuntu${UBUNTU}</code>,</p> <pre><code>ARG CUDA=\"12.6.0\"\nARG UBUNTU=\"22.04\"\n\n# docker pull nvidia/cuda:12.6.0-cudnn-devel-ubuntu22.04\nFROM nvidia/cuda:${CUDA}-cudnn-devel-ubuntu${UBUNTU}\n\nRUN apt update &amp;&amp; apt install -y --no-install-recommends \\\n    build-essential \\\n    cmake \\\n    cmake-data \\\n    gcc \\\n    g++ \\\n    ninja-build \\\n    gdb \\\n    git \\\n    wget \\\n    curl \\\n    unzip \\\n    yasm \\\n    doxygen \\\n    pkg-config \\\n    checkinstall \\\n    build-essential cmake git libgtk2.0-dev pkg-config libavcodec-dev libavformat-dev \\\n    python3-dev python3-numpy \\\n    libtbb2 libtbb-dev libjpeg-dev libpng-dev libtiff-dev \\\n    libswscale-dev libgtk-3-dev libv4l-dev v4l-utils\\\n    libopenblas-dev libopenblas-base libatlas-base-dev liblapacke-dev \\\n    protobuf-compiler python3-dev python3-venv python3-numpy python3-wheel python3-setuptools \\\n&amp;&amp; rm -rf /var/lib/apt/lists/*\n</code></pre>","tags":["opencv","build","cuda"]},{"location":"Programming/vision/opencv/build/#build-process","title":"Build process","text":"<ul> <li>Download and extract opencv and opencv_contrib</li> </ul> <pre><code>version=\"4.10.0\"\nfolder=\"opencv\"\nmkdir $folder\ncd ${folder}\ncurl -L https://github.com/opencv/opencv/archive/${version}.zip -o opencv-${version}.zip\ncurl -L https://github.com/opencv/opencv_contrib/archive/${version}.zip -o opencv_contrib-${version}.zip\nunzip opencv-${version}.zip\nunzip opencv_contrib-${version}.zip\nrm opencv-${version}.zip opencv_contrib-${version}.zip\n</code></pre> <ul> <li>Create build folder</li> <li>Run cmake</li> <li>Build</li> </ul> <pre><code>mkdir opencv-${version}/build\ncd opencv-${version}/build\n\ncmake \\\n-D WITH_CUDA=ON \\\n-D WITH_CUDNN=ON \\\n-D OPENCV_DNN_CUDA=ON \\\n-D CUDA_TOOLKIT_ROOT_DIR=/usr/local/cuda-12.6 \\\n-D CUDA_ARCH_BIN=\"5.2 5.3 6.0 6.1 6.2 7.0 7.2 7.5 8.0 8.6\" \\\n-D CUDA_ARCH_PTX=\"8.6rm -rf\" \\\n-D ENABLE_FAST_MATH=1 \\\n-D CUDA_FAST_MATH=1 \\\n-D OPENCV_GENERATE_PKGCONFIG=ON \\\n-D OPENCV_EXTRA_MODULES_PATH=../../opencv_contrib-4.10.0/modules \\\n-D WITH_GSTREAMER=OFF \\\n-D WITH_LIBV4L=ON \\\n-D BUILD_opencv_python3=ON \\\n-D BUILD_TESTS=OFF \\\n-D BUILD_PERF_TESTS=OFF \\\n-D BUILD_EXAMPLES=OFF \\\n-D CMAKE_BUILD_TYPE=RELEASE \\\n-D CMAKE_INSTALL_PREFIX=/usr/local \\\n-D WITH_QT=ON \\\n-D WITH_GTK=ON \\\n-D WITH_VTK=OFF \\\n-D WITH_FFMPEG=OFF \\\n-D WITH_1394=OFF \\\n-D CPACK_BINARY_DEB=ON \\\n-D BUILD_JAVA=OFF \\\n-D PYTHON3_PACKAGES_PATH=/usr/lib/python3/dist-packages \\\n-D CPACK_PACKAGE_VERSION=4.10.0 \\\n-D CPACK_DEBIAN_PACKAGE_VERSION=4.10.0-1 \\\n..\n\n# Build\nmake -j8\n</code></pre>","tags":["opencv","build","cuda"]},{"location":"Programming/vision/opencv/build/#pack-to-debs","title":"pack to debs","text":"pack<pre><code>make package ..\n</code></pre> <p>Downloads</p> <ul> <li>Dockerfile</li> <li>.devcontainer.json</li> <li>build.sh</li> </ul>","tags":["opencv","build","cuda"]},{"location":"Programming/vision/opencv/build/#install-and-check","title":"Install and check","text":"install<pre><code>dpkg -i *.deb\n</code></pre>","tags":["opencv","build","cuda"]},{"location":"Programming/vision/opencv/build/#check","title":"check","text":"check cuda support<pre><code>&gt;&gt;&gt; import cv2\n&gt;&gt;&gt; cv2.__version__\n'4.10.0'\n&gt;&gt;&gt; cv2.cuda.getCudaEnabledDeviceCount()\n1\n</code></pre> simple.py<pre><code>import cv2\n\n# Load an image from file\nimage = cv2.imread(\"/workspaces/opencv_builder/src/lena.png\")\n\n# Check if the image was loaded successfully\nif image is None:\n    print(\"Failed to load image\")\nelse:\n    # Display the image in a window\n    cv2.imshow(\"My Image\", image)\n\n    # Wait for any key press\n    cv2.waitKey(0)\n\n    # Close all OpenCV windows\n    cv2.destroyAllWindows()\n</code></pre> <p>Download lena img</p> simple.cpp<pre><code>// g++ simple.cpp -o simple `pkg-config --cflags --libs opencv4` -I/usr/include/opencv4/\n\n#include &lt;opencv2/opencv.hpp&gt;\n#include &lt;iostream&gt;\n\nint main()\n{\n    // Load the image\n    cv::Mat image = cv::imread(\"/workspaces/opencv_builder/src/lena.png\");\n\n    // Check if image loaded successfully\n    if (image.empty()) {\n        std::cerr &lt;&lt; \"Failed to load image\" &lt;&lt; std::endl;\n        return 1;\n    }\n\n    // Show the image in a window\n    cv::imshow(\"My Image\", image);\n\n    // Wait for a key press\n    cv::waitKey(0);\n\n    // Close all windows\n    cv::destroyAllWindows();\n\n    return 0;\n}\n</code></pre> build<pre><code>g++ simple.cpp -o simple `pkg-config --cflags --libs opencv4` -I/usr/include/opencv4/\n</code></pre> <p>include search path</p> <ul> <li><code>/usr/include/opencv4/</code> is the default include path for opencv4, if you use other version, please check the path.</li> <li><code>pkg-config --cflags --libs opencv4</code> will return the include path and lib path for opencv4, you can use it in your build command.</li> <li>using <code>pkg-config</code> the include path point <code>-I/usr/local/include/opencv4</code></li> <li>After the installation from debs the include path is <code>/usr/include/opencv4/</code></li> </ul>","tags":["opencv","build","cuda"]},{"location":"Programming/vision/opencv/cuda/","title":"Opencv CUDA","text":"","tags":["opencv","cuda"]},{"location":"Programming/vision/opencv/cuda/#build-dev-environment-using-vscode-devcontainer","title":"Build dev environment using vscode devcontainer","text":"<ul> <li>Using the post from Build OpenCV 4.10 with cuda</li> <li>We Got <code>OpenCV-unknown-aarch64-*</code> from ARM (Jetson) and <code>OpenCV-unknown-x86_64-*</code></li> </ul> <pre><code>FROM nvidia/cuda:12.6.0-cudnn-runtime-ubuntu22.04\n\nCOPY opencv_debs/* /tmp/opencv_debs/\nRUN cd /tmp/opencv_debs &amp;&amp; \\\n    apt update &amp;&amp; \\\n    ARCH=$(uname -m) &amp;&amp; \\\n    if [ \"$ARCH\" = \"aarch64\" ]; then \\\n        apt install -y ./OpenCV-unknown-aarch64-*.deb; \\\n    elif [ \"$ARCH\" = \"x86_64\" ]; then \\\n        apt install -y ./OpenCV-unknown-x86_64-*.deb; \\\n    else \\\n        echo \"Unsupported architecture: $ARCH\"; exit 1; \\\n    fi &amp;&amp; \\\n    rm -rf /tmp/opencv_debs\n</code></pre>","tags":["opencv","cuda"]},{"location":"Programming/vision/opencv/cuda/#reference","title":"Reference","text":"<ul> <li>Build OpenCV 4.10 with cuda</li> <li>OpenCV CUDA integration</li> </ul>","tags":["opencv","cuda"]},{"location":"Programming/vision/vio/","title":"MSCKF","text":"<p>Multi-State Constraint Kalman filter </p> <p>MSCKF | Multi State Constrain Kalman FIlter Owner avatar msckf_vio_python</p>","tags":["vio","vision"]},{"location":"Programming/vision/visual_trackers/","title":"Visual Trackers","text":"<p>Nano Tracker</p> <p>Siam Mask</p> <p>tbd</p>","tags":["vision","tracker","opencv"]},{"location":"Programming/vision/visual_trackers/nano_tracker/","title":"Using opencv to run nano tracker","text":"<p>Using NanoTracker v2</p> <p>SiamTrackers NanoTracker</p> <ul> <li>OpenCV 4.10</li> </ul>","tags":["opencv","nano tracker"]},{"location":"Programming/vision/visual_trackers/nano_tracker/#demo-code","title":"Demo code","text":"nano_tracker_v2.py <pre><code>\"\"\"\nDemo with model v2\n\"\"\"\nimport cv2\nimport pathlib\nimport sys\n\n\nVIDEO_FILE = \"vtest.avi\"\n\ndef preprocess_frame(image):\n    # image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n    return image\n\ndef create_tracker():\n    # Create tracker object\n    params = cv2.TrackerNano.Params()\n    # v2\n    params.backbone = \"/workspace/models/nanotrack_backbone_sim.onnx\"\n    params.neckhead = \"/workspace/models/nanotrack_head_sim.onnx\"\n\n\n    params.backend = cv2.dnn.DNN_BACKEND_DEFAULT\n    params.target  = cv2.dnn.DNN_TARGET_CPU\n\n    tracker = cv2.TrackerNano.create(params)  # CSRT tracker offers good accuracy\n    return tracker\n\ndef initialize_tracker(frame, tracker):\n    # Select ROI for tracking\n    bbox = cv2.selectROI('Tracking', frame, fromCenter=False, showCrosshair=True)\n    if bbox[2] &lt;= 0 or bbox[3] &lt;= 0:\n        sys.exit(\"ROI selection cancelled. Exiting...\")\n\n    # Initialize tracker\n    try:\n        tracker.init(frame, bbox)\n    except Exception as e:\n        print('Unable to initialize tracker with requested bounding box. Is there any object?')\n        print(e)\n        print('Try again ...')\n        sys.exit(1)\n    return bbox\n\ndef main():\n    video_path = pathlib.Path(__file__).parent.joinpath(\"..\").joinpath(\"data\").joinpath(VIDEO_FILE)\n    print(video_path.as_posix())\n    video_path = video_path.as_posix()\n\n    cap = cv2.VideoCapture(video_path)\n\n    if not cap.isOpened():\n        print(\"Error: Cannot open video file.\")\n        exit()\n\n    # Read first frame\n    ret, frame = cap.read()\n    if not ret:\n        print(\"Cannot read video file\")\n        sys.exit()\n\n    # Create tracker and initialize\n    tracker = create_tracker()\n\n    frame = preprocess_frame(frame)\n    bbox = initialize_tracker(frame, tracker)\n\n    while True:\n        ret, frame = cap.read()\n        if not ret:\n            break  # End of video\n\n        # Update tracker\n        frame = preprocess_frame(frame)\n        ok, bbox = tracker.update(frame)\n\n        # Draw bounding box\n        if ok:\n            # Tracking success\n            p1 = (int(bbox[0]), int(bbox[1]))\n            p2 = (int(bbox[0] + bbox[2]), int(bbox[1] + bbox[3]))\n            cv2.rectangle(frame, p1, p2, (255,0,0), 2, 1)\n        else:\n            # Tracking failure\n            cv2.putText(frame, \"Tracking failure detected\", (100,80), \n                       cv2.FONT_HERSHEY_SIMPLEX, 0.75,(0,0,255),2)\n        # Display the frame\n        cv2.imshow('nano', frame)\n\n        # Press 'q' to quit\n        if cv2.waitKey(25) &amp; 0xFF == ord('q'):\n            break\n\n    # Release resources\n    cap.release()\n    cv2.destroyAllWindows()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>","tags":["opencv","nano tracker"]},{"location":"Programming/vision/visual_trackers/nano_tracker/#downloads","title":"Downloads","text":"<ul> <li>video</li> <li>nanotrack_backbone_v2</li> <li>nanotrack_head_v2</li> <li>Dockerfile</li> </ul>","tags":["opencv","nano tracker"]},{"location":"Programming/vision/visual_trackers/nano_tracker/#resource","title":"Resource","text":"<ul> <li>NanoTrack_TensorRT: implement nano track using tensorrt</li> </ul>","tags":["opencv","nano tracker"]},{"location":"Programming/vision/visual_trackers/siam_mask/","title":"Siam Mask","text":"<ul> <li>SiamMask</li> <li>siammask_onnx</li> <li>SiamTracker-with-TensorRT</li> </ul>","tags":["siam mask","visual trackers","vision"]},{"location":"ROS/","title":"ROS","text":"<p>Python</p> <p>C/CPP</p> <p>ROS Eco</p> <p>Dev/Build/Deploy Env.</p> <p>ROS world</p> <p>ROS basic</p> <p>ROS and Gazebo harmonic</p> <p>ROS2 Messages</p> <p>Resources</p>"},{"location":"ROS/dev_environment/","title":"ROS2 Dev Build Test Environment","text":"<p>Development</p> <p>Build</p> <p>Prod</p> <p>vscode setting and extension</p> <p>GDB</p> <p>Docker</p>"},{"location":"ROS/dev_environment/#project-template","title":"Project Template","text":"<ul> <li>ros_gz_project_template</li> <li>jazzy harmonic bridge setup</li> </ul>"},{"location":"ROS/dev_environment/build/","title":"ROS2 Build Environment","text":"<ul> <li>Build ARM ROS2 packages using docker</li> <li>Build ROS2 humble docker for Jetson</li> </ul>","tags":["ros","build","docker"]},{"location":"ROS/dev_environment/build/#demo-from-ros-project-to-deploy","title":"Demo: From ROS project to deploy","text":"<ul> <li>Part1: Project struct</li> <li>Part2: Create Debian packages</li> <li>Part2a: Add System files to debian package</li> <li>Part2b: Using github Action to automatic build and deploy</li> <li>Part3: Setup aptly, Install and test on docker</li> <li>Part4: Cross compiler using docker </li> <li>Part5: Cross compiler</li> <li>draft: from ros package to deploy</li> </ul>","tags":["ros","build","docker"]},{"location":"ROS/dev_environment/build/aptly_ros_custom_repo/","title":"Using Docker and Aptly to check package installation","text":"","tags":["ros","aptly","deb","reosdep","bloom","docker"]},{"location":"ROS/dev_environment/build/aptly_ros_custom_repo/#aptly","title":"Aptly","text":"<p>Aptly allows you to mirror remote repositories, manage local package repositories and more. more</p> <p>Warning</p> <p>Download new version 1.6.1 download The ubuntu repo version is 1.4.0 isn't support Zstd compression that use by <code>bloom-generate</code></p> <p>Using aptly to create a custom repository for ROS packages. This is useful when you want to create a custom repository for your ROS packages.</p> <ul> <li>Create a new repository</li> <li>Add packages to the repository</li> <li>Publish the repository</li> <li>Add the repository to the sources list</li> </ul>","tags":["ros","aptly","deb","reosdep","bloom","docker"]},{"location":"ROS/dev_environment/build/aptly_ros_custom_repo/#create-a-new-repository","title":"Create a new repository","text":"<pre><code>aptly -distribution=\"jammy\" -architectures=\"amd64\" \\\nrepo \\\ncreate \\\nmy_ros_app_repo\n</code></pre>","tags":["ros","aptly","deb","reosdep","bloom","docker"]},{"location":"ROS/dev_environment/build/aptly_ros_custom_repo/#add-packages-to-the-repository","title":"Add packages to the repository","text":"<pre><code>aptly repo add my_ros_app_repo \\\nros-humble-pkg-client_0.0.0-0jammy_amd64.deb \\\nros-humble-pkg-server_0.0.0-0jammy_amd64.deb\n</code></pre>","tags":["ros","aptly","deb","reosdep","bloom","docker"]},{"location":"ROS/dev_environment/build/aptly_ros_custom_repo/#publish-the-repository","title":"Publish the repository","text":"<pre><code>aptly -architectures=\"amd64\" -skip-signing=true \\\npublish repo -architectures=\"amd64\" \\\nmy_ros_app_repo local\n</code></pre>","tags":["ros","aptly","deb","reosdep","bloom","docker"]},{"location":"ROS/dev_environment/build/aptly_ros_custom_repo/#serve-the-repository","title":"Serve the repository","text":"<pre><code>aptly serve\n# aptly serve -listen=\":8081\"\n</code></pre>","tags":["ros","aptly","deb","reosdep","bloom","docker"]},{"location":"ROS/dev_environment/build/aptly_ros_custom_repo/#docker","title":"Docker","text":"<p>Install ROS Package on a docker container The docker image base on ubuntu 22.04 with ROS humble base</p> <p>Note</p> <p>For test the installation i use docker from Allison github</p> <pre><code>docker build -t humble:dev --target dev .\n</code></pre> <pre><code>docker run -it --rm \\\n--net host \\\n--hostname ros \\\n--user user \\\nhumble:dev /bin/bash\n</code></pre>","tags":["ros","aptly","deb","reosdep","bloom","docker"]},{"location":"ROS/dev_environment/build/aptly_ros_custom_repo/#add-the-repository-to-the-sources-list","title":"Add the repository to the sources list","text":"<pre><code>deb [trusted=true] http://127.0.0.1:8081/local/ jammy main\n</code></pre>","tags":["ros","aptly","deb","reosdep","bloom","docker"]},{"location":"ROS/dev_environment/build/aptly_ros_custom_repo/#check-for-packages","title":"Check for packages","text":"<pre><code>apt update\napt search ros-humble-pkg*\nSorting... Done\nFull Text Search... Done\nros-humble-pkg-client/jammy 0.0.0-0jammy amd64\n  TODO: Package description\n\nros-humble-pkg-server/jammy 0.0.0-0jammy amd64\n  TODO: Package description\n</code></pre>","tags":["ros","aptly","deb","reosdep","bloom","docker"]},{"location":"ROS/dev_environment/build/aptly_ros_custom_repo/#install","title":"Install","text":"<pre><code>apt install ros-humble-pkg-client\n</code></pre>","tags":["ros","aptly","deb","reosdep","bloom","docker"]},{"location":"ROS/dev_environment/build/aptly_ros_custom_repo/#usage-and-check-installation","title":"Usage and check installation","text":"<pre><code>source /opt/ros/humble/setup.bash\nros2 launch pkg_client client_server.launch.py\n</code></pre>","tags":["ros","aptly","deb","reosdep","bloom","docker"]},{"location":"ROS/dev_environment/build/ros_build_docker_jetson/","title":"ROS2 humble docker for Jetson","text":"","tags":["ros","docker","jetson","build","arm"]},{"location":"ROS/dev_environment/build/ros_build_docker_jetson/#docker-image","title":"Docker image","text":"","tags":["ros","docker","jetson","build","arm"]},{"location":"ROS/dev_environment/build/ros_build_docker_jetson/#build","title":"Build","text":"Dockerfile  Base on ubuntu 22.04 without any nvidia support  <pre><code>FROM ubuntu:22.04\n\nARG VERSION=0.0.1\n\nRUN echo \"image dev version: ${VERSION}\"&gt;/etc/docker_image_dev_version\n\nENV NVIDIA_VISIBLE_DEVICES all\nENV NVIDIA_DRIVER_CAPABILITIES all\n\n\n\n# Install common programs\nRUN apt-get update &amp;&amp; apt-get install -y --no-install-recommends \\\n    curl \\\n    gnupg2 \\\n    lsb-release \\\n    sudo \\\n    software-properties-common \\\n    wget \\\n    &amp;&amp; rm -rf /var/lib/apt/lists/*\n\nARG USERNAME=user\nARG USER_UID=1000\nARG USER_GID=$USER_UID\n\n# Create a non-root user\nRUN groupadd --gid $USER_GID $USERNAME \\\n    &amp;&amp; useradd -s /bin/bash --uid $USER_UID --gid $USER_GID -m $USERNAME \\\n    # Add sudo support for the non-root user\n    &amp;&amp; apt-get update \\\n    &amp;&amp; apt-get install -y sudo \\\n    &amp;&amp; echo $USERNAME ALL=\\(root\\) NOPASSWD:ALL &gt; /etc/sudoers.d/$USERNAME\\\n    &amp;&amp; chmod 0440 /etc/sudoers.d/$USERNAME \\\n    &amp;&amp; rm -rf /var/lib/apt/lists/*\n\n# Install language\nRUN apt-get update &amp;&amp; apt-get install -y \\\n  locales \\\n  &amp;&amp; locale-gen en_US.UTF-8 \\\n  &amp;&amp; update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8 \\\n  &amp;&amp; rm -rf /var/lib/apt/lists/*\nENV LANG=en_US.UTF-8\n\n# Install timezone\nRUN ln -fs /usr/share/zoneinfo/UTC /etc/localtime \\\n  &amp;&amp; export DEBIAN_FRONTEND=noninteractive \\\n  &amp;&amp; apt-get update \\\n  &amp;&amp; apt-get install -y tzdata \\\n  &amp;&amp; dpkg-reconfigure --frontend noninteractive tzdata \\\n  &amp;&amp; rm -rf /var/lib/apt/lists/*\n\nRUN apt-get update &amp;&amp; apt-get -y upgrade \\\n    &amp;&amp; rm -rf /var/lib/apt/lists/*\n\n\n# Install ROS2\nRUN sudo add-apt-repository universe \\\n  &amp;&amp; curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg \\\n  &amp;&amp; echo \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $(. /etc/os-release &amp;&amp; echo $UBUNTU_CODENAME) main\" | sudo tee /etc/apt/sources.list.d/ros2.list &gt; /dev/null \\\n  &amp;&amp; apt-get update &amp;&amp; apt-get install -y --no-install-recommends \\\n    ros-humble-ros-base \\\n    python3-argcomplete \\\n  &amp;&amp; rm -rf /var/lib/apt/lists/*\n\n\nRUN apt-get update &amp;&amp; apt-get install -y --no-install-recommends \\\n  build-essential \\\n  bash-completion \\\n  python-is-python3 \\\n  vim \\\n  ## ros\n  ros-humble-rmw-cyclonedds-cpp \\\n  python3-colcon-common-extensions \\\n  python3-colcon-clean \\\n  python3-rosdep \\\n  python3-bloom \\\n  fakeroot \\\n  debhelper \\\n  dh-python \\\n  ## devops\n  tmux \\\n  tmuxp \\\n&amp;&amp; apt-get clean -y \\\n&amp;&amp; rm -rf /var/lib/apt/lists/*\n\n# Set up autocompletion for user\nRUN apt-get update &amp;&amp; apt-get install -y git-core bash-completion \\\n  &amp;&amp; echo \"if [ -f /opt/ros/${ROS_DISTRO}/setup.bash ]; then source /opt/ros/${ROS_DISTRO}/setup.bash; fi\" &gt;&gt; /home/$USERNAME/.bashrc \\\n  &amp;&amp; echo \"if [ -f /usr/share/colcon_argcomplete/hook/colcon-argcomplete.bash ]; then source /usr/share/colcon_argcomplete/hook/colcon-argcomplete.bash; fi\" &gt;&gt; /home/$USERNAME/.bashrc \\\n  &amp;&amp; rm -rf /var/lib/apt/lists/*\n\nENV DEBIAN_FRONTEND=\nENV AMENT_CPPCHECK_ALLOW_SLOW_VERSIONS=1\n</code></pre> build<pre><code>docker buildx build --platform linux/arm64 -t humble/arm:build -f Dockerfile .\n</code></pre>","tags":["ros","docker","jetson","build","arm"]},{"location":"ROS/dev_environment/build/ros_build_docker_jetson/#usage","title":"Usage","text":"check<pre><code>docker run -it --rm \\\n--platform linux/arm64 \\\n--net host \\\n--hostname ros \\\n--user user \\\nhumble/arm:build uname -a\n</code></pre>","tags":["ros","docker","jetson","build","arm"]},{"location":"ROS/dev_environment/build/ros_build_docker_jetson/#todo","title":"TODO","text":"<ul> <li>support cuda</li> <li>support opencv</li> <li>support tensorrt</li> <li>support pytorch / tensorflow</li> </ul>","tags":["ros","docker","jetson","build","arm"]},{"location":"ROS/dev_environment/build/ros_build_docker_jetson/#reference","title":"Reference","text":"<ul> <li>Dusty - Machine Learning Containers for Jetson and JetPack</li> <li>atinfinity</li> <li>ROS 2 on Jetson Nano using Docker</li> </ul>","tags":["ros","docker","jetson","build","arm"]},{"location":"ROS/dev_environment/build/ros_build_using_docker_cross_compile/","title":"ROS2 Build Environment","text":"","tags":["ros","build","docker","cross compiler","arm"]},{"location":"ROS/dev_environment/build/ros_build_using_docker_cross_compile/#using-docker-to-build-ros2-packages-for-arm","title":"Using docker to build ROS2 packages for ARM","text":"<p>Run ARM docker architecture on x64 machine</p>","tags":["ros","build","docker","cross compiler","arm"]},{"location":"ROS/dev_environment/build/ros_build_using_docker_cross_compile/#prerequisite","title":"Prerequisite","text":"<p>Config and install QEMU to use with docker check</p>","tags":["ros","build","docker","cross compiler","arm"]},{"location":"ROS/dev_environment/build/ros_build_using_docker_cross_compile/#build-ros-arm-docker","title":"Build ROS ARM docker","text":"<p>Use Prebuild image from docker hub as base</p> <p>osrf docker hub</p> pull<pre><code>docker pull --platform linux/arm64 arm64v8/ros:humble-ros-base-jammy\n</code></pre> build<pre><code>docker  buildx build --platform linux/arm64 -t &lt;image&gt;  .\n</code></pre> run<pre><code># test images\ndocker run --platform=linux/arm64 --rm &lt;image&gt; uname -m \n</code></pre>","tags":["ros","build","docker","cross compiler","arm"]},{"location":"ROS/dev_environment/build/demo/build_deploy_ros_project_1/","title":"ROS2 project from development to deployment, Part 1: ROS project","text":"<p>The demo project has three package - pkg_interface: message and service definition - pkg_server: Expose a service that use the message from pkg_interface - pkg_client: Call the service from pkg_server  </p> <p>Note</p> <p>The source code is available at  </p>","tags":["ros","deploy","tutorial"]},{"location":"ROS/dev_environment/build/demo/build_deploy_ros_project_1/#pkg_interface","title":"pkg_interface","text":"<pre><code>.\n\u251c\u2500\u2500 CMakeLists.txt\n\u251c\u2500\u2500 msg\n\u2502   \u2514\u2500\u2500 Demo.msg\n\u251c\u2500\u2500 package.xml\n\u2514\u2500\u2500 srv\n    \u2514\u2500\u2500 Demo.srv\n</code></pre> CMakeLists.txt CMakeLists.txt<pre><code>cmake_minimum_required(VERSION 3.8)\nproject(pkg_interface)\n\nif(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES \"Clang\")\n  add_compile_options(-Wall -Wextra -Wpedantic)\nendif()\n\n# find dependencies\nfind_package(ament_cmake REQUIRED)\nfind_package(rosidl_default_generators REQUIRED)\nfind_package(basic_interface REQUIRED)\n\nset(MESSAGES\n  \"msg/Demo.msg\"\n)\n\nset(SERVICES \n  \"srv/Demo.srv\"\n)\n\n\nrosidl_generate_interfaces(${PROJECT_NAME}\n  ${MESSAGES}\n  ${SERVICES} \n)\n\n\nament_export_dependencies(rosidl_default_runtime)\n\nament_package()\n</code></pre> package.xml package.xml<pre><code>&lt;?xml version=\"1.0\"?&gt;\n&lt;?xml-model href=\"http://download.ros.org/schema/package_format3.xsd\" schematypens=\"http://www.w3.org/2001/XMLSchema\"?&gt;\n&lt;package format=\"3\"&gt;\n  &lt;name&gt;pkg_interface&lt;/name&gt;\n  &lt;version&gt;0.0.1&lt;/version&gt;\n  &lt;description&gt;Simple interface&lt;/description&gt;\n  &lt;maintainer email=\"robo2020@gmail.com\"&gt;user&lt;/maintainer&gt;\n  &lt;license&gt;Apache-2.0&lt;/license&gt;\n\n  &lt;depend&gt;basic_interface&lt;/depend&gt;\n  &lt;buildtool_depend&gt;ament_cmake&lt;/buildtool_depend&gt;\n\n  &lt;buildtool_depend&gt;rosidl_default_generators&lt;/buildtool_depend&gt;\n  &lt;exec_depend&gt;rosidl_default_runtime&lt;/exec_depend&gt;\n  &lt;member_of_group&gt;rosidl_interface_packages&lt;/member_of_group&gt;\n\n\n  &lt;export&gt;\n    &lt;build_type&gt;ament_cmake&lt;/build_type&gt;\n  &lt;/export&gt;\n&lt;/package&gt;\n</code></pre> Demo.srv Demo.srv<pre><code>---\nstring message\nbool success\n</code></pre>","tags":["ros","deploy","tutorial"]},{"location":"ROS/dev_environment/build/demo/build_deploy_ros_project_1/#pkg_server","title":"pkg_server","text":"<pre><code>\u251c\u2500\u2500 CMakeLists.txt\n\u251c\u2500\u2500 package.xml\n\u2514\u2500\u2500 pkg_server\n    \u251c\u2500\u2500 __init__.py\n    \u2514\u2500\u2500 my_node.py\n</code></pre> node my_node.py<pre><code>#!/usr/bin/env python3\n\nimport rclpy\nfrom rclpy.node import Node\nfrom pkg_interface.srv import Demo\n\nTOPIC_NAME = 'my_service'\n\nclass MyNode(Node):\n    def __init__(self):\n        node_name=\"client\"\n        super().__init__(node_name)\n        self.get_logger().info(\"Hello server\")\n        self.server = self.create_service(Demo, TOPIC_NAME, self.callback)\n\n    def callback(self, request: Demo.Request, response: Demo.Response):\n        self.get_logger().info('Service called')\n        response.message = \"Hello from server\"\n        return response\n\n\n\ndef main(args=None):\n    rclpy.init(args=args)\n    node = MyNode()\n    rclpy.spin(node)\n    node.destroy_node()\n    rclpy.shutdown()\n\nif __name__ == '__main__':\n    main()\n</code></pre>","tags":["ros","deploy","tutorial"]},{"location":"ROS/dev_environment/build/demo/build_deploy_ros_project_1/#pkg_client","title":"pkg_client","text":"<pre><code>\u251c\u2500\u2500 CMakeLists.txt\n\u251c\u2500\u2500 launch\n\u2502   \u2514\u2500\u2500 client_server.launch.py\n\u251c\u2500\u2500 package.xml\n\u2514\u2500\u2500 pkg_client\n    \u251c\u2500\u2500 __init__.py\n    \u2514\u2500\u2500 my_node.py\n</code></pre> client node my_node.py<pre><code>#!/usr/bin/env python3\n\nimport rclpy\nfrom rclpy.node import Node\nfrom pkg_interface.srv import Demo\n\nTOPIC_NAME = 'my_service'\n\nclass MyNode(Node):\n    def __init__(self):\n        node_name=\"client\"\n        super().__init__(node_name)\n        self.get_logger().info(\"Hello client\")\n        self.client = self.create_client(Demo, TOPIC_NAME)\n        self.client.wait_for_service()\n\n        self.future = None\n        self.call_service() \n\n    def call_service(self):\n        self.req = Demo.Request()\n        self.get_logger().info('Call serice')\n        self.future = self.client.call_async(self.req)\n        self.future.add_done_callback(self.callback)\n\n    def callback(self, future):\n        try:\n            response: Demo.Response = future.result()\n            self.get_logger().info('Service call success')\n            self.get_logger().info(response.message)\n        except Exception as e:\n            self.get_logger().info('Service call failed %r' % (e,))\n\n\ndef main(args=None):\n    rclpy.init(args=args)\n    node = MyNode()\n    rclpy.spin(node)\n    node.destroy_node()\n    rclpy.shutdown()\n\nif __name__ == '__main__':\n    main()\n</code></pre>","tags":["ros","deploy","tutorial"]},{"location":"ROS/dev_environment/build/demo/build_deploy_ros_project_2/","title":"ROS2 project from development to deployment, Part 2: Build Debian packages","text":"<p>Run the command From package folder</p> <p>deb location</p> <p>The deb file locate in parent folder: <code>src</code> folder</p> <pre><code>bloom-generate rosdebian --ros-distro humble\n</code></pre> build deb<pre><code>fakeroot debian/rules binary\n</code></pre>","tags":["ros","deploy","tutorial"]},{"location":"ROS/dev_environment/build/demo/build_deploy_ros_project_2/#build-offline-without-internet","title":"Build offline without internet","text":"","tags":["ros","deploy","tutorial"]},{"location":"ROS/dev_environment/build/demo/build_deploy_ros_project_2/#files","title":"files","text":"<p>rosdep files index location at <code>/etc/ros/rosdep/sources.list.d</code> the default file <code>20-default.list</code> can be download from github <code>rosdistro/rosdep/source.list.d/20-default.list</code></p> file description base.yaml system dependencies that are not ROS specific like boost, opencv python.yaml map python package name <p>bloom try to download <code>index-v4.yaml</code>  file from github rosdistro it can be override by setting the <code>ROSDISTRO_INDEX_URL</code> environment variable, the default <code>index-v4.yaml</code> map each ros distro to yaml file that also locate in rosdistro github. </p>","tags":["ros","deploy","tutorial"]},{"location":"ROS/dev_environment/build/demo/build_deploy_ros_project_2/#build-offline-rosdep-and-bloom","title":"Build Offline rosdep and bloom","text":"<ul> <li>Download base.yaml, python.yaml, index-v4.yaml and the request distribution.yaml file in our case <code>humble</code> to local folder</li> <li>update <code>20-default.list</code> file entry to point to the download file (replace http:// with file://)</li> <li>Add project_rosdep.yaml file that map the workspace packages, it can be locate in the project folder or in other central location with other projects.</li> <li>update this location in <code>/etc/ros/rosdep/sources.list.d</code> as <code>30-custom_project.list</code></li> <li>set <code>ROSDISTRO_INDEX_URL</code> to index-v4.yaml local location</li> <li>Run <code>rosdep update --rosdistro humble</code></li> <li>Run <code>bloom-generate rosdebian --ros-distro humble</code> to build</li> </ul>","tags":["ros","deploy","tutorial"]},{"location":"ROS/dev_environment/build/demo/build_deploy_ros_project_2a/","title":"ROS2 project from development to deployment, Part 2: Add udev and other system files","text":"<p>How to add additional system files to the package, like udev rules, systemd service, etc.</p>","tags":["ros","deploy","tutorial"]},{"location":"ROS/dev_environment/build/demo/build_deploy_ros_project_2a/#rules","title":"rules","text":"<p>The <code>debian/rules</code> file is a makefile that is used to build the package. It contains the instructions for building, installing, and cleaning up the package. The <code>debian/rules</code> file is generated by bloom when you run the <code>bloom-generate</code> command. You can modify it to add additional steps to the build process.</p> <p>The <code>debian/rules</code> file is a makefile that base on <code>dh</code> (debhelper) and it is used to build the package. It contains the instructions for building, installing, and cleaning up the package.</p> Command What it does <code>dh_auto_configure</code> Runs <code>./configure</code>, <code>cmake</code>, or similar <code>dh_auto_build</code> Runs <code>make</code> or equivalent <code>dh_auto_test</code> Runs test suites if available <code>dh_auto_install</code> Installs built files into <code>debian/&lt;pkg&gt;</code> staging area <code>dh_installdocs</code> Installs docs like README <code>dh_strip</code> Removes debug symbols <code>dh_builddeb</code> Builds the final <code>.deb</code> package","tags":["ros","deploy","tutorial"]},{"location":"ROS/dev_environment/build/demo/build_deploy_ros_project_2a/#demo-override-deb-location","title":"demo: override deb location","text":"<p>Add patch file to edit <code>debian/rules</code> file</p> <ul> <li>Create <code>debian_scripts</code> folder in the project root</li> <li>Create <code>patch_rule.sh</code> and <code>patch_compat.sh</code> files in the <code>debian_scripts</code> folder</li> </ul> file Description patch_rule.sh add override method like override_dh_builddeb  dh_auto_install patch_compat.sh change compat level to 10 or higher debian_scripts/patch_rule.sh<pre><code>    #!/bin/sh\n\n    cat &lt;&lt;'EOF' &gt;&gt; debian/rules\n\n    override_dh_builddeb:\n        dh_builddeb --destdir=/workspace/debs\n    EOF\n</code></pre> <p>override manual</p> <p>Add <code>dh_builddeb</code> rule to end of file</p> debian/rules<pre><code># add this to the end of the file\n\noverride_dh_builddeb:\n    dh_builddeb --destdir=/workspace/debs\n</code></pre> <p>```</p>","tags":["ros","deploy","tutorial"]},{"location":"ROS/dev_environment/build/demo/build_deploy_ros_project_2a/#compat","title":"compat","text":"<p>Bloom uses compat=9 for maximum compatibility across various buildfarm environments and older ROS build tools. the level define the debhelper futures to use.  in out case whe need to change it to 10 or higher to use the <code>--destdir</code> option.</p> debian_scripts/patch_compat.sh<pre><code>cat &lt;&lt;'EOF' &gt; debian/compat\n10\nEOF\n</code></pre> <p>VScode task</p> <p>Using vscode to run bloom , custom script and the fakeroot to build debian package.</p> <pre><code>\"version\": \"2.0.0\",\n\"tasks\": [\n    {\n        \"label\": \"build &lt;package_name&gt;\",\n        \"type\": \"shell\",\n        \"command\": \"bloom-generate rosdebian --ros-distro humble &amp;&amp; ./debian_scripts/patch_rule.sh &amp;&amp; ./debian_scripts/patch_compat.sh &amp;&amp; fakeroot debian/rules binary\",\n        \"options\": {\n            \"cwd\": \"${workspaceFolder}/src/&lt;package_name&gt;\",\n        }\n    }\n]\n</code></pre>","tags":["ros","deploy","tutorial"]},{"location":"ROS/dev_environment/build/demo/build_deploy_ros_project_2a/#demo-add-postinst-script-file","title":"Demo: Add postinst script file","text":"<p>Add postinst to debian file</p> <ul> <li>Create <code>debian_scripts</code> folder in the project root</li> <li>Create <code>patch_rule.sh</code> and <code>patch_compat.sh</code> files in the <code>debian_scripts</code> folder</li> <li>Create <code>postinst</code> file in the <code>debian_scripts</code> folder</li> </ul> debian_scripts/postinst<pre><code>#!/bin/sh\nset -e\n\n# pip install textual==1.0.0\nexit 0\n</code></pre> debian_scripts/patch_rule.sh<pre><code>#!/bin/sh\n\ncat &lt;&lt;'EOF' &gt;&gt; debian/rules\n\noverride_dh_install:\n    dh_install\n    cp \\$(CURDIR)/debian_scripts/postinst debian/postinst\n    chmod 755 debian/postinst\n\noverride_dh_builddeb:\n    dh_builddeb --destdir=/workspace/debs\nEOF\n</code></pre> <ul> <li>Add <code>override_dh_install</code> </li> <li>copy postinst file to <code>debian/postinst</code> folder</li> <li>Add permission to the postinst file</li> <li>Set <code>override_dh_builddeb</code> to copy the debian package to <code>/workspace/debs</code> folder</li> </ul> debian_scripts/patch_compat.sh<pre><code>cat &lt;&lt;'EOF' &gt; debian/compat\n10\nEOF\n</code></pre> <p>TODO: Add dpkg -I to check the package</p>","tags":["ros","deploy","tutorial"]},{"location":"ROS/dev_environment/build/demo/build_deploy_ros_project_2a/#demo-add-udev-rules","title":"Demo: Add udev rules","text":"<p>github action</p> <p>We use github actions and <code>act</code> to run it locally.</p> <p>Add udev rule to <code>/etc/udev/rules.d/</code> </p> <ul> <li>create udev rules file (put it in project root under <code>udev</code> folder)</li> <li>Add install script, this script update debian <code>rules</code> file after bloom generate</li> <li>Add step to github actions command</li> </ul> udev rules<pre><code># any udev rules file\n</code></pre> post_bloom_script.sh<pre><code>#!/bin/bash\n\ncat &lt;&lt;EOF &gt;&gt; src/&lt;package_name&gt;/debian/rules\n\noverride_dh_install:\n    mkdir -p \\$(DEBIAN)/etc/udev/rules.d\n    cp -r udev/* \\$(DEBIAN)/etc/udev/rules.d\n    dh_install\nEOF\n</code></pre> <p>check the $(DEBIAN) path</p> <p>The <code>$(DEBIAN)</code> path is the path where the debian package is created. You can check it by running the following command:</p> <p>TAB not space</p> <p>Make sure to use tab and not space in the <code>post_bloom_script.sh</code> file. You can check it using <code>cat -T</code> command.</p> github action step<pre><code>- name: Add udev rules\n  run: |\n    ./src/&lt;package_name&gt;/post_bloom_script.sh\n</code></pre> <p>TAB VSCode</p> <p>Config vscode to use tab and not spaces for shell script</p> set vscode to use tab and not spaces<pre><code>{\n    \"[shellscript]\": {\n        \"editor.insertSpaces\": false,\n        \"editor.tabSize\": 4,\n        \"editor.detectIndentation\": false\n    },\n}\n</code></pre> <p>TAB check</p> <p>Using cat to check if file contains tab or space</p> <pre><code>cat -T &lt;file&gt;\n</code></pre> <pre><code>#!/bin/bash\n\ncat &lt;&lt;EOF\n^Ia\n^Ib\nEOF\n</code></pre>","tags":["ros","deploy","tutorial"]},{"location":"ROS/dev_environment/build/demo/build_deploy_ros_project_2b/","title":"ROS2 project from development to deployment, Part 2: Using github actions to Automatic build and deploy","text":"<ul> <li>rosdep</li> <li>colcon</li> <li>bloom</li> <li>fakeroot</li> </ul> build package using github action<pre><code>name: My Action\non: [workflow_dispatch]\njobs:\n  build_pc_pkg_interface:\n    runs-on: pc\n    env:\n      PROJECT_NAME: pkg_interface\n    steps:\n      - name: rosdep\n        run: |\n          export ROSDISTRO_INDEX_URL=file://`pwd`/index-v4.yaml \\\n          &amp;&amp; export ROS_DISTRO=humble \\\n          &amp;&amp; echo \"yaml file://`pwd`/rosdep/base.yaml\" &gt; /etc/ros/rosdep/sources.list.d/20-default.list \\\n          &amp;&amp; echo \"yaml file://`pwd`/rosdep/python.yaml\" &gt;&gt; /etc/ros/rosdep/sources.list.d/20-default.list \\\n          &amp;&amp; echo \"yaml file://`pwd`/rosdep/custom_rosdep.yaml\" &gt; /etc/ros/rosdep/sources.list.d/30-custom.list \\\n          &amp;&amp; rosdep update --rosdistro humble\n      - name: colcon\n        run: | \n          colcon build --packages-up-to $PROJECT_NAME \n      - name: bloom\n        run: | \n          export ROSDISTRO_INDEX_URL=file://`pwd`/index-v4.yaml \\\n          &amp;&amp; source /opt/ros/humble/setup.bash \\\n          &amp;&amp; source install/setup.bash \\\n          &amp;&amp; cd src/$PROJECT_NAME \\\n          &amp;&amp; bloom-generate rosdebian \n      - name: fakeroot\n        run: |\n          source install/setup.bash \\\n          &amp;&amp; cd src/$PROJECT_NAME \\\n          &amp;&amp; fakeroot debian/rules binary\n</code></pre>","tags":["ros","deploy","tutorial"]},{"location":"ROS/dev_environment/build/demo/build_deploy_ros_project_3/","title":"ROS2 project from development to deployment, Part 3: Aptly, Docker and Install","text":"","tags":["ros","deploy","tutorial"]},{"location":"ROS/dev_environment/build/demo/build_deploy_ros_project_3/#aptly","title":"Aptly","text":"<p>publish the generate <code>deb</code> package with aptly</p>","tags":["ros","deploy","tutorial"]},{"location":"ROS/dev_environment/build/demo/build_deploy_ros_project_3/#test-docker","title":"Test Docker","text":"<p>Use Prod docker as base share volume </p>","tags":["ros","deploy","tutorial"]},{"location":"ROS/dev_environment/build/demo/build_deploy_ros_project_4/","title":"ROS2 project from development to deployment, Part 4: Using docker for cross compiler","text":"<ul> <li>Build docker image for ARM </li> <li>Using github action to run build process on the docker<ul> <li>using <code>act</code> to run locally</li> </ul> </li> </ul>","tags":["ros","deploy","tutorial"]},{"location":"ROS/dev_environment/build/demo/build_deploy_ros_project_4/#build-docker-image","title":"Build docker image","text":"<p>Run ARM docker architecture on x64 machine install</p> Docker <pre><code># docker  buildx build --platform linux/arm64 -t humble/arm -f Dockerfile.arm .\n\nFROM ubuntu:22.04\n\nENV NVIDIA_VISIBLE_DEVICES all\nENV NVIDIA_DRIVER_CAPABILITIES all\n\n\n\n# Install common programs\nRUN apt-get update &amp;&amp; apt-get install -y --no-install-recommends \\\n    curl \\\n    gnupg2 \\\n    lsb-release \\\n    sudo \\\n    software-properties-common \\\n    wget \\\n    &amp;&amp; rm -rf /var/lib/apt/lists/*\n\nARG USERNAME=user\nARG USER_UID=1000\nARG USER_GID=$USER_UID\n\n# Create a non-root user\nRUN groupadd --gid $USER_GID $USERNAME \\\n    &amp;&amp; useradd -s /bin/bash --uid $USER_UID --gid $USER_GID -m $USERNAME \\\n    # Add sudo support for the non-root user\n    &amp;&amp; apt-get update \\\n    &amp;&amp; apt-get install -y sudo \\\n    &amp;&amp; echo $USERNAME ALL=\\(root\\) NOPASSWD:ALL &gt; /etc/sudoers.d/$USERNAME\\\n    &amp;&amp; chmod 0440 /etc/sudoers.d/$USERNAME \\\n    &amp;&amp; rm -rf /var/lib/apt/lists/*\n\n# Install language\nRUN apt-get update &amp;&amp; apt-get install -y \\\n  locales \\\n  &amp;&amp; locale-gen en_US.UTF-8 \\\n  &amp;&amp; update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8 \\\n  &amp;&amp; rm -rf /var/lib/apt/lists/*\nENV LANG=en_US.UTF-8\n\n# Install timezone\nRUN ln -fs /usr/share/zoneinfo/UTC /etc/localtime \\\n  &amp;&amp; export DEBIAN_FRONTEND=noninteractive \\\n  &amp;&amp; apt-get update \\\n  &amp;&amp; apt-get install -y tzdata \\\n  &amp;&amp; dpkg-reconfigure --frontend noninteractive tzdata \\\n  &amp;&amp; rm -rf /var/lib/apt/lists/*\n\nRUN apt-get update &amp;&amp; apt-get -y upgrade \\\n    &amp;&amp; rm -rf /var/lib/apt/lists/*\n\n\n# Install ROS2\nRUN sudo add-apt-repository universe \\\n  &amp;&amp; curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg \\\n  &amp;&amp; echo \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $(. /etc/os-release &amp;&amp; echo $UBUNTU_CODENAME) main\" | sudo tee /etc/apt/sources.list.d/ros2.list &gt; /dev/null \\\n  &amp;&amp; apt-get update &amp;&amp; apt-get install -y --no-install-recommends \\\n    ros-humble-ros-base \\\n    python3-argcomplete \\\n  &amp;&amp; rm -rf /var/lib/apt/lists/*\n\n\nRUN apt-get update &amp;&amp; apt-get install -y --no-install-recommends \\\n  bash-completion \\\n  python-is-python3 \\\n  vim \\\n  ## ros\n  ros-humble-rmw-cyclonedds-cpp \\\n  python3-colcon-common-extensions \\\n  python3-colcon-clean \\\n  ## devops\n  tmux \\\n  tmuxp \\\n  python3-rosdep \\\n  python3-bloom \\\n  fakeroot \\\n  debhelper \\\n  dh-python \\\n&amp;&amp; apt-get clean -y \\\n&amp;&amp; rm -rf /var/lib/apt/lists/*\n\n# Set up autocompletion for user\nRUN apt-get update &amp;&amp; apt-get install -y git-core bash-completion \\\n  &amp;&amp; echo \"if [ -f /opt/ros/${ROS_DISTRO}/setup.bash ]; then source /opt/ros/${ROS_DISTRO}/setup.bash; fi\" &gt;&gt; /home/$USERNAME/.bashrc \\\n  &amp;&amp; echo \"if [ -f /usr/share/colcon_argcomplete/hook/colcon-argcomplete.bash ]; then source /usr/share/colcon_argcomplete/hook/colcon-argcomplete.bash; fi\" &gt;&gt; /home/$USERNAME/.bashrc \\\n  &amp;&amp; rm -rf /var/lib/apt/lists/*\n\nENV DEBIAN_FRONTEND=\nENV AMENT_CPPCHECK_ALLOW_SLOW_VERSIONS=1\n\nRUN rosdep init \\\n  &amp;&amp; rosdep update\n\nRUN apt-get update &amp;&amp; apt-get install -y --no-install-recommends \\\n  build-essential \\\n&amp;&amp; apt-get clean -y \\\n&amp;&amp; rm -rf /var/lib/apt/lists/*\n</code></pre> <pre><code>docker build --platform=linux/arm64/v8 -t ros2_cross_compile:arm64v8 -f Docker/Dockerfile.arm .\n</code></pre> <p>linux/arm64/v8</p> <p><code>linux/arm64/v8</code> is an Alias for <code>linux/arm64</code></p>","tags":["ros","deploy","tutorial"]},{"location":"ROS/dev_environment/build/demo/build_deploy_ros_project_4/#using-github-actions","title":"Using github actions","text":"","tags":["ros","deploy","tutorial"]},{"location":"ROS/dev_environment/build/demo/build_deploy_ros_project_4/#using-github-actions-local-using-act","title":"Using github actions local using <code>act</code>","text":"install act<pre><code>curl --proto '=https' --tlsv1.2 -sSf https://raw.githubusercontent.com/nektos/act/master/install.sh | sudo bash\n</code></pre>","tags":["ros","deploy","tutorial"]},{"location":"ROS/dev_environment/build/demo/build_deploy_ros_project_4/#config-github-action-in-project","title":"Config github action in project","text":"<ul> <li>Add <code>.github</code> folder</li> <li>Add <code>workflows</code> folder</li> <li>Add action yaml file</li> </ul> .github action folder and files<pre><code>.github/\n\u2514\u2500\u2500 workflows\n    \u251c\u2500\u2500 build.yml\n    \u2514\u2500\u2500 README.md\n</code></pre> build.yaml<pre><code>name: My Action\non: [workflow_dispatch]\njobs:\n\n\n  build_pc_pkg_interface_ng:\n    runs-on: pc\n    steps:\n      - name: build\n        uses: ./.github/actions/ros_build\n        with:\n          PROJECT_NAME: pkg_interface\n</code></pre> <p>update rosdep sources</p> <p>Update docker <code>/etc/ros/rosdep/source.list.d</code> with project custom DB and run <code>rosdep update</code> </p> run<pre><code>act -j build_pkg_interface -P arm=ros2_cross_compile:arm64v8 \\\n    --pull=false \\\n    --bind --directory . \n</code></pre>","tags":["ros","deploy","tutorial"]},{"location":"ROS/dev_environment/build/demo/build_deploy_ros_project_5/","title":"ROS2 project from development to deployment, Part 4: Cross Compiler","text":"","tags":["ros","deploy","tutorial","cross-compile","mixing"]},{"location":"ROS/dev_environment/build/demo/build_deploy_ros_project_5/#in-progress","title":"In progress","text":"<p>Build package for nvidia jetson using cross compiler using colcon mixin to set cross compiler flags</p>","tags":["ros","deploy","tutorial","cross-compile","mixing"]},{"location":"ROS/dev_environment/build/demo/build_deploy_ros_project_5/#download-and-install-cross-compiler","title":"Download and install cross compiler","text":"<p>Download toolchain from jetpack 6.2</p> <p>toolchain</p> <p>Every jetpack has it own toolchain, so make sure to download the correct one.</p> <p>The toolchain url can be build from</p> <p>get jetson linux version<pre><code>cat /etc/nv_tegra_release\n#\n# R36 (release), REVISION: 4.3,\n</code></pre> <pre><code>https://developer.nvidia.com/embedded/jetson-linux-r3643\n</code></pre></p>","tags":["ros","deploy","tutorial","cross-compile","mixing"]},{"location":"ROS/dev_environment/build/demo/build_deploy_ros_project_5/#build-rootfs","title":"Build rootfs","text":"<p>Build rootfs using Debootstrap</p>","tags":["ros","deploy","tutorial","cross-compile","mixing"]},{"location":"ROS/dev_environment/build/demo/build_deploy_ros_project_5/#config-mixin","title":"config mixin","text":"mixin file<pre><code>mixins:\n  cross-arm64:\n    build-args:\n      cmake:\n        - -DCMAKE_TOOLCHAIN_FILE=/path/to/aarch64_toolchain.cmake\n        - -DCMAKE_CXX_FLAGS=\"--sysroot=/path/to/arm64/sysroot\"\n        - -DCMAKE_C_FLAGS=\"--sysroot=/path/to/arm64/sysroot\"\n        - -DCMAKE_EXE_LINKER_FLAGS=\"--sysroot=/path/to/arm64/sysroot\"\n</code></pre> register mixing file<pre><code>colcon mixin add cross_compile ./cross_compile.mixin\ncolcon mixin update\n</code></pre> usage<pre><code>colcon build --mixin cross-arm64\n</code></pre>","tags":["ros","deploy","tutorial","cross-compile","mixing"]},{"location":"ROS/dev_environment/build/demo/build_deploy_ros_project_5/#demo","title":"Demo","text":"<p>aarch64.cmake<pre><code>set(CMAKE_SYSTEM_NAME Linux)\nset(CMAKE_SYSTEM_PROCESSOR aarch64)  # Change to match your target architecture\nset(CROSS_COMPILER_PATH /home/user/cross_compilers/aarch64--glibc--stable-2022.08-1)\n# Set cross-compiler paths\nset(CMAKE_C_COMPILER ${CROSS_COMPILER_PATH}/bin/${CMAKE_SYSTEM_PROCESSOR}-buildroot-linux-gnu-gcc)\nset(CMAKE_CXX_COMPILER ${CROSS_COMPILER_PATH}/bin/${CMAKE_SYSTEM_PROCESSOR}-linux-gnu-g++)\nset(CMAKE_SYSROOT /home/user/rootfs/ubuntuRootFS)  # Set to your root filesystem\n\n# Set where CMake should look for libraries and headers\nset(CMAKE_FIND_ROOT_PATH ${CMAKE_SYSROOT} ${CMAKE_SYSROOT}/usr ${CMAKE_SYSROOT}/usr/local)\n\n# Only search inside the target rootfs\nset(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)\nset(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)\nset(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)\n\n# ROS 2 paths\nset(AMENT_PREFIX_PATH ${CMAKE_SYSROOT}/opt/ros/humble)\nset(CMAKE_PREFIX_PATH ${AMENT_PREFIX_PATH})\n</code></pre> ` Humble ARM64 cross compiler<pre><code>mixins:\n  cross-arm64:\n    build-args:\n      cmake:\n        - -DCMAKE_TOOLCHAIN_FILE=/opt/cross_toolchain/aarch64.cmake\n</code></pre></p>","tags":["ros","deploy","tutorial","cross-compile","mixing"]},{"location":"ROS/dev_environment/dev/","title":"Using VSCode devcontainer and docker as dev environment","text":"<p>devcontainer</p> <p>remote</p> <p>projects template</p>","tags":["ros","vscode","docker","devcontainer","dev environment"]},{"location":"ROS/dev_environment/dev/#project-docker-images","title":"Project Docker images","text":"","tags":["ros","vscode","docker","devcontainer","dev environment"]},{"location":"ROS/dev_environment/dev/#common-ros-image","title":"Common ROS image","text":"<p>Docker file base on <code>ubuntu</code> base image version depend on ROS version.  It can be base on <code>nvidia</code> cuda image.</p> <p>The image include <code>ros core</code> installation and common dev tools , it add none root user name <code>user</code> (id 1000)</p> <p>TBD: include gazebo in the image (current version include it)</p>","tags":["ros","vscode","docker","devcontainer","dev environment"]},{"location":"ROS/dev_environment/dev/#project-runtime","title":"Project runtime","text":"<p>Docker file base on <code>common_ros</code> image, it include all project dependencies <code>deb</code>,<code>python</code> and others. It use for check project debian (deb) package installation. The main propose it to be the docker image for Application/project production deployment. TBD: use this image for CI/CD</p>","tags":["ros","vscode","docker","devcontainer","dev environment"]},{"location":"ROS/dev_environment/dev/#project-devbuild","title":"Project Dev/Build","text":"<p>Docker file base on <code>runtime</code> image, it include all other tool for development, test and build. Include ROS dev tools and other helper tools for day to day development.</p>","tags":["ros","vscode","docker","devcontainer","dev environment"]},{"location":"ROS/dev_environment/dev/#ongoing","title":"Ongoing","text":"<p>Dockerfile That use by <code>devcontainer</code> it lite Dockerfile for all things and ongoing installation. The idea is to move the ongoing installation and settings to the project runtime and dev images. Keep the <code>devcontainer</code> Dockerfile lite and fast to build.</p> <p>TBD</p> <p>Separate the <code>ros common</code> image to <code>OS</code> and <code>ROS Core</code> images.</p>","tags":["ros","vscode","docker","devcontainer","dev environment"]},{"location":"ROS/dev_environment/dev/dev_container/","title":"VSCode Devcontainer for ROS application","text":"","tags":["ros","vscode","devcontainer"]},{"location":"ROS/dev_environment/dev/dev_container/#project","title":"Project","text":"<pre><code>.\n\u251c\u2500\u2500 .devcontainer\n\u2502   \u251c\u2500\u2500 devcontainer.json\n\u2502   \u251c\u2500\u2500 Dockerfile.humble_dev\n\u2502   \u251c\u2500\u2500 .tmux.conf\n|   \u2514\u2500\u2500 Dockerfile\n\u251c\u2500\u2500 docker-compose.yaml\n\u251c\u2500\u2500 readme.md\n\u2514\u2500\u2500 src\n</code></pre>","tags":["ros","vscode","devcontainer"]},{"location":"ROS/dev_environment/dev/dev_container/#base-docker","title":"Base docker","text":"<ul> <li>ubuntu 22.04</li> <li>ros humble base</li> <li>gazebo11</li> </ul> dockerfile.humble_dev <pre><code># https://github.com/athackst/dockerfiles/blob/main/ros2/humble.Dockerfile\n# docker build -f .devcontainer/Dockerfile.humble_dev --target gazebo_dev -t humble:dev .\n# docker build -f .devcontainer/Dockerfile.humble_cuda_dev --target gazebo_dev -t humble/cuda/devel:dev .\n\n###########################################\n# Base image\n###########################################\nARG BASE_IMAGE=\"ubuntu:22.04\"\nARG IMAGE_VERSION=\"1.0\"\n\nFROM ${BASE_IMAGE} AS base\n\nENV DEBIAN_FRONTEND=noninteractive\n\nRUN echo ${IMAGE_VERSION} &gt; /etc/ros_image_version\n\n# Install language\nRUN apt-get update &amp;&amp; apt-get install -y \\\n  locales \\\n  &amp;&amp; locale-gen en_US.UTF-8 \\\n  &amp;&amp; update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8 \\\n  &amp;&amp; rm -rf /var/lib/apt/lists/*\nENV LANG en_US.UTF-8\n\n# Install timezone\nRUN ln -fs /usr/share/zoneinfo/UTC /etc/localtime \\\n  &amp;&amp; export DEBIAN_FRONTEND=noninteractive \\\n  &amp;&amp; apt-get update \\\n  &amp;&amp; apt-get install -y tzdata \\\n  &amp;&amp; dpkg-reconfigure --frontend noninteractive tzdata \\\n  &amp;&amp; rm -rf /var/lib/apt/lists/*\n\nRUN apt-get update &amp;&amp; apt-get -y upgrade \\\n    &amp;&amp; rm -rf /var/lib/apt/lists/*\n\n# Install common programs\nRUN apt-get update &amp;&amp; apt-get install -y --no-install-recommends \\\n    curl \\\n    gnupg2 \\\n    lsb-release \\\n    sudo \\\n    software-properties-common \\\n    wget \\\n    &amp;&amp; rm -rf /var/lib/apt/lists/*\n\n# Install ROS2\nRUN sudo add-apt-repository universe \\\n  &amp;&amp; curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg \\\n  &amp;&amp; echo \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $(. /etc/os-release &amp;&amp; echo $UBUNTU_CODENAME) main\" | sudo tee /etc/apt/sources.list.d/ros2.list &gt; /dev/null \\\n  &amp;&amp; apt-get update &amp;&amp; apt-get install -y --no-install-recommends \\\n    ros-humble-ros-base \\\n    python3-argcomplete \\\n  &amp;&amp; rm -rf /var/lib/apt/lists/*\n\nENV ROS_DISTRO=humble\nENV AMENT_PREFIX_PATH=/opt/ros/humble\nENV COLCON_PREFIX_PATH=/opt/ros/humble\nENV LD_LIBRARY_PATH=/opt/ros/humble/lib\nENV PATH=/opt/ros/humble/bin:$PATH\nENV PYTHONPATH=/opt/ros/humble/local/lib/python3.10/dist-packages:/opt/ros/humble/lib/python3.10/site-packages\nENV ROS_PYTHON_VERSION=3\nENV ROS_VERSION=2\nENV DEBIAN_FRONTEND=\n\n\n###########################################\n#  Develop image\n###########################################\nFROM base AS dev\n\nENV DEBIAN_FRONTEND=noninteractive\nRUN apt-get update &amp;&amp; apt-get install -y --no-install-recommends \\\n  bash-completion \\\n  build-essential \\\n  cmake \\\n  gdb \\\n  git \\\n  openssh-client \\\n  python3-argcomplete \\\n  python3-pip \\\n  python-is-python3 \\\n  ros-dev-tools \\\n  ros-humble-ament-* \\\n  vim \\\n  ## ros\n  python3-colcon-clean \\\n  ros-humble-rmw-cyclonedds-cpp \\\n  ## dev\n  tmux \\\n  tmuxp \\\n  ## build\n  python3-bloom \\\n  python3-rosdep \\\n  fakeroot \\\n  debhelper \\\n  dh-python \\\n  &amp;&amp; rm -rf /var/lib/apt/lists/*\n\nCOPY .devcontainer/.tmux.conf /etc/tmux.conf\nRUN rosdep init || echo \"rosdep already initialized\"\n\nARG USERNAME=user\nARG USER_UID=1000\nARG USER_GID=$USER_UID\n\n# Create a non-root user\nRUN groupadd --gid $USER_GID $USERNAME \\\n  &amp;&amp; useradd -s /bin/bash --uid $USER_UID --gid $USER_GID -m $USERNAME \\\n  # Add sudo support for the non-root user\n  &amp;&amp; apt-get update \\\n  &amp;&amp; apt-get install -y sudo \\\n  &amp;&amp; echo $USERNAME ALL=\\(root\\) NOPASSWD:ALL &gt; /etc/sudoers.d/$USERNAME\\\n  &amp;&amp; chmod 0440 /etc/sudoers.d/$USERNAME \\\n  &amp;&amp; rm -rf /var/lib/apt/lists/*\n\n# Set up autocompletion for user\nRUN apt-get update &amp;&amp; apt-get install -y git-core bash-completion \\\n  &amp;&amp; echo \"if [ -f /opt/ros/${ROS_DISTRO}/setup.bash ]; then source /opt/ros/${ROS_DISTRO}/setup.bash; fi\" &gt;&gt; /home/$USERNAME/.bashrc \\\n  &amp;&amp; echo \"if [ -f /usr/share/colcon_argcomplete/hook/colcon-argcomplete.bash ]; then source /usr/share/colcon_argcomplete/hook/colcon-argcomplete.bash; fi\" &gt;&gt; /home/$USERNAME/.bashrc \\\n  &amp;&amp; rm -rf /var/lib/apt/lists/* \n\nENV DEBIAN_FRONTEND=\nENV AMENT_CPPCHECK_ALLOW_SLOW_VERSIONS=1\n\n\n###########################################\n#  Dev+Gazebo image\n###########################################\nFROM dev AS gazebo_dev\n\nENV DEBIAN_FRONTEND=noninteractive\n# Install gazebo classic\n# install gazebo classic dev library\n# install ros humble gazebo classic plugins\nRUN wget https://packages.osrfoundation.org/gazebo.gpg -O /usr/share/keyrings/pkgs-osrf-archive-keyring.gpg \\\n  &amp;&amp; echo \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/pkgs-osrf-archive-keyring.gpg] http://packages.osrfoundation.org/gazebo/ubuntu-stable $(lsb_release -cs) main\" | sudo tee /etc/apt/sources.list.d/gazebo-stable.list &gt; /dev/null \\\n  &amp;&amp; apt-get update &amp;&amp; apt-get install -q -y --no-install-recommends \\\n    gazebo \\\n    libgazebo-dev \\\n    ros-humble-gazebo-ros-pkgs \\\n  &amp;&amp; rm -rf /var/lib/apt/lists/*\nENV DEBIAN_FRONTEND=\n\nRUN echo \"base ROS humble image with gazebo classic : ${IMAGE_VERSION}\"&gt;/etc/ros_image_version\n</code></pre> build command <pre><code>docker build -t humble:dev -f .devcontainer/Dockerfile.humble_dev .\n</code></pre>","tags":["ros","vscode","devcontainer"]},{"location":"ROS/dev_environment/dev/dev_container/#dockerfile","title":"Dockerfile","text":"<pre><code>FROM humble:dev\n\nARG VERSION=0.0.1\n\n\nRUN echo \"image dev version: ${VERSION}\"&gt;/etc/docker_image_dev_version\n</code></pre>","tags":["ros","vscode","devcontainer"]},{"location":"ROS/dev_environment/dev/dev_container/#docker-compose","title":"Docker Compose","text":"docker-compose.yml","tags":["ros","vscode","devcontainer"]},{"location":"ROS/dev_environment/dev/dev_container/#devcontainer","title":"devcontainer","text":"devcontainer.json<pre><code>{\n  \"name\": \"gst_stream\",\n  \"dockerComposeFile\": \"../docker-compose.yaml\",\n  \"service\": \"dev\",\n  \"shutdownAction\": \"stopCompose\",\n  \"workspaceFolder\": \"/workspace\",\n  \"remoteUser\": \"user\",\n  \"customizations\": {\n    \"vscode\": {\n      \"extensions\": [],\n      \"settings\": {}\n    }\n  }\n}\n</code></pre> dockerComposeFile service shutdownAction workdpaceFolder","tags":["ros","vscode","devcontainer"]},{"location":"ROS/dev_environment/dev/dev_container/#other-files","title":"Other files","text":".tmux.conf <pre><code># unbind\nunbind C-b\nunbind '\"'\nunbind %\n\n# base1 numbering\nset -g base-index 1\nsetw -g pane-base-index 1\n\n#bind ctrl-a as a prefix\nset-option -g prefix C-a\nbind-key C-a send-prefix\n# kill session\nbind C-c kill-session\n\nbind C-a run \"tmux save-buffer - | xclip -i -sel clipboard\"\n\n# mouse\nset -g mouse on\n\n\n # do like terminator\nbind -n C-E split-window -h\nbind -n C-S-Left resize-pane -L 3\nbind -n C-S-Right resize-pane -R 3\nbind -n C-S-Up resize-pane -U 3\nbind -n C-S-Down resize-pane -D 3\nbind -n C-O split-window -v\n\n# switch panes using Alt-arrow without prefix (not working)\nbind -n M-Left select-pane -L\nbind -n M-Right select-pane -R\nbind -n M-Up select-pane -U\nbind -n M-Down select-pane -D\n\n# Shift arrow to switch windows\n\nbind n next-window\nbind p previous-window\n\nbind c new-window -c \"#{pane_current_path}\"\n\nbind r source-file ~/.tmux.conf\n\n# settings\n</code></pre>","tags":["ros","vscode","devcontainer"]},{"location":"ROS/dev_environment/dev/project_templates/","title":"Ros2 projects templates","text":"","tags":["ros","vscode","docker","devcontainer","docker compose","projects"]},{"location":"ROS/dev_environment/dev/project_templates/#ros2-jezzy","title":"ROS2 jezzy","text":"<pre><code>\u251c\u2500\u2500 .devcontainer\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 devcontainer.json\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 Dockerfile.jazzy\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 Dockerfile.runtime\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 Dockerfile.dev\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 Dockerfile\n\u251c\u2500\u2500 .vscode\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 tasks.json\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 settings.json\n\u251c\u2500\u2500 docker-compose.yml\n\u251c\u2500\u2500 .gitignore\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 colcon_defaults.md\n\u251c\u2500\u2500 env.sh\n\u2514\u2500\u2500 src\n</code></pre> .devcontainer/Dockerfile.jazzy <pre><code>##############################################\n# base on allision https://github.com/athackst/dockerfiles/blob/main/ros2/jazzy-cuda.Dockerfile\n##############################################\n\n###########################################\n# Base image ver 0.1\n###########################################\nFROM nvidia/cuda:12.6.2-cudnn-runtime-ubuntu24.04 AS base\n\nENV DEBIAN_FRONTEND=noninteractive\n\n# Install language\nRUN apt-get update &amp;&amp; apt-get install -y --no-install-recommends \\\n  locales \\\n  &amp;&amp; locale-gen en_US.UTF-8 \\\n  &amp;&amp; update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8 \\\n  &amp;&amp; rm -rf /var/lib/apt/lists/*\nENV LANG=en_US.UTF-8\n\n# Install timezone\nRUN ln -fs /usr/share/zoneinfo/UTC /etc/localtime \\\n  &amp;&amp; export DEBIAN_FRONTEND=noninteractive \\\n  &amp;&amp; apt-get update \\\n  &amp;&amp; apt-get install -y --no-install-recommends tzdata \\\n  &amp;&amp; dpkg-reconfigure --frontend noninteractive tzdata \\\n  &amp;&amp; rm -rf /var/lib/apt/lists/*\n\nRUN apt-get update &amp;&amp; apt-get -y upgrade \\\n    &amp;&amp; rm -rf /var/lib/apt/lists/*\n\n# Install common programs\nRUN apt-get update &amp;&amp; apt-get install -y --no-install-recommends \\\n    curl \\\n    gnupg2 \\\n    lsb-release \\\n    sudo \\\n    software-properties-common \\\n    wget \\\n    &amp;&amp; rm -rf /var/lib/apt/lists/*\n\n# Install ROS2\nRUN sudo add-apt-repository universe \\\n  &amp;&amp; curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg \\\n  &amp;&amp; echo \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $(. /etc/os-release &amp;&amp; echo $UBUNTU_CODENAME) main\" | sudo tee /etc/apt/sources.list.d/ros2.list &gt; /dev/null \\\n  &amp;&amp; apt-get update &amp;&amp; apt-get install -y --no-install-recommends \\\n    ros-jazzy-ros-base \\\n    python3-argcomplete \\\n  &amp;&amp; rm -rf /var/lib/apt/lists/*\n\n################\n# Expose the nvidia driver to allow opengl\n# Dependencies for glvnd and X11.\n################\nRUN apt-get update \\\n &amp;&amp; apt-get install -y -qq --no-install-recommends \\\n  libglvnd0 \\\n  libgl1 \\\n  libglx0 \\\n  libegl1 \\\n  libxext6 \\\n  libx11-6\n\n# Env vars for the nvidia-container-runtime.\nENV NVIDIA_VISIBLE_DEVICES=all\nENV NVIDIA_DRIVER_CAPABILITIES=graphics,utility,compute\nENV QT_X11_NO_MITSHM=1\n\nENV ROS_DISTRO=jazzy\nENV AMENT_PREFIX_PATH=/opt/ros/jazzy\nENV COLCON_PREFIX_PATH=/opt/ros/jazzy\nENV LD_LIBRARY_PATH=/opt/ros/jazzy/lib/x86_64-linux-gnu:/opt/ros/jazzy/lib\nENV PATH=/opt/ros/jazzy/bin:$PATH\nENV PYTHONPATH=/opt/ros/jazzy/local/lib/python3.12/dist-packages:/opt/ros/jazzy/lib/python3.12/site-packages\nENV ROS_PYTHON_VERSION=3\nENV ROS_VERSION=2\nENV ROS_AUTOMATIC_DISCOVERY_RANGE=SUBNET\n\nRUN apt-get update &amp;&amp; apt-get install -y --no-install-recommends \\\n  bash-completion \\\n  build-essential \\\n  cmake \\\n  gdb \\\n  git \\\n  openssh-client \\\n  python3-argcomplete \\\n  python3-pip \\\n  ros-dev-tools \\\n  python3-colcon-clean \\\n  ros-jazzy-ament-* \\\n  vim \\\n  ros-jazzy-rmw-cyclonedds-cpp \\\n  ros-jazzy-ros-gz-bridge \\\n  ros-jazzy-ros-gz-image \\\n  &amp;&amp; rm -rf /var/lib/apt/lists/*\n\nRUN rosdep init || echo \"rosdep already initialized\"\n\nARG USERNAME=user\nARG USER_UID=1000\nARG USER_GID=$USER_UID\n\n# Check if \"ubuntu\" user exists, delete it if it does, then create the desired user\nRUN if getent passwd ubuntu &gt; /dev/null 2&gt;&amp;1; then \\\n        userdel -r ubuntu &amp;&amp; \\\n        echo \"Deleted existing ubuntu user\"; \\\n    fi &amp;&amp; \\\n    groupadd --gid $USER_GID $USERNAME &amp;&amp; \\\n    useradd -s /bin/bash --uid $USER_UID --gid $USER_GID -m $USERNAME &amp;&amp; \\\n    echo \"Created new user $USERNAME\"\n\n# Add sudo support for the non-root user\nRUN apt-get update &amp;&amp; apt-get install -y sudo \\\n  &amp;&amp; echo $USERNAME ALL=\\(root\\) NOPASSWD:ALL &gt; /etc/sudoers.d/$USERNAME\\\n  &amp;&amp; chmod 0440 /etc/sudoers.d/$USERNAME \\\n  &amp;&amp; rm -rf /var/lib/apt/lists/*\n\n# Set up autocompletion for user\nRUN apt-get update &amp;&amp; apt-get install -y --no-install-recommends git-core bash-completion \\\n  &amp;&amp; echo \"if [ -f /opt/ros/${ROS_DISTRO}/setup.bash ]; then source /opt/ros/${ROS_DISTRO}/setup.bash; fi\" &gt;&gt; /home/$USERNAME/.bashrc \\\n  &amp;&amp; echo \"if [ -f /usr/share/colcon_argcomplete/hook/colcon-argcomplete.bash ]; then source /usr/share/colcon_argcomplete/hook/colcon-argcomplete.bash; fi\" &gt;&gt; /home/$USERNAME/.bashrc \\\n  &amp;&amp; rm -rf /var/lib/apt/lists/*\n\nENV DEBIAN_FRONTEND=\nENV AMENT_CPPCHECK_ALLOW_SLOW_VERSIONS=1\n\nCOPY .tmux.conf /etc/tmux.conf\n</code></pre> .devcontainer/devcontainer.json <pre><code>{\n    \"name\": \"gz_tutorial\",\n    \"dockerComposeFile\": \"../docker-compose.yaml\",\n    \"service\": \"ros\",\n    \"shutdownAction\": \"stopCompose\",\n    \"workspaceFolder\": \"/workspace\",\n    \"remoteUser\": \"user\",\n    \"customizations\": {\n      \"vscode\": {\n        \"extensions\": [\n            \"ms-python.python\",\n            \"ms-vscode.cpptools\",\n            \"twxs.cmake\",\n            \"redhat.vscode-xml\",\n            \"redhat.vscode-yaml\",\n            \"albert.tabout\",\n            \"actboy168.tasks\",\n            \"streetsidesoftware.code-spell-checker\",\n            \"mhutchie.git-graph\",\n            \"dlech.chmod\",\n            \"smilerobotics.urdf\"\n        ],\n        \"settings\": {}\n      }\n    }\n  }\n</code></pre> docker-compose.yaml <pre><code>services:\n  ros:\n    image: jazzy:base\n    user: \"user:user\"\n    volumes:\n      - .:/workspace:cached\n      - /tmp/.X11-unix:/tmp/.X11-unix:rw \n      - /dev/dri:/dev/dri \n      - /dev/nvidia0:/dev/nvidia0 \n      - /dev/nvidiactl:/dev/nvidiactl \n      - /dev/nvidia-modeset:/dev/nvidia-modeset \n    deploy:\n      resources:\n        reservations:\n          devices:\n            - capabilities: [gpu]\n    hostname: ros\n    network_mode: host\n    stdin_open: true\n    tty: true\n    environment:\n      - DISPLAY=${DISPLAY}\n      - QT_X11_NO_MITSHM=1\n      - GZ_TRANSPORT_IP=ros\n      - GZ_DISCOVERY_SERVER=gazebo\n      - GZ_PARTITION=my_simulation\n    devices:\n      - /dev/dri:/dev/dri\n</code></pre>","tags":["ros","vscode","docker","devcontainer","docker compose","projects"]},{"location":"ROS/dev_environment/dev/project_templates/#ros","title":"ros","text":"colcon_defaults.yaml<pre><code>build:\n  # Use symlink install to speed up builds\n  symlink-install: true\n  # Set build type (e.g., Release or Debug)\n  cmake-args:\n    - \"-DCMAKE_BUILD_TYPE=Release\"\n\ntest:\n  # Run tests in parallel\n  parallel-workers: 4\n\n# Additional settings for colcon test and other commands\ntest-result:\n  verbose: true\n</code></pre>","tags":["ros","vscode","docker","devcontainer","docker compose","projects"]},{"location":"ROS/dev_environment/dev/project_templates/#vscode","title":"VSCode","text":"","tags":["ros","vscode","docker","devcontainer","docker compose","projects"]},{"location":"ROS/dev_environment/dev/project_templates/#taskjson","title":"task.json","text":"<pre><code>{\n    \"version\": \"2.0.0\",\n    \"tasks\": [\n      {\n        \"label\": \"colcon\",\n        \"detail\": \"Build all ros2 packages using colcon\",\n        \"type\": \"shell\",\n        \"command\": \"colcon build\",\n        \"problemMatcher\": [],\n        \"group\": {\n            \"kind\": \"build\",\n            \"isDefault\": true\n        }\n      }\n    ]\n}\n</code></pre>","tags":["ros","vscode","docker","devcontainer","docker compose","projects"]},{"location":"ROS/dev_environment/dev/remote_ssh/","title":"Using VSCode remote","text":"","tags":["ros","dev","vscode","remote"]},{"location":"ROS/dev_environment/dev/remote_ssh/#ssh-configuration","title":"ssh configuration","text":".ssh/config<pre><code>Host myserver\n  HostName 10.0.0.4\n  Port 22\n  User user\n  ForwardX11 yes\n  ForwardX11Trusted yes\n</code></pre>","tags":["ros","dev","vscode","remote"]},{"location":"ROS/dev_environment/gdb_debug/","title":"GDB Debugging in ROS2","text":"<p>to read</p>","tags":["ros","gdb","debug"]},{"location":"ROS/dev_environment/prod/","title":"ROS Production","text":"<p>Config / Install and Environment variable for ROS Production system</p>","tags":["ros","production"]},{"location":"ROS/dev_environment/prod/#install","title":"Install","text":"","tags":["ros","production"]},{"location":"ROS/dev_environment/prod/#os-settings","title":"OS Settings","text":"<ul> <li>net.core.rmem_max</li> <li>net.core.rmem_default</li> </ul>","tags":["ros","production"]},{"location":"ROS/dev_environment/prod/#environment-variables","title":"Environment Variables","text":"<ul> <li>RMW_IMPLEMENTATION</li> <li>CYCLONEDDS_URI</li> </ul>","tags":["ros","production"]},{"location":"ROS/dev_environment/ros_docker/","title":"Using Docker for ROS2 Development","text":"<p>Images</p> <p>Devices</p> <p>Nvidia</p>","tags":["ros2","docker"]},{"location":"ROS/dev_environment/ros_docker/docker_devices/","title":"Connect devices to docker","text":"<p>How to run docker with devices like camera joysticks and other peripherals.</p> <ul> <li>Must watch and read</li> </ul>","tags":["ros","docker","devices"]},{"location":"ROS/dev_environment/ros_docker/docker_images/","title":"ROS Docker Images for humble and jazzy","text":"<p>Humble</p> <p>Jazzy</p> <p>TBD</p>","tags":["docker","ros","image"]},{"location":"ROS/dev_environment/ros_docker/docker_images/#humble","title":"Humble","text":"","tags":["docker","ros","image"]},{"location":"ROS/dev_environment/ros_docker/docker_images/#humble-base","title":"Humble base","text":"<ul> <li>ros-base</li> <li>build tools</li> <li>ros build tools</li> <li>basic system utilities</li> <li>add none-root user</li> </ul> Dockerfile ROS humble  <pre><code>##############################################\n# base on allision https://github.com/athackst/dockerfiles/blob/main/ros2/humble.Dockerfile\n##############################################\n\n###########################################\n# Base image\n###########################################\nFROM ubuntu:22.04 AS base\n\nENV DEBIAN_FRONTEND=noninteractive\n\n# Install language\nRUN apt-get update &amp;&amp; apt-get install -y --no-install-recommends \\\n  locales \\\n  &amp;&amp; locale-gen en_US.UTF-8 \\\n  &amp;&amp; update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8 \\\n  &amp;&amp; rm -rf /var/lib/apt/lists/*\nENV LANG=en_US.UTF-8\n\n# Install timezone\nRUN ln -fs /usr/share/zoneinfo/UTC /etc/localtime \\\n  &amp;&amp; export DEBIAN_FRONTEND=noninteractive \\\n  &amp;&amp; apt-get update \\\n  &amp;&amp; apt-get install -y --no-install-recommends tzdata \\\n  &amp;&amp; dpkg-reconfigure --frontend noninteractive tzdata \\\n  &amp;&amp; rm -rf /var/lib/apt/lists/*\n\nRUN apt-get update &amp;&amp; apt-get -y upgrade \\\n    &amp;&amp; rm -rf /var/lib/apt/lists/*\n\n# Install common programs\nRUN apt-get update &amp;&amp; apt-get install -y --no-install-recommends \\\n    curl \\\n    gnupg2 \\\n    lsb-release \\\n    sudo \\\n    software-properties-common \\\n    wget \\\n    &amp;&amp; rm -rf /var/lib/apt/lists/*\n\n# Install ROS2\nRUN sudo add-apt-repository universe \\\n  &amp;&amp; curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg \\\n  &amp;&amp; echo \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $(. /etc/os-release &amp;&amp; echo $UBUNTU_CODENAME) main\" | sudo tee /etc/apt/sources.list.d/ros2.list &gt; /dev/null \\\n  &amp;&amp; apt-get update &amp;&amp; apt-get install -y --no-install-recommends \\\n    ros-humble-ros-base \\\n    python3-argcomplete \\\n  &amp;&amp; rm -rf /var/lib/apt/lists/*\n\nENV ROS_DISTRO=humble\nENV AMENT_PREFIX_PATH=/opt/ros/humble\nENV COLCON_PREFIX_PATH=/opt/ros/humble\nENV LD_LIBRARY_PATH=/opt/ros/humble/lib/x86_64-linux-gnu:/opt/ros/humble/lib\nENV PATH=/opt/ros/humble/bin:$PATH\nENV PYTHONPATH=/opt/ros/humble/local/lib/python3.10/dist-packages:/opt/ros/humble/lib/python3.10/site-packages\nENV ROS_PYTHON_VERSION=3\nENV ROS_VERSION=2\nENV ROS_AUTOMATIC_DISCOVERY_RANGE=SUBNET\nENV DEBIAN_FRONTEND=\n###########################################\n#  Develop image\n###########################################\nFROM base AS dev\n\nENV DEBIAN_FRONTEND=noninteractive\nRUN apt-get update &amp;&amp; apt-get install -y --no-install-recommends \\\n  bash-completion \\\n  build-essential \\\n  cmake \\\n  gdb \\\n  git \\\n  openssh-client \\\n  python3-argcomplete \\\n  python3-pip \\\n  python-is-python3 \\\n  tmux \\\n  tmuxp \\\n  vim \\\n  &amp;&amp; rm -rf /var/lib/apt/lists/*\n\nRUN rosdep init || echo \"rosdep already initialized\"\n\nARG USERNAME=user\nARG USER_UID=1000\nARG USER_GID=$USER_UID\n\n# Check if \"ubuntu\" user exists, delete it if it does, then create the desired user\nRUN if getent passwd ubuntu &gt; /dev/null 2&gt;&amp;1; then \\\n        userdel -r ubuntu &amp;&amp; \\\n        echo \"Deleted existing ubuntu user\"; \\\n    fi &amp;&amp; \\\n    groupadd --gid $USER_GID $USERNAME &amp;&amp; \\\n    useradd -s /bin/bash --uid $USER_UID --gid $USER_GID -m $USERNAME &amp;&amp; \\\n    echo \"Created new user $USERNAME\"\n\n# Add sudo support for the non-root user\nRUN apt-get update &amp;&amp; apt-get install -y sudo \\\n  &amp;&amp; echo $USERNAME ALL=\\(root\\) NOPASSWD:ALL &gt; /etc/sudoers.d/$USERNAME\\\n  &amp;&amp; chmod 0440 /etc/sudoers.d/$USERNAME \\\n  &amp;&amp; rm -rf /var/lib/apt/lists/*\n\n\n\nENV AMENT_CPPCHECK_ALLOW_SLOW_VERSIONS=1\n\n\n# Install the full release\nRUN apt-get update &amp;&amp; apt-get install -y --no-install-recommends \\\n  ros-humble-ros-base \\\n  ros-humble-rmw-cyclonedds-cpp \\\n  ros-dev-tools \\\n  python3-colcon-clean \\\n  ros-humble-ament-* \\\n  &amp;&amp; rm -rf /var/lib/apt/lists/*\nENV DEBIAN_FRONTEND=\n\n# Set up autocompletion for user\nRUN apt-get update &amp;&amp; apt-get install -y --no-install-recommends git-core bash-completion \\\n  &amp;&amp; echo \"if [ -f /opt/ros/${ROS_DISTRO}/setup.bash ]; then source /opt/ros/${ROS_DISTRO}/setup.bash; fi\" &gt;&gt; /home/$USERNAME/.bashrc \\\n  &amp;&amp; echo \"if [ -f /usr/share/colcon_argcomplete/hook/colcon-argcomplete.bash ]; then source /usr/share/colcon_argcomplete/hook/colcon-argcomplete.bash; fi\" &gt;&gt; /home/$USERNAME/.bashrc \\\n  &amp;&amp; rm -rf /var/lib/apt/lists/*\n\n  COPY .tmux.conf /etc/tmux.conf\n</code></pre>","tags":["docker","ros","image"]},{"location":"ROS/dev_environment/ros_docker/docker_images/#downloads","title":"Downloads","text":"<ul> <li>Dockerfile</li> <li>tmux config</li> </ul> Build image<pre><code>docker build -t humble:base -f Dockerfile.humble .\n</code></pre>","tags":["docker","ros","image"]},{"location":"ROS/dev_environment/ros_docker/docker_images/#jazzy","title":"Jazzy","text":"","tags":["docker","ros","image"]},{"location":"ROS/dev_environment/ros_docker/docker_images/#jazzy-base","title":"Jazzy base","text":"<ul> <li>base on cuda 12.4.0 ubuntu 24.04</li> <li>ros-base</li> <li>build tools</li> <li>ros build tools</li> <li>basic system utilities</li> <li>add none-root user</li> <li>gazebo bridge (harmonic)</li> </ul> Dockerfile ROS jazzy  <pre><code>##############################################\n# base on allision https://github.com/athackst/dockerfiles/blob/main/ros2/jazzy-cuda.Dockerfile\n##############################################\n\n###########################################\n# Base image ver 0.1\n###########################################\nFROM nvidia/cuda:12.6.2-cudnn-runtime-ubuntu24.04 AS base\n\nENV DEBIAN_FRONTEND=noninteractive\n\n# Install language\nRUN apt-get update &amp;&amp; apt-get install -y --no-install-recommends \\\n  locales \\\n  &amp;&amp; locale-gen en_US.UTF-8 \\\n  &amp;&amp; update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8 \\\n  &amp;&amp; rm -rf /var/lib/apt/lists/*\nENV LANG=en_US.UTF-8\n\n# Install timezone\nRUN ln -fs /usr/share/zoneinfo/UTC /etc/localtime \\\n  &amp;&amp; export DEBIAN_FRONTEND=noninteractive \\\n  &amp;&amp; apt-get update \\\n  &amp;&amp; apt-get install -y --no-install-recommends tzdata \\\n  &amp;&amp; dpkg-reconfigure --frontend noninteractive tzdata \\\n  &amp;&amp; rm -rf /var/lib/apt/lists/*\n\nRUN apt-get update &amp;&amp; apt-get -y upgrade \\\n    &amp;&amp; rm -rf /var/lib/apt/lists/*\n\n# Install common programs\nRUN apt-get update &amp;&amp; apt-get install -y --no-install-recommends \\\n    curl \\\n    gnupg2 \\\n    lsb-release \\\n    sudo \\\n    software-properties-common \\\n    wget \\\n    &amp;&amp; rm -rf /var/lib/apt/lists/*\n\n# Install ROS2\nRUN sudo add-apt-repository universe \\\n  &amp;&amp; curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg \\\n  &amp;&amp; echo \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $(. /etc/os-release &amp;&amp; echo $UBUNTU_CODENAME) main\" | sudo tee /etc/apt/sources.list.d/ros2.list &gt; /dev/null \\\n  &amp;&amp; apt-get update &amp;&amp; apt-get install -y --no-install-recommends \\\n    ros-jazzy-ros-base \\\n    python3-argcomplete \\\n  &amp;&amp; rm -rf /var/lib/apt/lists/*\n\n################\n# Expose the nvidia driver to allow opengl\n# Dependencies for glvnd and X11.\n################\nRUN apt-get update \\\n &amp;&amp; apt-get install -y -qq --no-install-recommends \\\n  libglvnd0 \\\n  libgl1 \\\n  libglx0 \\\n  libegl1 \\\n  libxext6 \\\n  libx11-6\n\n# Env vars for the nvidia-container-runtime.\nENV NVIDIA_VISIBLE_DEVICES=all\nENV NVIDIA_DRIVER_CAPABILITIES=graphics,utility,compute\nENV QT_X11_NO_MITSHM=1\n\nENV ROS_DISTRO=jazzy\nENV AMENT_PREFIX_PATH=/opt/ros/jazzy\nENV COLCON_PREFIX_PATH=/opt/ros/jazzy\nENV LD_LIBRARY_PATH=/opt/ros/jazzy/lib/x86_64-linux-gnu:/opt/ros/jazzy/lib\nENV PATH=/opt/ros/jazzy/bin:$PATH\nENV PYTHONPATH=/opt/ros/jazzy/local/lib/python3.12/dist-packages:/opt/ros/jazzy/lib/python3.12/site-packages\nENV ROS_PYTHON_VERSION=3\nENV ROS_VERSION=2\nENV ROS_AUTOMATIC_DISCOVERY_RANGE=SUBNET\n\nRUN apt-get update &amp;&amp; apt-get install -y --no-install-recommends \\\n  bash-completion \\\n  build-essential \\\n  cmake \\\n  gdb \\\n  git \\\n  openssh-client \\\n  python3-argcomplete \\\n  python3-pip \\\n  ros-dev-tools \\\n  python3-colcon-clean \\\n  ros-jazzy-ament-* \\\n  vim \\\n  ros-jazzy-rmw-cyclonedds-cpp \\\n  ros-jazzy-ros-gz-bridge \\\n  ros-jazzy-ros-gz-image \\\n  &amp;&amp; rm -rf /var/lib/apt/lists/*\n\nRUN rosdep init || echo \"rosdep already initialized\"\n\nARG USERNAME=user\nARG USER_UID=1000\nARG USER_GID=$USER_UID\n\n# Check if \"ubuntu\" user exists, delete it if it does, then create the desired user\nRUN if getent passwd ubuntu &gt; /dev/null 2&gt;&amp;1; then \\\n        userdel -r ubuntu &amp;&amp; \\\n        echo \"Deleted existing ubuntu user\"; \\\n    fi &amp;&amp; \\\n    groupadd --gid $USER_GID $USERNAME &amp;&amp; \\\n    useradd -s /bin/bash --uid $USER_UID --gid $USER_GID -m $USERNAME &amp;&amp; \\\n    echo \"Created new user $USERNAME\"\n\n# Add sudo support for the non-root user\nRUN apt-get update &amp;&amp; apt-get install -y sudo \\\n  &amp;&amp; echo $USERNAME ALL=\\(root\\) NOPASSWD:ALL &gt; /etc/sudoers.d/$USERNAME\\\n  &amp;&amp; chmod 0440 /etc/sudoers.d/$USERNAME \\\n  &amp;&amp; rm -rf /var/lib/apt/lists/*\n\n# Set up autocompletion for user\nRUN apt-get update &amp;&amp; apt-get install -y --no-install-recommends git-core bash-completion \\\n  &amp;&amp; echo \"if [ -f /opt/ros/${ROS_DISTRO}/setup.bash ]; then source /opt/ros/${ROS_DISTRO}/setup.bash; fi\" &gt;&gt; /home/$USERNAME/.bashrc \\\n  &amp;&amp; echo \"if [ -f /usr/share/colcon_argcomplete/hook/colcon-argcomplete.bash ]; then source /usr/share/colcon_argcomplete/hook/colcon-argcomplete.bash; fi\" &gt;&gt; /home/$USERNAME/.bashrc \\\n  &amp;&amp; rm -rf /var/lib/apt/lists/*\n\nENV DEBIAN_FRONTEND=\nENV AMENT_CPPCHECK_ALLOW_SLOW_VERSIONS=1\n\nCOPY .tmux.conf /etc/tmux.conf\n</code></pre> <p>cuda version</p> <p>Check host cuda version using <code>nvidia-smi</code> , I encountered problems if the docker image cuda version was higher</p>","tags":["docker","ros","image"]},{"location":"ROS/dev_environment/ros_docker/docker_images/#downloads_1","title":"Downloads","text":"<ul> <li>Dockerfile</li> <li>tmux config</li> </ul> Build image<pre><code>docker build -t jazzy:base -f Dockerfile.jazzy .\n</code></pre>","tags":["docker","ros","image"]},{"location":"ROS/dev_environment/ros_docker/docker_images/#usage","title":"usage","text":"<pre><code>docker run --gpus all -it --rm \\\n--net host \\\n--name jazzy \\\n--hostname jazzy \\\n--user user \\\njazzy:base \\\n/bin/bash\n</code></pre>","tags":["docker","ros","image"]},{"location":"ROS/dev_environment/ros_docker/docker_nvidia/","title":"Using docker on Nvidia Jetson for ROS2","text":"<ul> <li>l4t-ros2-docker</li> </ul>","tags":["ros","nvidia","jetson","l4t","docker"]},{"location":"ROS/dev_environment/tutorials/jazzy_harmonic_setup/","title":"Jazzy Harmonic Bridge Setup","text":"","tags":["ros","jazzy","harmonic","setup","vscode","docker"]},{"location":"ROS/dev_environment/tutorials/jazzy_harmonic_setup/#setup","title":"Setup","text":"<ul> <li>jazzy docker image</li> <li>harmonic docker image</li> <li>both run using docker-compose</li> </ul>","tags":["ros","jazzy","harmonic","setup","vscode","docker"]},{"location":"ROS/dev_environment/tutorials/jazzy_harmonic_setup/#gz_transport","title":"gz_transport","text":"<p>gz_transport is Gazebo's communication middleware, used for inter-process communication (IPC) between different Gazebo components \u2014 like sensors, plugins, UI, and even ROS bridges.</p> <ul> <li>GZ_PARTITION: Isolates topic namespaces between different simulations</li> <li>GZ_DISCOVERY_SERVER:  IP address of the main discovery server (usually the Gazebo server machine)</li> <li>GZ_TRANSPORT_IP:  IP address the local process uses to advertise itself to others</li> </ul>","tags":["ros","jazzy","harmonic","setup","vscode","docker"]},{"location":"ROS/dev_environment/tutorials/jazzy_harmonic_setup/#jazzy","title":"jazzy","text":"<ul> <li>Dockerfile</li> <li>docker-compose.yaml</li> </ul>","tags":["ros","jazzy","harmonic","setup","vscode","docker"]},{"location":"ROS/dev_environment/tutorials/jazzy_harmonic_setup/#bridge-configuration","title":"bridge configuration","text":"config/gz_bridge.yaml <pre><code>- ros_topic_name: \"clock\"\n  gz_topic_name: \"clock\"\n  ros_type_name: \"rosgraph_msgs/msg/Clock\"\n  gz_type_name: \"gz.msgs.Clock\"\n  direction: GZ_TO_ROS\n</code></pre> launch/clock.launch.py <pre><code>import os\n\nfrom ament_index_python.packages import get_package_share_directory\nfrom launch import LaunchDescription\nfrom launch.actions import DeclareLaunchArgument\nfrom launch.actions import IncludeLaunchDescription\nfrom launch.launch_description_sources import PythonLaunchDescriptionSource\nfrom launch.substitutions import LaunchConfiguration\nfrom launch_ros.actions import Node\n\nPACKAGE_NAME = 'gz_tutorial'\n\ndef generate_launch_description():\n    ld = LaunchDescription()\n\n    bridge_params = os.path.join(get_package_share_directory(PACKAGE_NAME),'config','gz_bridge.yaml')\n    ros_gz_bridge = Node(\n        package=\"ros_gz_bridge\",\n        executable=\"parameter_bridge\",\n        arguments=[\n            '--ros-args',\n            '-p',\n            f'config_file:={bridge_params}',\n        ],\n        parameters=[\n            {'use_sim_time': True},\n        ],\n    )\n\n    ld.add_action(ros_gz_bridge)\n\n\n    return ld\n</code></pre>","tags":["ros","jazzy","harmonic","setup","vscode","docker"]},{"location":"ROS/dev_environment/tutorials/jazzy_harmonic_setup/#harmonic","title":"harmonic","text":"<ul> <li>Dockerfile</li> <li>docker-compose.yaml</li> </ul>","tags":["ros","jazzy","harmonic","setup","vscode","docker"]},{"location":"ROS/dev_environment/vscode_settings_and_extension/","title":"VSCode settings, extension and other configuration for ROS users","text":"","tags":["ros","vscode","settings","extensions","tasks"]},{"location":"ROS/dev_environment/vscode_settings_and_extension/#vscode-extension","title":"VSCode extension","text":"ext language / tool ms-python.python python ms-vscode.cpptools cpp twxs.cmake cmake redhat.vscode-xml xml redhat.vscode-yaml yaml TOOLS albert.tabout tab out actboy168.tasks tasks streetsidesoftware.code-spell-checker speller git mhutchie.git-graph git graph OS dlech.chmod set executable bit ROS nonanonno.vscode-ros2 Syntax highlighting for ros2 interface files (.msg, .srv, .action) JaehyunShim.vscode-ros2 Toolset around ROS2 URDF smilerobotics.urdf URDF support for VSCode <pre><code>\"ms-python.python\",\n\"ms-vscode.cpptools\",\n\"twxs.cmake\",\n\"redhat.vscode-xml\",\n\"redhat.vscode-yaml\",\n\"albert.tabout\",\n\"actboy168.tasks\",\n\"streetsidesoftware.code-spell-checker\",\n\"mhutchie.git-graph\",\n\"rioj7.command-variable\",\n\"dlech.chmod\",\n\"mkloubert.vscode-deploy-reloaded\",\n\"nonanonno.vscode-ros2\",\n\"smilerobotics.urdf\",\n\"JaehyunShim.vscode-ros2\"\n</code></pre>","tags":["ros","vscode","settings","extensions","tasks"]},{"location":"ROS/dev_environment/vscode_settings_and_extension/#vscode-tasks","title":"VSCode Tasks","text":"tasks.json<pre><code>{\n    \"version\": \"2.0.0\",\n    \"tasks\": [\n        {\n            \"label\": \"Colcon\",\n            \"type\": \"shell\",\n            \"command\": \"colcon build\",\n            \"problemMatcher\": [],\n            \"group\": {\n                \"isDefault\": true,\n                \"kind\": \"build\"\n            }\n        }\n    ]\n}\n</code></pre>","tags":["ros","vscode","settings","extensions","tasks"]},{"location":"ROS/dev_environment/vscode_settings_and_extension/#vscode-settings","title":"VSCode settings","text":"","tags":["ros","vscode","settings","extensions","tasks"]},{"location":"ROS/dev_environment/vscode_settings_and_extension/#shell","title":"Shell","text":"","tags":["ros","vscode","settings","extensions","tasks"]},{"location":"ROS/dev_environment/vscode_settings_and_extension/#run-script-for-every-new-shell","title":"Run script for every new shell","text":"settings<pre><code>\"terminal.integrated.profiles.linux\": {\n        \"bash_with_ros\": {\n            \"path\": \"bash\",\n            \"icon\": \"terminal-bash\",\n            \"args\": [\n                \"--rcfile\",\n                \"${workspaceFolder}/bashrc\"\n            ]\n        }\n    },\n\"terminal.integrated.defaultProfile.linux\": \"bash_with_ros\"\n</code></pre> bashrc<pre><code>source install/setup.bash\n</code></pre>","tags":["ros","vscode","settings","extensions","tasks"]},{"location":"ROS/dev_environment/vscode_settings_and_extension/#python","title":"Python","text":"<p>python.analysis.extraPaths: The python.analysis.extraPaths setting in Visual Studio Code is used to specify additional directories that the Python language server (Pylance) should include when analyzing your code.</p> <p>python.autoComplete.extraPaths: The python.autoComplete.extraPaths setting in Visual Studio Code is used to specify additional directories that the Python extension should include when providing autocomplete suggestions.</p> <pre><code>{\n    \"python.autoComplete.extraPaths\": [\n        \"${workspaceFolder}/\",\n        \"/opt/ros/humble/lib/python3.10/site-packages/\",\n        \"/opt/ros/humble/local/lib/python3.10/dist-packages\"\n\n    ],\n\n    \"python.analysis.extraPaths\": [\n        \"${workspaceFolder}/\",\n        \"/opt/ros/humble/lib/python3.10/site-packages/\",\n        \"/opt/ros/humble/local/lib/python3.10/dist-packages/\"\n    ]\n}\n</code></pre>","tags":["ros","vscode","settings","extensions","tasks"]},{"location":"ROS/dev_environment/vscode_settings_and_extension/#cpp","title":"Cpp","text":"c_cpp_properties.json<pre><code>{\n    \"configurations\": [\n        {\n            \"name\": \"ROS 2\",\n            \"includePath\": [\n                \"${workspaceFolder}/**\",\n                \"/opt/ros/humble/include/**\",\n                \"/usr/include/**\",\n                \"/usr/local/include/**\"\n            ],\n            \"defines\": [],\n            \"compilerPath\": \"/usr/bin/gcc\",\n            \"cStandard\": \"gnu17\",\n            \"cppStandard\": \"gnu++17\",\n            \"intelliSenseMode\": \"linux-gcc-x64\",\n            \"browse\": {\n                \"path\": [\n                    \"${workspaceFolder}/**\",\n                    \"/opt/ros/humble/include/**\",\n                    \"/usr/include/**\",\n                    \"/usr/local/include/**\"\n                ],\n                \"limitSymbolsToIncludedHeaders\": true,\n                \"databaseFilename\": \"\"\n            }\n        }\n    ],\n    \"version\": 4\n}\n</code></pre>","tags":["ros","vscode","settings","extensions","tasks"]},{"location":"ROS/python/","title":"ROS Python","text":"<p>pytest</p> <p>ROS2 python tutorials</p> <p>TBD</p> <ul> <li>using ament_cmake to create python package</li> </ul>"},{"location":"ROS/python/python_ament_cmake/","title":"python ament cmake","text":"<p>Use ament_cmake to create python package</p> <ul> <li>Create ament package</li> <li>Add folder <code>my_cmake_py_pkg</code> </li> <li>Add <code>__init__.py</code> in <code>my_cmake_py_pkg</code> to mark as python module</li> <li>Add node python file <code>my_node.py</code></li> <li>Set <code>my_node.py</code> as executable</li> <li>Add shabang <code>#!/usr/bin/env python3</code> in <code>my_node.py</code></li> <li>Edit to <code>CMakeLists.txt</code></li> <li>Edit <code>package.xml</code></li> </ul>","tags":["ros","python","cmake","ament"]},{"location":"ROS/python/python_ament_cmake/#create-package","title":"Create package","text":"<pre><code>ros2 pkg create my_cmake_py_pkg --build-type ament_cmake\n</code></pre>","tags":["ros","python","cmake","ament"]},{"location":"ROS/python/python_ament_cmake/#cmakeliststxt","title":"CMakeLists.txt","text":"CMakeLists.txt<pre><code>cmake_minimum_required(VERSION 3.8)\nproject(my_cmake_py_pkg)\n\nif(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES \"Clang\")\n  add_compile_options(-Wall -Wextra -Wpedantic)\nendif()\n\n# find dependencies\nfind_package(ament_cmake REQUIRED)\nfind_package(ament_cmake_python REQUIRED)\n\n# install python package\nament_python_install_package(${PROJECT_NAME})\n\nset(NODES\n  my_cmake_py_pkg/my_node.py\n)\n\n\ninstall(PROGRAMS\n    ${NODES}\nDESTINATION lib/${PROJECT_NAME}\n)\n\n\nament_package()\n</code></pre>","tags":["ros","python","cmake","ament"]},{"location":"ROS/python/python_ament_cmake/#packagexml","title":"package.xml","text":"<p>Add <code>ament_cmake_python</code> in <code>buildtool_depend</code></p> <pre><code>&lt;buildtool_depend&gt;ament_cmake_python&lt;/buildtool_depend&gt;\n</code></pre>","tags":["ros","python","cmake","ament"]},{"location":"ROS/python/python_ament_cmake/#python-nodes","title":"python nodes","text":"<ul> <li>Create folder with the package name</li> <li>Create <code>__init__.py</code> in the folder</li> <li>Every node should have <code>#!/usr/bin/env python3</code> as first line</li> <li>Make the node executable <code>chmod +x my_node.py</code></li> </ul> <pre><code>#!/usr/bin/env python3\n\nimport rclpy\nfrom rclpy.node import Node\n\nclass MyNode(Node):\n    def __init__(self):\n        node_name=\"minimal\"\n        super().__init__(node_name)\n\n\ndef main(args=None):\n    rclpy.init(args=args)\n    node = MyNode()\n    rclpy.spin(node)\n    node.destroy_node()\n    rclpy.shutdown()\n\nif __name__ == '__main__':\n    main()\n</code></pre>","tags":["ros","python","cmake","ament"]},{"location":"ROS/python/python_ament_cmake/#usage","title":"usage","text":"<pre><code>ros2 run my_cmake_py_pkg my_node.py\n</code></pre>","tags":["ros","python","cmake","ament"]},{"location":"ROS/python/python_ament_cmake/#vscode-tips","title":"VScode tips","text":"<p>Install <code>chmod</code> extension to set handle executable bit on file</p> <p>chmod extension</p>","tags":["ros","python","cmake","ament"]},{"location":"ROS/python/ros_python/","title":"ROS2 python tutorials and tips","text":"<p>parameters</p> <p>node life cycle</p> <p>TBD</p>","tags":["python","ros","tutorials"]},{"location":"ROS/python/ros_python/lifecycle_node/","title":"ROS2 lifecycle node","text":"<p>Very good reference</p>","tags":["ros","python","lifecycle"]},{"location":"ROS/python/ros_python/parameters/","title":"ROS2 parameters","text":"","tags":["ros","python","parameters"]},{"location":"ROS/python/ros_python/parameters/#parameters-hierarchy","title":"Parameters Hierarchy","text":"<ul> <li>Declare node with parameters name that using dot(.) to describe the yaml struct</li> <li>Create struct yaml file</li> </ul> params.yaml<pre><code>/param_demo:\n  ros__parameters:\n    camera:\n      resolution:\n        width: 640\n    use_sim_time: false\n</code></pre> simple_node.py<pre><code>#!/usr/bin/env python3\n\nimport rclpy\nfrom rclpy.node import Node\n\nNAME = \"param_demo\"\n\nclass ParamDemo(Node):\n    def __init__(self):\n        super().__init__(NAME)\n        self.param1 = self.declare_parameter(\"camera.resolution.width\", 640)\n        self.t = self.create_timer(1.0, self.timer_handler)\n\n    def timer_handler(self):\n        self.get_logger().info(f\"{self.get_parameter('camera.resolution.width').value}\")\n\ndef main(args=None):\n    rclpy.init(args=args)\n    node = ParamDemo()\n    rclpy.spin(node)\n\n    node.destroy_node()\n    rclpy.shutdown()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> run node with parameter file<pre><code>ros2 run my_package my_node --ros-args --params-file params.yaml\n</code></pre>","tags":["ros","python","parameters"]},{"location":"ROS/python/ros_python/parameters/#usage","title":"usage","text":"update from cli<pre><code>ros2 param set /param_demo camera.resolution.width 1200\n</code></pre> <p>update string node with numeric value</p> <p>The failure happens only if we set the parameter value as string numeric (number in Quotation marks)</p> <pre><code># parameter declaration\nself.param1 = self.declare_parameter(\"param1\", value=\"1\")\n</code></pre> <pre><code>ros2 param set /param_demo param1 \"12\"\n# \nSetting parameter failed: Wrong parameter type, expected 'Type.STRING' got 'Type.INTEGER'\n</code></pre> <pre><code># use double quotation\nros2 param set /param_demo param1 '\"12\"'\n</code></pre>","tags":["ros","python","parameters"]},{"location":"ROS/python/ros_unit_test/","title":"ROS2 Python Unit Test","text":"<p>base on</p>","tags":["ros2","python","test","pytest"]},{"location":"ROS/python/ros_unit_test/#simple-very-simple-demo","title":"Simple very simple demo","text":"<p>Show how to use pytest in ros2 python package using ament_cmake </p>","tags":["ros2","python","test","pytest"]},{"location":"ROS/python/ros_unit_test/#package","title":"package","text":"<p>Using <code>ament_cmake</code> to create a python package</p> <pre><code>\u251c\u2500\u2500 CMakeLists.txt\n\u251c\u2500\u2500 package.xml\n\u251c\u2500\u2500 ros_py\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2514\u2500\u2500 simple_node.py\n\u2514\u2500\u2500 test\n    \u2514\u2500\u2500 test_simple.py\n</code></pre>","tags":["ros2","python","test","pytest"]},{"location":"ROS/python/ros_unit_test/#pytest-test","title":"pytest test","text":"simple_node.py<pre><code>def test_math():\n    assert 2 + 2 == 4\n</code></pre>","tags":["ros2","python","test","pytest"]},{"location":"ROS/python/ros_unit_test/#cmakeliststxt","title":"CMakeLists.txt","text":"<ul> <li>Add <code>ament_add_pytest_test</code> to the CMakeLists.txt file to run the test</li> </ul> <pre><code>if(BUILD_TESTING)\n  find_package(ament_cmake_pytest REQUIRED)\n  ament_add_pytest_test(test_math test/test_simple.py)\nendif()\n</code></pre>","tags":["ros2","python","test","pytest"]},{"location":"ROS/python/ros_unit_test/#using-colcon","title":"using colcon","text":"<pre><code># run package test\ncolcon test --packages-select ros_py  --event-handlers console_direct+\n\n# run specific test\ncolcon test --packages-select ros_py --pytest-args -k test_math --event-handlers console_direct+\n</code></pre>","tags":["ros2","python","test","pytest"]},{"location":"ROS/python/ros_unit_test/#reference","title":"Reference","text":"<ul> <li>Integration and unit testing in ROS 2</li> </ul>","tags":["ros2","python","test","pytest"]},{"location":"ROS/ros2_messages/","title":"ROS2 Messages","text":"<p>Message with stamped and covariance</p> <p>Custom interface</p> <p>TBD</p>","tags":["ros2","messages","interface"]},{"location":"ROS/ros2_messages/custom_message/","title":"ROS2 Custom interface","text":"<ul> <li>Create <code>ament_cmake</code> package</li> <li>Create folders <code>srv</code> and <code>msg</code></li> <li>Update <code>CMakeLists.txt</code> and <code>package.xml</code></li> <li>VSCode tips</li> </ul> <pre><code>\u251c\u2500\u2500 CMakeLists.txt\n\u251c\u2500\u2500 msg\n\u2502   \u2514\u2500\u2500 Demo.msg\n\u251c\u2500\u2500 package.xml\n\u2514\u2500\u2500 srv\n    \u2514\u2500\u2500 Demo.srv\n</code></pre> Demo.msg<pre><code>int32 data\n</code></pre> Demo.srv<pre><code>---\nstring message\nbool success\n</code></pre>","tags":["ros","interface"]},{"location":"ROS/ros2_messages/custom_message/#cmakeliststxt-and-packagexml","title":"CMakelists.txt and package.xml","text":"CMakeLists.txt<pre><code>cmake_minimum_required(VERSION 3.8)\nproject(pkg_interface)\n\nif(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES \"Clang\")\n  add_compile_options(-Wall -Wextra -Wpedantic)\nendif()\n\n# find dependencies\nfind_package(ament_cmake REQUIRED)\nfind_package(rosidl_default_generators REQUIRED)\n\nset(MESSAGES\n  \"msg/Demo.msg\"\n)\n\nset(SERVICES \n  \"srv/Demo.srv\"\n)\n\n\nrosidl_generate_interfaces(${PROJECT_NAME}\n  ${MESSAGES}\n  ${SERVICES} \n)\n\n\nament_export_dependencies(rosidl_default_runtime)\n\nament_package()\n</code></pre> package.xml<pre><code>&lt;?xml version=\"1.0\"?&gt;\n&lt;?xml-model href=\"http://download.ros.org/schema/package_format3.xsd\" schematypens=\"http://www.w3.org/2001/XMLSchema\"?&gt;\n&lt;package format=\"3\"&gt;\n  &lt;name&gt;pkg_interface&lt;/name&gt;\n  &lt;version&gt;0.0.1&lt;/version&gt;\n  &lt;description&gt;Simple interface&lt;/description&gt;\n  &lt;maintainer email=\"robo2020@gmail.com\"&gt;user&lt;/maintainer&gt;\n  &lt;license&gt;Apache-2.0&lt;/license&gt;\n\n  &lt;buildtool_depend&gt;ament_cmake&lt;/buildtool_depend&gt;\n\n  &lt;buildtool_depend&gt;rosidl_default_generators&lt;/buildtool_depend&gt;\n  &lt;exec_depend&gt;rosidl_default_runtime&lt;/exec_depend&gt;\n  &lt;member_of_group&gt;rosidl_interface_packages&lt;/member_of_group&gt;\n\n  &lt;export&gt;\n    &lt;build_type&gt;ament_cmake&lt;/build_type&gt;\n  &lt;/export&gt;\n&lt;/package&gt;\n</code></pre>","tags":["ros","interface"]},{"location":"ROS/ros2_messages/custom_message/#vscode-tips","title":"VSCode tips","text":"<p>Fix pylance extra path</p> <pre><code>\"${workspaceFolder}/install/&lt;package_name&gt;/local/lib/python3.10/\n</code></pre> <pre><code>\"python.analysis.extraPaths\": [\n        \"${workspaceFolder}/\",\n        \"${workspaceFolder}/install/pkg_interface/local/lib/python3.10/dist-packages/\",\n        \"/opt/ros/humble/lib/python3.10/site-packages/\",\n        \"/opt/ros/humble/local/lib/python3.10/dist-packages/\"\n    ]\n</code></pre>","tags":["ros","interface"]},{"location":"ROS/ros2_messages/messages/","title":"ROS2 Messages","text":"","tags":["ros2","message","stamped","covariance","PoseWithCovariance"]},{"location":"ROS/ros2_messages/messages/#message-with-covariance","title":"Message with covariance","text":"","tags":["ros2","message","stamped","covariance","PoseWithCovariance"]},{"location":"ROS/ros2_messages/messages/#demo-posewithcovariance","title":"Demo: PoseWithCovariance","text":"<p>geometry_msgs/msg/PoseWithCovariance</p> <pre><code>ros2 interface show geometry_msgs/msg/PoseWithCovariance\n</code></pre> <ul> <li>Pose</li> <li>position (x,y,z)</li> <li>orientation (q)</li> <li>covariance (float64[36])</li> </ul> <p>Covariance Matrix : A 6*6 matrix representing uncertainties and correlations for the 6 degree of freedom (DoF)     - x,y,z     - roll, pith, yaw</p> <pre><code>pose_covariance = [\n    0.0025, 0.0, 0.0, 0.0, 0.0, 0.0,  # x\n    0.0, 0.0025, 0.0, 0.0, 0.0, 0.0,  # y\n    0.0, 0.0, 1e3, 0.0, 0.0, 0.0,   # z\n    0.0, 0.0, 0.0, 1e3, 0.0, 0.0,   # roll\n    0.0, 0.0, 0.0, 0.0, 1e3, 0.0,   # pitch\n    0.0, 0.0, 0.0, 0.0, 0.0, 0.0001  # yaw\n]\n</code></pre>","tags":["ros2","message","stamped","covariance","PoseWithCovariance"]},{"location":"ROS/ros2_resource/","title":"ROS2 Good resources","text":"","tags":["ros","resource"]},{"location":"ROS/ros2_resource/#blogs-and-web-sites","title":"Blogs and WEB Sites","text":"","tags":["ros","resource"]},{"location":"ROS/ros2_resource/#githubs","title":"Githubs","text":"","tags":["ros","resource"]},{"location":"ROS/ros2_resource/#autonomous-mobile-robots","title":"Autonomous Mobile Robots","text":"<p>This repository contains an implementation of the Autonomous Mobile Robots course for ROCV master's program at Innopolis University. The course is instructed by Geesara Prathap. So, this repository contains the course material besides my solutions for the assignments. In addition, I developed PID, LQR controllers for a differential drive robot. Trajectory-tracking error model was developed for applying MPC controller.</p> <p>The course contents includes:</p> <ul> <li>Motion control (Kinematics, control, and dubins path planning).</li> <li>Estimation (Kalman filter, extended kalman filter, particle filter).</li> <li>Localization (Monte carlo, and ekf localization).</li> </ul>","tags":["ros","resource"]},{"location":"ROS/ros_basic/","title":"ROS Basic","text":"<p>Pub/Sub</p> <p>Services</p> <p>QoS</p> <p>QoS</p> <p></p>"},{"location":"ROS/ros_basic/ros_interface/","title":"ROS2 interfaces","text":"<p>Messages are the fundamental units of data that are exchanged between nodes using topics. They are part of the ROS 2 communication interfaces, which also include services and actions.</p>","tags":["ros","interfaces","message"]},{"location":"ROS/ros_basic/ros_interface/#msg-and-srv-files","title":"msg and srv files","text":"<p>A message in ROS 2 is a typed data structure  Each line define one field <code>&lt;type&gt; &lt;name&gt;</code> message (service and action) files can include</p> <ul> <li>primitive types: int32, float64, string</li> <li>compound predefine message or custom message</li> <li>arrays: int32[]</li> </ul>","tags":["ros","interfaces","message"]},{"location":"ROS/ros_basic/ros_interface/#create-custom-message","title":"Create custom message","text":"","tags":["ros","interfaces","message"]},{"location":"ROS/ros_basic/ros_interface/#cmake","title":"cmake","text":"<pre><code>cmake_minimum_required(VERSION 3.8)\nproject(media_manager_interfaces)\n\nif(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES \"Clang\")\n  add_compile_options(-Wall -Wextra -Wpedantic)\nendif()\n\n# find dependencies\nfind_package(ament_cmake REQUIRED)\nfind_package(rosidl_default_generators REQUIRED)\n\nset(msg_files\n\n)\nset(srv_files\n  \"srv/GetMediaFileList.srv\"\n  )\n\n\nrosidl_generate_interfaces(${PROJECT_NAME}\n  ${msg_files}\n  ${srv_files}\n)\n\nament_export_dependencies(rosidl_default_runtime)\n\nament_package()\n</code></pre>","tags":["ros","interfaces","message"]},{"location":"ROS/ros_basic/ros_interface/#packagexml","title":"package.xml","text":"<p>Add this lines before <code>&lt;export&gt;</code> tag</p> <pre><code>  &lt;depend&gt;rosidl_default_generators&lt;/depend&gt;\n  &lt;member_of_group&gt;rosidl_interface_packages&lt;/member_of_group&gt;\n</code></pre>","tags":["ros","interfaces","message"]},{"location":"ROS/ros_basic/ros_pub_sub/","title":"ROS Pub/ Sub","text":"<ul> <li>Node Topics name and remap</li> </ul>","tags":["ros","pub","sub"]},{"location":"ROS/ros_basic/ros_pub_sub/node_topic_nameing/","title":"ROS2 Topic name rename and namespace","text":"","tags":["ros","topic","nameing","remap","namespace"]},{"location":"ROS/ros_basic/ros_pub_sub/node_topic_nameing/#remap","title":"remap","text":"<pre><code>ros2 run package node --ros-args -r old_topic:=new_topic\n</code></pre>","tags":["ros","topic","nameing","remap","namespace"]},{"location":"ROS/ros_basic/ros_pub_sub/node_topic_nameing/#demo","title":"Demo","text":"<ul> <li>Two nodes</li> <li>pub publish string message in <code>pub_topic</code> </li> <li>sub subscribe to string message in <code>sub_topic</code></li> </ul> pub sub code pub node<pre><code>#!/usr/bin/env python3\n\n\nimport rclpy\nfrom rclpy.node import Node\nfrom std_msgs.msg import String\n\nTOPIC = \"pub_topic\"\n\nclass PubNode(Node):\n    def __init__(self):\n        node_name=\"pub\"\n        super().__init__(node_name)\n        self.pub = self.create_publisher(String, TOPIC,10)\n        self.timer = self.create_timer(1.0, self.timer_handler)\n        self.get_logger().info(\"Hello PUB\")\n\n    def timer_handler(self):\n        msg = String()\n        msg.data = \"hello\"\n        self.pub.publish(msg)\n\ndef main(args=None):\n    rclpy.init(args=args)\n    node = PubNode()\n    rclpy.spin(node)\n    node.destroy_node()\n    rclpy.shutdown()\n\nif __name__ == '__main__':\n    main()\n</code></pre> sub node<pre><code>#!/usr/bin/env python3\n\n\nimport rclpy\nfrom rclpy.node import Node\nfrom std_msgs.msg import String\n\nTOPIC = \"sub_topic\"\n\nclass SubNode(Node):\n    def __init__(self):\n        node_name=\"pub\"\n        super().__init__(node_name)\n        self.pub = self.create_subscription(String, TOPIC, self.callback, 10)\n        self.get_logger().info(\"Hello SUB\")\n\n    def callback(self, msg):\n        self.get_logger().info(msg.data)\n\ndef main(args=None):\n    rclpy.init(args=args)\n    node = SubNode()\n    rclpy.spin(node)\n    node.destroy_node()\n    rclpy.shutdown()\n\nif __name__ == '__main__':\n    main()\n</code></pre>","tags":["ros","topic","nameing","remap","namespace"]},{"location":"ROS/ros_basic/ros_pub_sub/node_topic_nameing/#usage","title":"usage","text":"<ul> <li>remap subscriber node</li> </ul> terminal1<pre><code>ros2 run g_stream pub.py\n</code></pre> terminal2<pre><code>ros2 run g_stream sub.py --ros-args -r sub_topic:=pub_topic\n</code></pre> <ul> <li>remap pub node</li> </ul> terminal1<pre><code>ros2 run g_stream pub.py --ros-args -r pub_topic:=sub_topic\n</code></pre> terminal2<pre><code>ros2 run g_stream sub.py \n</code></pre>","tags":["ros","topic","nameing","remap","namespace"]},{"location":"ROS/ros_basic/ros_pub_sub/node_topic_nameing/#namespace","title":"Namespace","text":"","tags":["ros","topic","nameing","remap","namespace"]},{"location":"ROS/ros_basic/ros_pub_sub/node_topic_nameing/#change-from-cli","title":"change from CLI","text":"<pre><code>ros2 run g_stream pub.py --ros-args -r __ns:=/ns1\n</code></pre> <pre><code>ros2 topic list\n#\n/ns1/pub_topic\n</code></pre>","tags":["ros","topic","nameing","remap","namespace"]},{"location":"ROS/ros_basic/ros_qos/","title":"Playing with ROS QoS","text":"QoS Parameter Description Options Reliability Defines message delivery guarantees RELIABLE (guaranteed delivery, higher latency)  BEST_EFFORT (lower latency, no guarantee) Durability Determines if old messages are available to late subscribers VOLATILE (no history, new subscribers get only new messages)   TRANSIENT_LOCAL (stores past messages for late joiners) History Controls how many messages are stored before being sent KEEP_LAST(N) (stores last N messages)  KEEP_ALL (stores all messages, limited by memory) Depth Number of messages to store in KEEP_LAST(N) Any positive integer (default 10) Deadline Maximum allowed time between consecutive messages Duration (e.g., 1s, 500ms); triggers an event if missed Lifespan How long messages remain valid before being discarded Duration in sec (default infinity) Liveliness Ensures publishers are active AUTOMATIC (system-managed) MANUAL_BY_TOPIC  (publisher must assert liveliness) Lease  Duration Maximum time a publisher can remain silent before being considered inactive Duration (e.g., 2s, 5s)","tags":["ros","qos"]},{"location":"ROS/ros_basic/ros_qos/#profiles","title":"Profiles","text":"<p>rclpy define predefine profiles that define in the rmw</p> <ul> <li>qos_profile_system_default</li> <li>qos_profile_sensor_data</li> </ul> rmw profile !!! note \"humble version\"     [qos_profiles.h](https://github.com/ros2/rmw/blob/humble/rmw/include/rmw/qos_profiles.h)  <pre><code>static const rmw_qos_profile_t rmw_qos_profile_system_default =\n{\n  RMW_QOS_POLICY_HISTORY_SYSTEM_DEFAULT,\n  RMW_QOS_POLICY_DEPTH_SYSTEM_DEFAULT,\n  RMW_QOS_POLICY_RELIABILITY_SYSTEM_DEFAULT,\n  RMW_QOS_POLICY_DURABILITY_SYSTEM_DEFAULT,\n  RMW_QOS_DEADLINE_DEFAULT,\n  RMW_QOS_LIFESPAN_DEFAULT,\n  RMW_QOS_POLICY_LIVELINESS_SYSTEM_DEFAULT,\n  RMW_QOS_LIVELINESS_LEASE_DURATION_DEFAULT,\n  false\n};\n\nstatic const rmw_qos_profile_t rmw_qos_profile_sensor_data =\n{\n  RMW_QOS_POLICY_HISTORY_KEEP_LAST,\n  5,\n  RMW_QOS_POLICY_RELIABILITY_BEST_EFFORT,\n  RMW_QOS_POLICY_DURABILITY_VOLATILE,\n  RMW_QOS_DEADLINE_DEFAULT,\n  RMW_QOS_LIFESPAN_DEFAULT,\n  RMW_QOS_POLICY_LIVELINESS_SYSTEM_DEFAULT,\n  RMW_QOS_LIVELINESS_LEASE_DURATION_DEFAULT,\n  false\n};\n</code></pre>","tags":["ros","qos"]},{"location":"ROS/ros_basic/ros_qos/#demos","title":"Demos","text":"","tags":["ros","qos"]},{"location":"ROS/ros_basic/ros_qos/#publisher-queue-size","title":"Publisher Queue size","text":"<p>Simulate publisher queue size control for late binding subscribers</p>","tags":["ros","qos"]},{"location":"ROS/ros_basic/ros_qos/#qos_profile_system_default","title":"qos_profile_system_default","text":"<p>In this profile the depth is zero and from result we saw that the subscribe not receives any message from history</p> demo code <pre><code>#!/usr/bin/env python3\n\n\nimport rclpy\nfrom rclpy.executors import MultiThreadedExecutor\nfrom rclpy.node import Node\nfrom std_msgs.msg import String\nfrom rclpy.qos import QoSProfile, ReliabilityPolicy, DurabilityPolicy, HistoryPolicy, LivelinessPolicy\nfrom rclpy.qos import qos_profile_system_default, qos_profile_sensor_data\nfrom rclpy.duration import Duration  # Correct import\n\nTOPIC = \"test_topic\"\n\nSUB_START_DELAY = 5\nPUB_RATE = 1\n\nclass SubNode(Node):\n    def __init__(self):\n        super().__init__(\"sub_node\")\n        self.sub_start_delay = self.create_timer(SUB_START_DELAY, self.timer_handler)\n\n        self.get_logger().info(\"Hello SUB\")\n\n    def timer_handler(self):\n        self.destroy_timer(self.sub_start_delay)\n        self.get_logger().info(\"--Create subscriber--\")\n        self.create_subscription(String, TOPIC, self.callback, qos_profile=qos_profile_system_default)\n\n\n    def callback(self, msg):\n        self.get_logger().info(f\"Received: {msg.data}\")\n\nclass PubNode(Node):\n    def __init__(self):\n        super().__init__(\"pub_node\")\n        self.counter = 0\n        self.pub = self.create_publisher(String, TOPIC, qos_profile=qos_profile_system_default)\n        self.get_logger().info(f\"{self.pub.qos_profile}\")\n        self.timer = self.create_timer(PUB_RATE, self.timer_handler)\n\n        self.get_logger().info(\"Hello PUB\")\n\n    def timer_handler(self):\n        msg = String()\n        msg.data = f\"hello {self.counter}\"\n        self.counter += 1\n        self.pub.publish(msg)\n\ndef main(args=None):\n    rclpy.init(args=args)\n    pub_node = PubNode()\n    sub_node = SubNode()\n    executer = MultiThreadedExecutor()\n    executer.add_node(pub_node)\n    executer.add_node(sub_node)\n\n    executer.spin()\n\n\n    rclpy.shutdown()\n\nif __name__ == '__main__':\n    main()\n</code></pre> result<pre><code>[INFO] [1742102162.025442844] [pub_node]: Hello PUB\n[INFO] [1742102162.026666484] [sub_node]: Hello SUB\n[INFO] [1742102167.029141089] [sub_node]: --Create subscriber--\n[INFO] [1742102168.029089360] [sub_node]: Received: hello 5\n[INFO] [1742102169.028827506] [sub_node]: Received: hello 6\n[INFO] [1742102170.029061624] [sub_node]: Received: hello 7\n[INFO] [1742102171.029371443] [sub_node]: Received: hello 8\n[INFO] [1742102172.028809769] [sub_node]: Received: hello 9\n[INFO] [1742102173.028644708] [sub_node]: Received: hello 10\n</code></pre>","tags":["ros","qos"]},{"location":"ROS/ros_basic/ros_qos/#qos_profile_sensor_data","title":"qos_profile_sensor_data","text":"<p>In this profile the depth set to 5 but the the durability set to VOLATILE (no history, new subscribers get only new messages), the result saw that late subscriber got only new messages</p> demo code <pre><code>#!/usr/bin/env python3\n\n\nimport rclpy\nfrom rclpy.executors import MultiThreadedExecutor\nfrom rclpy.node import Node\nfrom std_msgs.msg import String\nfrom rclpy.qos import QoSProfile, ReliabilityPolicy, DurabilityPolicy, HistoryPolicy, LivelinessPolicy\nfrom rclpy.qos import qos_profile_system_default, qos_profile_sensor_data\nfrom rclpy.duration import Duration  # Correct import\n\nTOPIC = \"test_topic\"\n\nSUB_START_DELAY = 5\nPUB_RATE = 1\n\nclass SubNode(Node):\n    def __init__(self):\n        super().__init__(\"sub_node\")\n        self.sub_start_delay = self.create_timer(SUB_START_DELAY, self.timer_handler)\n\n        self.get_logger().info(\"Hello SUB\")\n\n    def timer_handler(self):\n        self.destroy_timer(self.sub_start_delay)\n        self.get_logger().info(\"--Create subscriber--\")\n        self.create_subscription(String, TOPIC, self.callback, qos_profile=qos_profile_sensor_data)\n\n\n    def callback(self, msg):\n        self.get_logger().info(f\"Received: {msg.data}\")\n\nclass PubNode(Node):\n    def __init__(self):\n        super().__init__(\"pub_node\")\n        self.counter = 0\n        self.pub = self.create_publisher(String, TOPIC, qos_profile=qos_profile_sensor_data)\n        self.get_logger().info(f\"{self.pub.qos_profile}\")\n        self.timer = self.create_timer(PUB_RATE, self.timer_handler)\n\n        self.get_logger().info(\"Hello PUB\")\n\n    def timer_handler(self):\n        msg = String()\n        msg.data = f\"hello {self.counter}\"\n        self.counter += 1\n        self.pub.publish(msg)\n\ndef main(args=None):\n    rclpy.init(args=args)\n    pub_node = PubNode()\n    sub_node = SubNode()\n    executer = MultiThreadedExecutor()\n    executer.add_node(pub_node)\n    executer.add_node(sub_node)\n\n    executer.spin()\n\n\n    rclpy.shutdown()\n\nif __name__ == '__main__':\n    main()\n</code></pre> result<pre><code>[INFO] [1742103996.715762333] [pub_node]: Hello PUB\n[INFO] [1742103996.717355657] [sub_node]: Hello SUB\n[INFO] [1742104001.719799187] [sub_node]: --Create subscriber--\n[INFO] [1742104002.713190568] [sub_node]: Received: hello 5\n[INFO] [1742104003.713665142] [sub_node]: Received: hello 6\n[INFO] [1742104004.713264404] [sub_node]: Received: hello 7\n[INFO] [1742104005.713393306] [sub_node]: Received: hello 8\n[INFO] [1742104006.713138227] [sub_node]: Received: hello 9\n[INFO] [1742104007.713481727] [sub_node]: Received: hello 10\n</code></pre>","tags":["ros","qos"]},{"location":"ROS/ros_basic/ros_qos/#queue-and-durability","title":"Queue and Durability","text":"<p>Allow late subscriber to get history</p> <ul> <li>Durability: TRANSIENT_LOCAL stores past messages for late joiners</li> <li>depth: 10</li> </ul> <p>Subscriber QOS settings The queue depth in the subscriber refer to the number of messages the subscriber can store before processing them The durability must be transient local because in VOLATILE means it won't receive old message</p> <ul> <li>depth: 10</li> <li>durability: TRANSIENT_LOCAL </li> </ul> demo code <pre><code>#!/usr/bin/env python3\n\n\nimport rclpy\nfrom rclpy.executors import MultiThreadedExecutor\nfrom rclpy.node import Node\nfrom std_msgs.msg import String\nfrom rclpy.qos import QoSProfile, ReliabilityPolicy, DurabilityPolicy, HistoryPolicy, LivelinessPolicy\nfrom rclpy.qos import qos_profile_system_default, qos_profile_sensor_data\nfrom rclpy.duration import Duration  # Correct import\n\nTOPIC = \"test_topic\"\n\nSUB_START_DELAY = 5\nPUB_RATE = 1\n\nclass SubNode(Node):\n    def __init__(self):\n        super().__init__(\"sub_node\")\n        self.sub_start_delay = self.create_timer(SUB_START_DELAY, self.timer_handler)\n\n        self.get_logger().info(\"Hello SUB\")\n\n    def timer_handler(self):\n        self.destroy_timer(self.sub_start_delay)\n        self.get_logger().info(\"--Create subscriber--\")\n        qos_profile = QoSProfile(\n            reliability=ReliabilityPolicy.RELIABLE,  # or BEST_EFFORT\n            durability=DurabilityPolicy.TRANSIENT_LOCAL,  # or VOLATILE\n            history=HistoryPolicy.KEEP_LAST,  # or KEEP_ALL\n            depth=10,  # Queue depth\n            liveliness=LivelinessPolicy.AUTOMATIC,  # or MANUAL_BY_TOPIC\n        )\n        self.create_subscription(String, TOPIC, self.callback, qos_profile=qos_profile)\n\n\n    def callback(self, msg):\n        self.get_logger().info(f\"Received: {msg.data}\")\n\nclass PubNode(Node):\n    def __init__(self):\n        super().__init__(\"pub_node\")\n        qos_profile = QoSProfile(\n            reliability=ReliabilityPolicy.RELIABLE,  # or BEST_EFFORT\n            durability=DurabilityPolicy.TRANSIENT_LOCAL,  # or VOLATILE\n            history=HistoryPolicy.KEEP_LAST,  # or KEEP_ALL\n            depth=10,  # Queue depth\n            liveliness=LivelinessPolicy.AUTOMATIC,  # or MANUAL_BY_TOPIC\n        )\n        self.counter = 0\n        self.pub = self.create_publisher(String, TOPIC, qos_profile)\n        # self.get_logger().info(f\"{self.pub.qos_profile}\")\n        self.timer = self.create_timer(PUB_RATE, self.timer_handler)\n\n        self.get_logger().info(\"Hello PUB\")\n\n    def timer_handler(self):\n        msg = String()\n        msg.data = f\"hello {self.counter}\"\n        self.counter += 1\n        self.pub.publish(msg)\n\ndef main(args=None):\n    rclpy.init(args=args)\n    pub_node = PubNode()\n    sub_node = SubNode()\n    executer = MultiThreadedExecutor()\n    executer.add_node(pub_node)\n    executer.add_node(sub_node)\n\n    executer.spin()\n\n\n    rclpy.shutdown()\n\nif __name__ == '__main__':\n    main()\n</code></pre> <p>From the result we saw that we got five (0-4) message from publisher history in the same time slot almost</p> result<pre><code>[INFO] [1742104307.703495396] [pub_node]: Hello PUB\n[INFO] [1742104307.704634957] [sub_node]: Hello SUB\n[INFO] [1742104312.706942284] [sub_node]: --Create subscriber--\n[INFO] [1742104312.709927579] [sub_node]: Received: hello 0\n[INFO] [1742104312.712135500] [sub_node]: Received: hello 1\n[INFO] [1742104312.714533710] [sub_node]: Received: hello 2\n[INFO] [1742104312.717377731] [sub_node]: Received: hello 3\n[INFO] [1742104312.719738278] [sub_node]: Received: hello 4\n[INFO] [1742104313.701471401] [sub_node]: Received: hello 5\n[INFO] [1742104314.701632809] [sub_node]: Received: hello 6\n[INFO] [1742104315.699930835] [sub_node]: Received: hello 7\n[INFO] [1742104316.701096571] [sub_node]: Received: hello 8\n[INFO] [1742104317.701580589] [sub_node]: Received: hello 9\n[INFO] [1742104318.701305347] [sub_node]: Received: hello 10\n</code></pre>","tags":["ros","qos"]},{"location":"ROS/ros_basic/ros_qos/#publisher-livespan","title":"Publisher livespan","text":"<p>Controls how long a message remains valid in the publisher\u2019s queue before it is discarded.</p> <p>lifespan = {0,0} default message never expire store until queue is exceeded</p> demo code  !!! note \"duration\"      Change `DURATION` at line 20 to simulate different duration behavior  <pre><code>#!/usr/bin/env python3\n\n\nimport rclpy\nfrom rclpy.executors import MultiThreadedExecutor\nfrom rclpy.node import Node\nfrom std_msgs.msg import String\nfrom rclpy.qos import QoSProfile, ReliabilityPolicy, DurabilityPolicy, HistoryPolicy, LivelinessPolicy\nfrom rclpy.duration import Duration  # Correct import\n\nTOPIC = \"test_topic\"\n\nSUB_START_DELAY = 5\nPUB_RATE = 1\n\nINFINITY = 0\nTHREE = 3\nFIVE = 5\n\nDURATION = FIVE\n\nclass SubNode(Node):\n    def __init__(self):\n        super().__init__(\"sub_node\")\n        self.sub_start_delay = self.create_timer(SUB_START_DELAY, self.timer_handler)\n\n        self.get_logger().info(\"Hello SUB\")\n\n    def timer_handler(self):\n        self.destroy_timer(self.sub_start_delay)\n        self.get_logger().info(\"--Create subscriber--\")\n        qos_profile = QoSProfile(\n            reliability=ReliabilityPolicy.RELIABLE,  # or BEST_EFFORT\n            durability=DurabilityPolicy.TRANSIENT_LOCAL,  # or VOLATILE\n            history=HistoryPolicy.KEEP_LAST,  # or KEEP_ALL\n            depth=10,  # Queue depth\n            liveliness=LivelinessPolicy.AUTOMATIC,  # or MANUAL_BY_TOPIC\n        )\n        self.create_subscription(String, TOPIC, self.callback, qos_profile=qos_profile)\n\n\n    def callback(self, msg):\n        self.get_logger().info(f\"Received: {msg.data}\")\n\nclass PubNode(Node):\n    def __init__(self):\n        super().__init__(\"pub_node\")\n        qos_profile = QoSProfile(\n            reliability=ReliabilityPolicy.RELIABLE,  # or BEST_EFFORT\n            durability=DurabilityPolicy.TRANSIENT_LOCAL,  # or VOLATILE\n            history=HistoryPolicy.KEEP_LAST,  # or KEEP_ALL\n            depth=10,  # Queue depth\n            liveliness=LivelinessPolicy.AUTOMATIC,  # or MANUAL_BY_TOPIC\n        )\n        qos_profile.lifespan = Duration(seconds=DURATION)\n        self.counter = 0\n        self.pub = self.create_publisher(String, TOPIC, qos_profile)\n        self.timer = self.create_timer(PUB_RATE, self.timer_handler)\n\n        self.get_logger().info(\"Hello PUB\")\n\n    def timer_handler(self):\n        msg = String()\n        msg.data = f\"hello {self.counter}\"\n        self.counter += 1\n        self.pub.publish(msg)\n\ndef main(args=None):\n    rclpy.init(args=args)\n    pub_node = PubNode()\n    sub_node = SubNode()\n    executer = MultiThreadedExecutor()\n    executer.add_node(pub_node)\n    executer.add_node(sub_node)\n\n    executer.spin()\n\n\n    rclpy.shutdown()\n\nif __name__ == '__main__':\n    main()\n</code></pre> <p>Publisher QOS settings</p> duration infinity<pre><code>[INFO] [1742119324.479144324] [pub_node]: Hello PUB\n[INFO] [1742119324.480279021] [sub_node]: Hello SUB\n[INFO] [1742119329.482579604] [sub_node]: --Create subscriber--\n[INFO] [1742119329.487386342] [sub_node]: Received: hello 0\n[INFO] [1742119329.490330176] [sub_node]: Received: hello 1\n[INFO] [1742119329.493336125] [sub_node]: Received: hello 2\n[INFO] [1742119329.494006959] [sub_node]: Received: hello 3\n[INFO] [1742119329.494655886] [sub_node]: Received: hello 4\n[INFO] [1742119330.477924823] [sub_node]: Received: hello 5\n[INFO] [1742119331.477839792] [sub_node]: Received: hello 6\n[INFO] [1742119332.478648855] [sub_node]: Received: hello 7\n[INFO] [1742119333.479034641] [sub_node]: Received: hello 8\n[INFO] [1742119334.479176439] [sub_node]: Received: hello 9\n[INFO] [1742119335.479199605] [sub_node]: Received: hello 10\n</code></pre> duration 3 sec<pre><code>[INFO] [1742148850.009442835] [pub_node]: Hello PUB\n[INFO] [1742148850.010507589] [sub_node]: Hello SUB\n[INFO] [1742148855.013188581] [sub_node]: --Create subscriber--\n[INFO] [1742148855.017414763] [sub_node]: Received: hello 2\n[INFO] [1742148855.019736517] [sub_node]: Received: hello 3\n[INFO] [1742148855.022239024] [sub_node]: Received: hello 4\n[INFO] [1742148856.008740366] [sub_node]: Received: hello 5\n[INFO] [1742148857.008514352] [sub_node]: Received: hello 6\n[INFO] [1742148858.008535595] [sub_node]: Received: hello 7\n[INFO] [1742148859.008868188] [sub_node]: Received: hello 8\n[INFO] [1742148860.008177597] [sub_node]: Received: hello 9\n[INFO] [1742148861.008890986] [sub_node]: Received: hello 10\n</code></pre> <p>The subscriber start 5 sec after the publisher because the publisher message duration is 5 sec The subscriber got all the message history</p> duration 5 sec<pre><code>[INFO] [1742148971.724443752] [pub_node]: Hello PUB\n[INFO] [1742148971.725656236] [sub_node]: Hello SUB\n[INFO] [1742148976.726798282] [sub_node]: --Create subscriber--\n[INFO] [1742148976.729821746] [sub_node]: Received: hello 0\n[INFO] [1742148976.731418745] [sub_node]: Received: hello 1\n[INFO] [1742148976.732847415] [sub_node]: Received: hello 2\n[INFO] [1742148976.734682250] [sub_node]: Received: hello 3\n[INFO] [1742148976.736104530] [sub_node]: Received: hello 4\n[INFO] [1742148977.722802777] [sub_node]: Received: hello 5\n[INFO] [1742148978.722967570] [sub_node]: Received: hello 6\n[INFO] [1742148979.722813556] [sub_node]: Received: hello 7\n[INFO] [1742148980.723007282] [sub_node]: Received: hello 8\n[INFO] [1742148981.720740806] [sub_node]: Received: hello 9\n[INFO] [1742148982.722850261] [sub_node]: Received: hello 10\n</code></pre>","tags":["ros","qos"]},{"location":"ROS/ros_basic/ros_qos/#deadline","title":"Deadline","text":"QoS and deadline event result<pre><code>#!/usr/bin/env python3\n\n\nimport rclpy\nfrom rclpy.executors import MultiThreadedExecutor\nfrom rclpy.node import Node\nfrom std_msgs.msg import String\nfrom rclpy.qos import QoSProfile, ReliabilityPolicy, DurabilityPolicy, HistoryPolicy, LivelinessPolicy\nfrom rclpy.duration import Duration  # Correct import\nfrom rclpy.qos_event import SubscriptionEventCallbacks\n\nTOPIC = \"test_topic\"\n\nSUB_START_DELAY = 5\nPUB_RATE = 1\n\n\nclass SubNode(Node):\n    def __init__(self):\n        super().__init__(\"sub_node\")\n\n        self.get_logger().info(\"--Create subscriber--\")\n        qos_profile = QoSProfile(\n            reliability=ReliabilityPolicy.RELIABLE,  # or BEST_EFFORT\n            durability=DurabilityPolicy.TRANSIENT_LOCAL,  # or VOLATILE\n            history=HistoryPolicy.KEEP_LAST,  # or KEEP_ALL\n            depth=10,  # Queue depth\n            liveliness=LivelinessPolicy.AUTOMATIC,  # or MANUAL_BY_TOPIC\n        )\n        qos_profile.deadline = Duration(seconds=1, nanoseconds=0)  # Deadline duration\n        self.sub = self.create_subscription(String, TOPIC, self.callback, qos_profile, event_callbacks=SubscriptionEventCallbacks(deadline=self.deadline_missed_callback))\n\n        self.get_logger().info(\"Hello SUB\")\n\n\n    def deadline_missed_callback(self, event):\n        self.get_logger().warning(\"Deadline missed !!\")\n\n    def callback(self, msg):\n        self.get_logger().info(f\"Received: {msg.data}\")\n\nclass PubNode(Node):\n    def __init__(self):\n        super().__init__(\"pub_node\")\n        qos_profile = QoSProfile(\n            reliability=ReliabilityPolicy.RELIABLE,  # or BEST_EFFORT\n            durability=DurabilityPolicy.TRANSIENT_LOCAL,  # or VOLATILE\n            history=HistoryPolicy.KEEP_LAST,  # or KEEP_ALL\n            depth=10,  # Queue depth\n            liveliness=LivelinessPolicy.AUTOMATIC,  # or MANUAL_BY_TOPIC\n        )\n        qos_profile.deadline = Duration(seconds=1, nanoseconds=0)  # Deadline duration\n        self.counter = 0\n        self.pub = self.create_publisher(String, TOPIC, qos_profile)\n        self.timer = self.create_timer(PUB_RATE, self.timer_handler)\n\n        self.get_logger().info(\"Hello PUB\")\n\n    def timer_handler(self):\n        msg = String()\n        msg.data = f\"hello {self.counter}\"\n        self.counter += 1\n        self.pub.publish(msg)\n        if self.counter &gt; 5:\n            self.destroy_timer(self.timer)\n            self.destroy_publisher(self.pub)\n\ndef main(args=None):\n    rclpy.init(args=args)\n    pub_node = PubNode()\n    sub_node = SubNode()\n    executer = MultiThreadedExecutor()\n    executer.add_node(pub_node)\n    executer.add_node(sub_node)\n\n    executer.spin()\n\n\n    rclpy.shutdown()\n\nif __name__ == '__main__':\n    main()\n</code></pre> <p>The demo code stop to publish after 5 sec, the subscriber trigger the deadline_missed_callback callback</p> <p>Note</p> <p>The publisher rate and deadline both are 1 hz,  the alert in line 6,8 occurs because the narrower delta</p> deadline<pre><code>[INFO] [1742149968.340318813] [pub_node]: Hello PUB\n[INFO] [1742149968.341837588] [sub_node]: --Create subscriber--\n[INFO] [1742149968.342220114] [sub_node]: Hello SUB\n[INFO] [1742149969.337432339] [sub_node]: Received: hello 0\n[INFO] [1742149970.335727680] [sub_node]: Received: hello 1\n[WARN] [1742149971.337700875] [sub_node]: Deadline missed !!\n[INFO] [1742149971.339943550] [sub_node]: Received: hello 2\n[WARN] [1742149972.338132778] [sub_node]: Deadline missed !!\n[INFO] [1742149972.340649610] [sub_node]: Received: hello 3\n[INFO] [1742149973.337361905] [sub_node]: Received: hello 4\n[INFO] [1742149974.337383148] [sub_node]: Received: hello 5\n[WARN] [1742149975.337733058] [sub_node]: Deadline missed !!\n[WARN] [1742149976.337944293] [sub_node]: Deadline missed !!\n[WARN] [1742149977.337851314] [sub_node]: Deadline missed !!\n[WARN] [1742149978.337756163] [sub_node]: Deadline missed !!\n[WARN] [1742149979.337504946] [sub_node]: Deadline missed !!\n[WARN] [1742149980.336326724] [sub_node]: Deadline missed !!\n</code></pre>","tags":["ros","qos"]},{"location":"ROS/ros_basic/ros_qos/#liveliness","title":"Liveliness","text":"<p>Use liveliness if you need to detect dead or disconnected publishers (e.g., checking if a node is still online).</p> <p>deadline</p> <p>Check that message are received on time</p> publisher <pre><code>#!/usr/bin/env python3\n\n\nimport rclpy\nfrom rclpy.node import Node\nfrom std_msgs.msg import String\nfrom rclpy.qos import QoSProfile, LivelinessPolicy\nfrom rclpy.duration import Duration\n\nclass LivelinessPublisher(Node):\n    def __init__(self):\n        super().__init__('liveliness_publisher')\n\n        qos_profile = QoSProfile(\n            depth=10,\n            liveliness=LivelinessPolicy.MANUAL_BY_TOPIC,  # Publisher must assert liveliness\n            liveliness_lease_duration=Duration(seconds=3)  # Must assert within 3 seconds\n        )\n\n        self.publisher_ = self.create_publisher(String, 'liveliness_topic', qos_profile)\n        self.timer = self.create_timer(1.0, self.publish_message)  # Publish every 1s\n        # self.liveliness_timer = self.create_timer(2.0, self.assert_liveliness)  # Assert liveliness every 2s\n        self.counter = 0\n\n    def publish_message(self):\n        msg = String()\n        msg.data = f'Hello {self.counter}'\n        self.publisher_.publish(msg)\n        self.get_logger().info(f'Published: {msg.data}')\n        self.counter += 1\n\n    def assert_liveliness(self):\n        self.publisher_.assert_liveliness()  # Manually assert that publisher is alive\n        self.get_logger().info('Liveliness asserted')\n\ndef main(args=None):\n    rclpy.init(args=args)\n    node = LivelinessPublisher()\n    rclpy.spin(node)\n    node.destroy_node()\n    rclpy.shutdown()\n\nif __name__ == '__main__':\n    main()\n</code></pre> subscriber <pre><code>#!/usr/bin/env python3\n\nimport rclpy\nfrom rclpy.node import Node\nfrom std_msgs.msg import String\nfrom rclpy.qos import QoSProfile, LivelinessPolicy\nfrom rclpy.qos_event import SubscriptionEventCallbacks\nfrom rclpy.duration import Duration\n\nclass LivelinessSubscriber(Node):\n    def __init__(self):\n        super().__init__('liveliness_subscriber')\n\n        qos_profile = QoSProfile(\n            depth=10,\n            liveliness=LivelinessPolicy.MANUAL_BY_TOPIC,\n            liveliness_lease_duration=Duration(seconds=3)  # Expecting liveliness assertion every 3s\n        )\n\n        event_callbacks = SubscriptionEventCallbacks(\n            liveliness=self.liveliness_callback\n        )\n\n        self.subscription = self.create_subscription(\n            String,\n            'liveliness_topic',\n            self.listener_callback,\n            qos_profile,\n            event_callbacks=event_callbacks\n        )\n\n    def listener_callback(self, msg):\n        self.get_logger().info(f'Received: {msg.data}')\n\n    def liveliness_callback(self, event):\n        if event.alive_count == 0:\n            self.get_logger().warn('Liveliness lost! Publisher is inactive.')\n        else:\n            self.get_logger().info(f'Liveliness changed. Active publishers: {event.alive_count}')\n\ndef main(args=None):\n    rclpy.init(args=args)\n    node = LivelinessSubscriber()\n    rclpy.spin(node)\n    node.destroy_node()\n    rclpy.shutdown()\n\nif __name__ == '__main__':\n    main()\n</code></pre> <ul> <li>Run the subscriber</li> <li>Start/Stop the publisher trigger the event</li> </ul> liveliness<pre><code>[INFO] [1742157714.393511232] [liveliness_subscriber]: Liveliness changed. Active publishers: 1\n[INFO] [1742157715.395080289] [liveliness_subscriber]: Received: Hello 0\n[INFO] [1742157716.395343254] [liveliness_subscriber]: Received: Hello 1\n[INFO] [1742157717.395050895] [liveliness_subscriber]: Received: Hello 2\n[INFO] [1742157718.395029525] [liveliness_subscriber]: Received: Hello 3\n[INFO] [1742157719.394828524] [liveliness_subscriber]: Received: Hello 4\n[WARN] [1742157720.395358162] [liveliness_subscriber]: Liveliness lost! Publisher is inactive.\n</code></pre>","tags":["ros","qos"]},{"location":"ROS/ros_cpp/","title":"ROS Cpp","text":"<p>gtest</p> <p>Pluginlib</p> <p>cmake tips</p>"},{"location":"ROS/ros_cpp/cmake_tips/","title":"ROS cmake usage tips","text":"","tags":["cmake","ros","cmakelist","tips"]},{"location":"ROS/ros_cpp/cmake_tips/#install-directory-set-permission-and-filter","title":"Install directory set permission and filter","text":"<pre><code>install(DIRECTORY bin/\n        DESTINATION share/${PROJECT_NAME}\n        FILES_MATCHING PATTERN \"*.py\"\n        PERMISSIONS OWNER_READ GROUP_READ WORLD_READ OWNER_EXECUTE WORLD_EXECUTE)\n</code></pre>","tags":["cmake","ros","cmakelist","tips"]},{"location":"ROS/ros_cpp/cmake_tips/#install-file-set-permission","title":"Install file set permission","text":"<pre><code>install(FILES config.yaml\n        DESTINATION share/${PROJECT_NAME}/config\n        PERMISSIONS OWNER_READ GROUP_READ WORLD_READ)\n</code></pre>","tags":["cmake","ros","cmakelist","tips"]},{"location":"ROS/ros_cpp/cmake_tips/#architecture-detection","title":"Architecture Detection","text":"<pre><code>if(CMAKE_SYSTEM_PROCESSOR STREQUAL \"x86_64\")\n  message(STATUS \"Building for x86_64 architecture\")\nelseif(CMAKE_SYSTEM_PROCESSOR STREQUAL \"aarch64\")\n  message(STATUS \"Building for ARM64 (aarch64)\")\nelse()\n  message(STATUS \"Unknown architecture: ${CMAKE_SYSTEM_PROCESSOR}\")\nendif()\n</code></pre>","tags":["cmake","ros","cmakelist","tips"]},{"location":"ROS/ros_cpp/pluginlib/","title":"ROS Pluginlib","text":"<p>Pluginlib is a C++ library for loading and unloading plugins from within a ROS package. Plugins are dynamically loadable classes that are loaded from a runtime library (shared object)</p>","tags":["ros","plugins","pluginlib","cpp"]},{"location":"ROS/ros_cpp/pluginlib/#demo","title":"Demo","text":"<p>Demo how to use pluginlib , the demo include 3 packages:</p> <ul> <li>polygon_base: Interface declaration</li> <li>polygons: Plugin implementation</li> <li>polygons_app: Plugin usage</li> </ul>","tags":["ros","plugins","pluginlib","cpp"]},{"location":"ROS/ros_cpp/pluginlib/#package-setup","title":"Package setup","text":"<pre><code>ros2 pkg create polygon_base --build-type ament_cmake\nros2 pkg create polygons --build-type ament_cmake --dependencies pluginlib polygon_base\nros2 pkg create polygons_app --build-type ament_cmake --dependencies pluginlib polygon_base\n</code></pre>","tags":["ros","plugins","pluginlib","cpp"]},{"location":"ROS/ros_cpp/pluginlib/#polygon_base","title":"polygon_base","text":"<p>polygon_base expose the abstract class that the plugin need to implement The plugin constructor need to haven't any parameters and for plugin initialization we use the <code>init</code> method</p> include/polygon_base/polygon.hpp<pre><code>#pragma once\n\nnamespace PolygonBase\n{\n    class Polygon\n    {\n    public:\n        //! Necessary since constructor can't have parameters!\n        virtual void init(double side_length) = 0; // 1\n        virtual double area() = 0;\n        virtual ~Polygon() {}\n\n    protected:\n        //! This costructor signature is required by pluginlib\n        Polygon() {}\n    };\n\n} // namespace PolygonBase\n</code></pre> <p>Build the package and expose the <code>include</code> folder downstream to other packages</p> CMakeLists.txt<pre><code>cmake_minimum_required(VERSION 3.8)\nproject(polygon_base)\n\nif(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES \"Clang\")\n  add_compile_options(-Wall -Wextra -Wpedantic)\nendif()\n\n# find dependencies\nfind_package(ament_cmake REQUIRED)\n\ninstall(DIRECTORY include/  #(1)\n  DESTINATION include)\n\nament_export_include_directories(include) #(2)\n\nament_package()\n</code></pre> <ol> <li>Copy the include folder to installation folder</li> <li>ament_export_include_directories: exports your package\u2019s include directories (e.g., include/) to downstream packages, making headers like provider_pkg/provider.hpp discoverable via ${provider_pkg_INCLUDE_DIRS}.</li> </ol>","tags":["ros","plugins","pluginlib","cpp"]},{"location":"ROS/ros_cpp/pluginlib/#polygons","title":"polygons","text":"<p>Implement plugins and build them as shared library and expose the to pluginlib infa using xml declaration</p> <p>package.xml</p> <p>Don't forget to insert package dependencies <pre><code>&lt;depend&gt;polygon_base&lt;/depend&gt;\n&lt;depend&gt;pluginlib&lt;/depend&gt;\n</code></pre></p> <pre><code>\u251c\u2500\u2500 CMakeLists.txt\n\u251c\u2500\u2500 include\n\u2502   \u2514\u2500\u2500 polygons\n\u2502       \u2514\u2500\u2500 square.hpp\n\u251c\u2500\u2500 package.xml\n\u251c\u2500\u2500 plugins_triangle.xml\n\u251c\u2500\u2500 plugins.xml\n\u2514\u2500\u2500 src\n    \u251c\u2500\u2500 square.cpp\n    \u2514\u2500\u2500 triangle.cpp\n</code></pre> src/triangle.cpp<pre><code> #include &lt;cmath&gt;\n #include &lt;polygon_base/polygon.hpp&gt;\n\n namespace Polygons\n {\n\n    class Triangle : public PolygonBase::Polygon\n    {\n        void init(double side_length)\n        {\n        side_length_ = side_length;\n        }\n\n\n        double area()\n        {\n        return 0.5 * side_length_ * compute_height();\n        }\n\n\n        double compute_height()\n        {\n        return sqrt((side_length_ * side_length_) - ((side_length_ / 2.0) * (side_length_ / 2.0)));\n        }\n\n        private: // (2) best practice to declare private as protected, but it's ok for basic types\n            double side_length_;\n    };\n\n }  // namespace Polygons\n\n#include &lt;pluginlib/class_list_macros.hpp&gt;  //(1)\nPLUGINLIB_EXPORT_CLASS(Polygons::Triangle, PolygonBase::Polygon)\n</code></pre> <ol> <li>Register the plugin in Pluginlib infra</li> <li>Best practice to use internal variable as protected (Private members might cause issues in dynamic loading scenarios.)</li> </ol> plugins_triangle.xml<pre><code>&lt;library path=\"triangle\"&gt; \n  &lt;class type=\"Polygons::Triangle\" base_class_type=\"PolygonBase::Polygon\"&gt;\n    &lt;description&gt;This is a Triangle plugin.&lt;/description&gt;\n  &lt;/class&gt;\n&lt;/library&gt;\n</code></pre> CMakeLists.txt<pre><code>cmake_minimum_required(VERSION 3.8)\nproject(polygons)\n\nif(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES \"Clang\")\n  add_compile_options(-Wall -Wextra -Wpedantic)\nendif()\n\n# find dependencies\nfind_package(ament_cmake REQUIRED)\nfind_package(polygon_base REQUIRED)\nfind_package(pluginlib REQUIRED)\n\n\nadd_library(triangle SHARED src/triangle.cpp)\ntarget_compile_features(triangle PUBLIC c_std_99 cxx_std_17)  # Require C99 and C++17\nament_target_dependencies(\n  triangle\n  pluginlib\n  polygon_base)\n\n\ninstall(\n  TARGETS triangle\n  EXPORT export_${PROJECT_NAME} #(2)\n  LIBRARY DESTINATION lib)\n\n\npluginlib_export_plugin_description_file(polygon_base plugins_triangle.xml) #(1)\n\n\nament_package()\n</code></pre> <ol> <li>The macro PLUGINLIB_EXPORT_PLUGIN_DESCRIPTION_FILE is used in ROS 2 pluginlib to specify the plugin XML file that describes available plugins. This macro helps the pluginlib system locate and register plugins when loading them dynamically.</li> <li>The install() command in CMake is used to define installation rules for compiled targets (executables, libraries, etc.). The EXPORT keyword allows us to export a CMake target so that other projects can easily find and use it.</li> </ol>","tags":["ros","plugins","pluginlib","cpp"]},{"location":"ROS/ros_cpp/pluginlib/#square-plugin","title":"Square Plugin","text":"<p>Add square plugin, for the purpose of the demo build it as separate library (so)</p> Header file <pre><code>#pragma once\n\n#include &lt;polygon_base/polygon.hpp&gt;\n\n//! Namespaces must reflect what is written in plugins.xml!\nnamespace Polygons\n{\n\n    /**\n     * Regular polygon with four sides.\n     */\n    class Square : public PolygonBase::Polygon\n    {\n    public:\n        void init(double side_length) override;\n        double area() override;\n\n    //! There must not be any private members (best practice)\n    protected:\n        double side_length_;\n    };\n\n} // namespace Polygons\n\n//! Necessary to register plugin classes with pluginlib\n#include &lt;pluginlib/class_list_macros.hpp&gt;\nPLUGINLIB_EXPORT_CLASS(Polygons::Square, PolygonBase::Polygon)\n</code></pre> plugin cpp file square.cpp<pre><code>#include &lt;cmath&gt;\n\n#include \"polygons/square.hpp\"\n\nnamespace Polygons\n{\n\n    void Square::init(double side_length)\n    {\n        side_length_ = side_length;\n    }\n\n    double Square::area()\n    {\n        return pow(side_length_, 2.0);\n    }\n\n}\n</code></pre> Plugin xml plugins.xml<pre><code>&lt;library path=\"square\"&gt;\n  &lt;class type=\"Polygons::Square\" base_class_type=\"PolygonBase::Polygon\"&gt;\n    &lt;description&gt;This is a square plugin.&lt;/description&gt;\n  &lt;/class&gt;\n&lt;/library&gt;\n</code></pre> Full CMakeLists.txt <pre><code>cmake_minimum_required(VERSION 3.8)\nproject(polygons)\n\nif(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES \"Clang\")\n  add_compile_options(-Wall -Wextra -Wpedantic)\nendif()\n\n# find dependencies\nfind_package(ament_cmake REQUIRED)\nfind_package(polygon_base REQUIRED)\nfind_package(pluginlib REQUIRED)\n\n# square library\nadd_library(square SHARED src/square.cpp)\ntarget_compile_features(square PUBLIC c_std_99 cxx_std_17)  # Require C99 and C++17\ntarget_include_directories(square PUBLIC\n  $&lt;BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include&gt;\n  $&lt;INSTALL_INTERFACE:include&gt;)\nament_target_dependencies(\n  square\n  pluginlib\n  polygon_base)\n\n# square library\nadd_library(triangle SHARED src/triangle.cpp)\ntarget_compile_features(triangle PUBLIC c_std_99 cxx_std_17)  # Require C99 and C++17\n\nament_target_dependencies(\n  triangle\n  pluginlib\n  polygon_base)\n\ninstall(\n    TARGETS square\n    EXPORT export_${PROJECT_NAME}\n    LIBRARY DESTINATION lib)\n\ninstall(\n  TARGETS triangle\n  EXPORT export_${PROJECT_NAME}\n  LIBRARY DESTINATION lib)\n\n#! link plugins with base class for pluginlib\npluginlib_export_plugin_description_file(polygon_base plugins.xml)\npluginlib_export_plugin_description_file(polygon_base plugins_triangle.xml)\n\n\nament_package()\n</code></pre>","tags":["ros","plugins","pluginlib","cpp"]},{"location":"ROS/ros_cpp/pluginlib/#polygon_app","title":"Polygon_app","text":"<p>ROS package that load the plugin dynamically and usage it</p> src/main.cpp<pre><code>#include &lt;iostream&gt;\n#include &lt;pluginlib/class_loader.hpp&gt;\n#include &lt;polygon_base/polygon.hpp&gt;\n\n#define UNUSED(arg) (void)(arg)\n\nint main(int argc, char ** argv)\n{\n  UNUSED(argc);\n  UNUSED(argv);\n\n  try\n  {\n    pluginlib::ClassLoader&lt;PolygonBase::Polygon&gt; loader(\"polygon_base\", \"PolygonBase::Polygon\");\n\n    std::shared_ptr&lt;PolygonBase::Polygon&gt; square = loader.createSharedInstance(\"Polygons::Square\");\n    std::shared_ptr&lt;PolygonBase::Polygon&gt; triangle = loader.createSharedInstance(\"Polygons::Triangle\");\n\n    triangle-&gt;init(10.0);\n    square-&gt;init(10.0);\n\n    std::cout &lt;&lt; \"Square area: \" &lt;&lt; square-&gt;area() &lt;&lt; std::endl;\n    std::cout &lt;&lt; \"Triangle area: \" &lt;&lt; triangle-&gt;area() &lt;&lt; std::endl;\n  }\n  catch(const pluginlib::PluginlibException &amp; e)\n  {\n    std::cerr &lt;&lt; e.what() &lt;&lt; std::endl;\n    exit(EXIT_FAILURE);\n  }\n\n\n  exit(EXIT_SUCCESS);\n}\n</code></pre> CMakeLists.txt<pre><code>cmake_minimum_required(VERSION 3.8)\nproject(polygons_app)\n\nif(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES \"Clang\")\n  add_compile_options(-Wall -Wextra -Wpedantic)\nendif()\n\n# find dependencies\nfind_package(ament_cmake REQUIRED)\nfind_package(pluginlib REQUIRED)\nfind_package(polygon_base REQUIRED)\n\nadd_executable(polygons_tester src/main.cpp)\ntarget_compile_features(polygons_tester PUBLIC c_std_99 cxx_std_17)  # Require C99 and C++17\nament_target_dependencies(\n  polygons_tester\n  pluginlib\n  polygon_base)\n\ninstall(TARGETS polygons_tester\n  DESTINATION lib/${PROJECT_NAME})\n\nament_package()\n</code></pre> <p>The package not know about the <code>plugins</code> package it loaded dynamic by the pluginlib. It only reference to the package with the abstract class</p> package.xml<pre><code>  &lt;depend&gt;pluginlib&lt;/depend&gt;\n  &lt;depend&gt;polygon_base&lt;/depend&gt;\n</code></pre>","tags":["ros","plugins","pluginlib","cpp"]},{"location":"ROS/ros_cpp/pluginlib/#usage","title":"Usage","text":"<pre><code>ros2 run polygons_app polygons_tester \n#\nSquare area: 100\nTriangle area: 43.3013\n</code></pre>","tags":["ros","plugins","pluginlib","cpp"]},{"location":"ROS/ros_eco/","title":"ROS Eco system","text":"<p>Ros packages and tools that are used in the ROS eco system.</p> <p>ROS2 launch</p> <p>ROS2 Packages</p> <p>URDF, XACRO and Gazebo</p> <p>Build System</p> <p>rviz, rqt and other tools</p>"},{"location":"ROS/ros_eco/build_system/","title":"Build System","text":"<p>Colcon</p> <p>ament</p> <p>bloom and rosdep</p> <p>ROS: The build system</p>","tags":["ros","build system","colcon","ament"]},{"location":"ROS/ros_eco/build_system/#colcon-clean","title":"colcon-clean","text":"<p>Extension for colcon to clean package workspaces</p> <pre><code>sudo apt install python3-colcon-clean\n</code></pre> Usage<pre><code>colcon clean workspace\n\ncolcon clean packages \n</code></pre>","tags":["ros","build system","colcon","ament"]},{"location":"ROS/ros_eco/build_system/#colcon-mixin","title":"colcon-mixin","text":"<p>Colcon mixin is a powerful feature of the colcon build system that allows you to define and reuse commonly used build configurations. It's particularly useful for cross-compilation scenarios because it helps you avoid typing long, complex build commands repeatedly. cross compiler example</p> <pre><code>sudo apt install python3-colcon-mixin\n</code></pre> Usage<pre><code>colcon mixin list\n</code></pre>","tags":["ros","build system","colcon","ament"]},{"location":"ROS/ros_eco/build_system/ament/","title":"ament","text":"","tags":["ros","build","ament","hooks","dsv"]},{"location":"ROS/ros_eco/build_system/ament/#ament_environment_hooks","title":"ament_environment_hooks","text":"<p>Using to manage the environment variables and more when we source the workspace. Read more and more</p> <ul> <li>Set environment variable</li> <li>Run custom script when the workspace is sourced</li> </ul> <p>The setup includes:</p> <ul> <li><code>hook</code> folder</li> <li><code>dsv.in</code> file</li> <li><code>sh.in</code> file</li> <li>using <code>ament_environment_hooks</code> in the <code>CMakeLists.txt</code> file</li> </ul>","tags":["ros","build","ament","hooks","dsv"]},{"location":"ROS/ros_eco/build_system/ament/#dsv","title":".dsv","text":"<p>dsv (Developer setup variables) file it use to set up the environment variables for the package.</p> <p>When we source the workspace, the dsv file will be executed and set up the environment variables.</p>","tags":["ros","build","ament","hooks","dsv"]},{"location":"ROS/ros_eco/build_system/ament/#demo","title":"Demo","text":"<p>Setup gazebo environment variables</p> <ul> <li>GZ_SIM_RESOURCE_PATH</li> </ul>","tags":["ros","build","ament","hooks","dsv"]},{"location":"ROS/ros_eco/build_system/ament/#steps","title":"Steps","text":"<ul> <li>Add the <code>hooks</code> folder to your package</li> <li>Add the <code>dsv.in</code> file to your package</li> <li>Add the <code>sh.in</code> file to your package</li> <li>Add the <code>ament_environment_hooks</code> to your <code>CMakeLists.txt</code> file</li> <li>Build, Source and check</li> </ul> CMakeLists.txt<pre><code>ament_environment_hooks(\"${CMAKE_CURRENT_SOURCE_DIR}/hooks/${PROJECT_NAME}.dsv.in\")\nament_environment_hooks(\"${CMAKE_CURRENT_SOURCE_DIR}/hooks/${PROJECT_NAME}.sh.in\")\n</code></pre> ros_gz_example_description.dsv.in<pre><code>prepend-non-duplicate;GZ_SIM_RESOURCE_PATH;share;@CMAKE_INSTALL_PREFIX@/share\n</code></pre> ros_gz_example_description.sh.in<pre><code>ament_prepend_unique_value GZ_SIM_RESOURCE_PATH \"$AMENT_CURRENT_PREFIX/share/@PROJECT_NAME@/models\"\n</code></pre>","tags":["ros","build","ament","hooks","dsv"]},{"location":"ROS/ros_eco/build_system/ament/#check","title":"check","text":"<ul> <li>Build using colcon</li> <li>Source install folder</li> </ul> <pre><code>echo $GZ_SIM_RESOURCE_PATH\n</code></pre> <ul> <li>ament_cmake_extension</li> </ul>","tags":["ros","build","ament","hooks","dsv"]},{"location":"ROS/ros_eco/build_system/ament/ament_cmake_extension/","title":"Ament cmake extension","text":"","tags":["ament","ros","build system"]},{"location":"ROS/ros_eco/build_system/ament/ament_cmake_extension/#reference","title":"Reference","text":"<ul> <li>ament_cmake_extension</li> </ul>","tags":["ament","ros","build system"]},{"location":"ROS/ros_eco/build_system/rosdep_bloom/","title":"Package.xml, Rosdep, Bloom and other tools","text":"","tags":["ros","rosdep","bloom","package.xml"]},{"location":"ROS/ros_eco/build_system/rosdep_bloom/#packagexml","title":"Package.xml","text":"<p>It provides metadata about the package, such as its name, version, dependencies, and other important information.</p> <p>check REP 149 for more details here</p>","tags":["ros","rosdep","bloom","package.xml"]},{"location":"ROS/ros_eco/build_system/rosdep_bloom/#dependencies","title":"Dependencies","text":"<ul> <li>depend: Specifies dependencies required to build and run the package.  A  tag is equivalent to specifying ,  and , all on the same package or key. The  tag cannot be used in combination with any of the three equivalent tags for the same package or key name. <li>build_depend: Specifies dependencies required to build the package (e.g., libraries needed at build time).</li> <li>exec_depend: Specifies runtime dependencies (e.g., libraries or tools needed when running the package).</li> <li>test_depend: Specifies dependencies needed for running tests. doc_depend: Specifies dependencies related to documentation.</li> <li>buildtool_depend: Specifies build tools required for the package.</li>","tags":["ros","rosdep","bloom","package.xml"]},{"location":"ROS/ros_eco/build_system/rosdep_bloom/#rosdep","title":"Rosdep","text":"<p>rosdep is a command-line tool for installing system dependencies more</p> install<pre><code>sudo apt-get install python3-rosdep\n</code></pre>","tags":["ros","rosdep","bloom","package.xml"]},{"location":"ROS/ros_eco/build_system/rosdep_bloom/#commands","title":"commands","text":"<p>resdep command reference</p> <p>init<pre><code>sudo rosdep init\nrosdep update\n</code></pre> - init: Download/update rosdep sources to  <code>/etc/ros/rosdep/sources.list.d/20-default.list</code> - update: Download databases from the above sources and store them in <code>~/.ros/rosdep</code></p>","tags":["ros","rosdep","bloom","package.xml"]},{"location":"ROS/ros_eco/build_system/rosdep_bloom/#rosdep-install","title":"rosdep install","text":"install<pre><code>rosdep install --from-paths src --ignore-src -r -y\n</code></pre>","tags":["ros","rosdep","bloom","package.xml"]},{"location":"ROS/ros_eco/build_system/rosdep_bloom/#rosdep-check","title":"rosdep check","text":"<p>check if the dependencies of package(s) have been met.</p> check<pre><code>rosdep check --from-paths src --ignore-src -r\n</code></pre>","tags":["ros","rosdep","bloom","package.xml"]},{"location":"ROS/ros_eco/build_system/rosdep_bloom/#rosdep-keys","title":"rosdep keys","text":"<p>list the rosdep keys that the packages depend on.</p> <pre><code>rosdep keys --from-path src\n#\nrqt_gui_py\nament_cmake_pytest\nrqt_gui\nrosidl_default_runtime\nament_lint_common\ndiagnostic_updater\nrosidl_default_generators\nament_cmake\npython3-pyqt5\nament_lint_auto\n</code></pre>","tags":["ros","rosdep","bloom","package.xml"]},{"location":"ROS/ros_eco/build_system/rosdep_bloom/#rosdep-resolve-python3-rosdep","title":"rosdep resolve python3-rosdep","text":"<p>resolve <code>&lt;rosdeps&gt;</code> to system dependencies</p> <pre><code>#rosdep resolve &lt;rosdep&gt;\nrosdep resolve diagnostic_updater\n#apt\nros-humble-diagnostic-updater\n</code></pre> <p>Note</p> <p>for example <code>bluez-hcidump</code> not defined for <code>ubuntu</code> is <pre><code>rosdep resolve bluez-hcidump\n#\nWARNING: ROS_PYTHON_VERSION is unset. Defaulting to 3\n\nERROR: No definition of [bluez-hcidump] for OS [ubuntu]\n\nNo definition of [bluez-hcidump] for OS [ubuntu]\n        rosdep key : bluez-hcidump\n        OS name    : ubuntu\n        OS version : jammy\n        Data:\ndebian:\n                - bluez-hcidump\n                fedora:\n                - bluez-hcidump\n                gentoo:\n                - net-wireless/bluez-hcidump\n</code></pre></p>","tags":["ros","rosdep","bloom","package.xml"]},{"location":"ROS/ros_eco/build_system/rosdep_bloom/#rosdep-db","title":"rosdep db","text":"<p>generate the dependency database and print it to the console.</p> db<pre><code>rosdep db | grep diagnostic\n#\ndiagnostic_msgs -&gt; ros-humble-diagnostic-msgs\ndiagnostic_aggregator -&gt; ros-humble-diagnostic-aggregator\ndiagnostic_common_diagnostics -&gt; ros-humble-diagnostic-common-diagnostics\ndiagnostic_updater -&gt; ros-humble-diagnostic-updater\ndiagnostics -&gt; ros-humble-diagnostics\n...\n</code></pre>","tags":["ros","rosdep","bloom","package.xml"]},{"location":"ROS/ros_eco/build_system/rosdep_bloom/#rosdep-update","title":"rosdep update","text":"<p>update the local rosdep database based on the rosdep sources.</p>","tags":["ros","rosdep","bloom","package.xml"]},{"location":"ROS/ros_eco/build_system/rosdep_bloom/#custom-rosdep-yaml-file","title":"Custom rosdep yaml file","text":"<p>The yaml schema define in REP-111</p> <p>Note</p> <p>The rosdistro repository contains the package information for ROS distributions.  found in git https://github.com/ros/rosdistro/tree/master</p> <p>Note</p> <p><code>yaml     ROSDEP_NAME:         OS_NAME1:             PACKAGE_MANAGER1:             PACKAGE_ARGUMENTS_A         OS_NAME2:             PACKAGE_MANAGER2:             PACKAGE_ARGUMENTS_A</code></p> <ul> <li>package_manager: apt, pip</li> <li>os_name: ubuntu, debian</li> </ul> <p><code>yaml adafruit-pca9685-pip:     ubuntu:         pip:         packages: [adafruit-pca9685]</code></p>","tags":["ros","rosdep","bloom","package.xml"]},{"location":"ROS/ros_eco/build_system/rosdep_bloom/#demo-create-custom-rosdep-yaml-file","title":"Demo: Create custom rosdep yaml file","text":"<ul> <li>Create yaml file named <code>custom_rosdep.yaml</code></li> <li>Update rosdep sources</li> <li>Run rosdep update</li> <li>Check with rosdep resolve</li> </ul> custom_rosdeps.yaml<pre><code># ROSDEP_NAME:\n#   OS_NAME1:\n#     PACKAGE_MANAGER1:\n#       PACKAGE_ARGUMENTS_A\n\nparameters_utils:\n  ubuntu:\n    path: /workspace/submodules/parameters_utils\n    apt: ros-humble-parameters-utils\n</code></pre> <pre><code>sudo sh -c 'echo \"yaml file:///workspace/custom_rosdep.yaml\" &gt; /etc/ros/rosdep/sources.list.d/30-custom.list'\n</code></pre>","tags":["ros","rosdep","bloom","package.xml"]},{"location":"ROS/ros_eco/build_system/rosdep_bloom/#update","title":"Update","text":"update<pre><code>rosdep update\n#\nreading in sources list data from /etc/ros/rosdep/sources.list.d\nHit https://raw.githubusercontent.com/ros/rosdistro/master/rosdep/osx-homebrew.yaml\nHit https://raw.githubusercontent.com/ros/rosdistro/master/rosdep/base.yaml\nHit https://raw.githubusercontent.com/ros/rosdistro/master/rosdep/python.yaml\nHit https://raw.githubusercontent.com/ros/rosdistro/master/rosdep/ruby.yaml\nHit https://raw.githubusercontent.com/ros/rosdistro/master/releases/fuerte.yaml\nHit file:///workspace/custom_rosdep.yaml\n</code></pre>","tags":["ros","rosdep","bloom","package.xml"]},{"location":"ROS/ros_eco/build_system/rosdep_bloom/#resolve","title":"Resolve","text":"resolve<pre><code>rosdep resolve parameters_utils\n#apt\nros-humble-parameters-utils\n</code></pre>","tags":["ros","rosdep","bloom","package.xml"]},{"location":"ROS/ros_eco/build_system/rosdep_bloom/#bloom","title":"Bloom","text":"<p>A tool for helping release software into git-buildpackage repositories. more</p> install<pre><code>sudo apt-get install python3-bloom\nsudo apt install python3-rosdep \\\n    fakeroot \\\n    debhelper \\\n    dh-python\n</code></pre> <pre><code>bloom-generate rosdebian\n</code></pre> <p></p> <ul> <li>Add custom_rosdep.yaml to workspace</li> <li>Update rosdep sources</li> <li>Run rosdep update</li> </ul> custom_rosdeps.yaml<pre><code>pkg_server:\n  ubuntu:\n    apt: ros-humble-pkg-server\n</code></pre> 30-custom.list<pre><code>yaml file://&lt;workspace full path to yaml file&gt;/custom_rosdep.yaml\n</code></pre> <pre><code># run again\nbloom-generate rosdebian\n</code></pre> <p></p> build deb<pre><code>fakeroot debian/rules binary\n</code></pre>","tags":["ros","rosdep","bloom","package.xml"]},{"location":"ROS/ros_eco/build_system/rosdep_bloom/#check-deb-package","title":"Check deb package","text":"dpkg -I<pre><code>dpkg -I ros-humble-pkg-client_0.0.0-0jammy_amd64.deb \n#\n new Debian package, version 2.0.\n size 6390 bytes: control archive=1189 bytes.\n     233 bytes,     9 lines      control              \n    2650 bytes,    27 lines      md5sums              \n Package: ros-humble-pkg-client\n Version: 0.0.0-0jammy\n Architecture: amd64\n Maintainer: user &lt;robo2020@gmail.com&gt;\n Installed-Size: 62\n Depends: ros-humble-pkg-server\n Section: misc\n Priority: optional\n Description: TODO: Package description\n</code></pre>","tags":["ros","rosdep","bloom","package.xml"]},{"location":"ROS/ros_eco/build_system/rosdep_bloom/#tools","title":"Tools","text":"<p>Note</p> <p>git-buildpackage is a tool that helps you build Debian packages from a git repository. more</p>","tags":["ros","rosdep","bloom","package.xml"]},{"location":"ROS/ros_eco/build_system/rosdep_bloom/#references","title":"References","text":"<ul> <li>How to release a ROS 2 binary package</li> <li>to read</li> </ul>","tags":["ros","rosdep","bloom","package.xml"]},{"location":"ROS/ros_eco/build_system/rosdep_bloom/#todo-learn-more","title":"Todo: learn more","text":"","tags":["ros","rosdep","bloom","package.xml"]},{"location":"ROS/ros_eco/build_system/tips_settings/","title":"Tips / Settings","text":"","tags":["ros","colcon","tips","settings"]},{"location":"ROS/ros_eco/build_system/tips_settings/#colcon-auto-completion","title":"Colcon auto completion","text":"<p>colcon site</p> <p>source <code>colcon_argcomplete</code> in your <code>.bashrc</code> file</p> <pre><code># debian install location\nsource /usr/share/colcon_argcomplete/hook/colcon-argcomplete.bash\n</code></pre>","tags":["ros","colcon","tips","settings"]},{"location":"ROS/ros_eco/build_system/tips_settings/#colcon-defaults","title":"colcon defaults","text":"<p>colcon read the docs</p> <p>Set default option for <code>colcon</code> by create file <code>colcon_defaults.yaml</code> file at <code>workspace</code> directory.</p> colcon_defaults.yaml<pre><code>build:\n  # Use symlink install to speed up builds\n  symlink-install: true\n  # Set build type (e.g., Release or Debug)\n  cmake-args:\n    - \"-DCMAKE_BUILD_TYPE=Release\"\n\ntest:\n  # Run tests in parallel\n  parallel-workers: 4\n\n# Additional settings for colcon test and other commands\ntest-result:\n  verbose: true\n</code></pre>","tags":["ros","colcon","tips","settings"]},{"location":"ROS/ros_eco/launch/","title":"ROS2 launch","text":"<p>Launch system is used to start multiple nodes and configure their execution. The Python-based launch system (launch_ros) provides flexibility through Python scripts.</p> <p>Actions</p> <p>Substitute</p> <p>Events and condition</p>","tags":["ros","launch"]},{"location":"ROS/ros_eco/launch/#minimal-example","title":"Minimal example","text":"minimal launch file to run ros2 node<pre><code>from launch import LaunchDescription\nfrom launch_ros.actions import Node\n\ndef generate_launch_description():\n    ld = LaunchDescription()\n\n    node = Node(\n        package='your_package_name',\n        executable='your_node_executable',\n        name='your_node_name',\n        output='screen'\n    )\n\n    ld.add_action(node)\n\n    return ld\n</code></pre> cmake copy launch to share<pre><code>install(DIRECTORY launch/\n  DESTINATION share/${PROJECT_NAME}/launch\n)\n</code></pre>","tags":["ros","launch"]},{"location":"ROS/ros_eco/launch/#ros2-launch-system-api","title":"ROS2 Launch system API","text":"<ul> <li>launch.substitutions: Tools for dynamic values, e.g.:<ul> <li>LaunchConfiguration: References launch arguments.</li> <li>TextSubstitution: Inserts static text.</li> <li>PythonExpression: Evaluates Python expressions.</li> </ul> </li> <li> <p>launch.conditions: Conditional execution (e.g., IfCondition, UnlessCondition).</p> </li> <li> <p>DeclareLaunchArgument and LaunchConfiguration</p> </li> <li>PathJoinSubstitution</li> <li>IncludeLaunchDescription</li> <li>EnvironmentVariable</li> <li>Conditions</li> <li>events</li> </ul>","tags":["ros","launch"]},{"location":"ROS/ros_eco/launch/environment_variable/","title":"Environment variable","text":"set use_sim_time parameter from environment variable<pre><code>from launch import LaunchDescription\nfrom launch_ros.actions import Node\nfrom launch.substitutions import EnvironmentVariable, PythonExpression\n\ndef generate_launch_description():\n    # Get the environment variable as a string\n    use_sim_time_str = EnvironmentVariable('USE_SIM_TIME', default_value='false')\n\n    # Convert to boolean using PythonExpression\n    use_sim_time = PythonExpression([\"'\", use_sim_time_str, \"' == 'true'\"])\n\n    example_node = Node(\n        package='your_package_name',\n        executable='your_node_executable',\n        name='example_node',\n        parameters=[{\n            'use_sim_time': use_sim_time\n        }]\n    )\n\n    return LaunchDescription([\n        example_node\n    ])\n</code></pre>","tags":["ros2","launch","python","EnvironmentVariable"]},{"location":"ROS/ros_eco/launch/launch_config_and_argument/","title":"DeclareLaunchArgument and LaunchConfiguration","text":"","tags":["ros2","launch","python","DeclareLaunchArgument","LaunchConfiguration"]},{"location":"ROS/ros_eco/launch/launch_config_and_argument/#declarelaunchargument","title":"DeclareLaunchArgument","text":"<p>Defines an argument (a variable) that can be passed to a launch file via  CLI , each argument can have default value.</p>","tags":["ros2","launch","python","DeclareLaunchArgument","LaunchConfiguration"]},{"location":"ROS/ros_eco/launch/launch_config_and_argument/#launchconfiguration","title":"LaunchConfiguration","text":"<p>LaunchConfiguration represents the value of a launch argument at runtime. It acts as a placeholder or reference to an argument declared with DeclareLaunchArgument</p> launch_argument_demo.launch.py<pre><code>from launch import LaunchDescription\nfrom launch.actions import DeclareLaunchArgument\nfrom launch.substitutions import LaunchConfiguration\nfrom launch_ros.actions import Node\nfrom launch.actions import LogInfo\n\ndef generate_launch_description():\n    ld = LaunchDescription()\n\n    arg1_decalre = DeclareLaunchArgument('arg1', description=\"simple arg1 for demo\", default_value='hello world')\n    arg1 = LaunchConfiguration('arg1')\n\n    log1 = LogInfo(msg=[\"argument demo from cli using subsitution \",arg1])\n\n    ld.add_action(arg1_decalre)\n    ld.add_action(log1)\n    return ld\n</code></pre>","tags":["ros2","launch","python","DeclareLaunchArgument","LaunchConfiguration"]},{"location":"ROS/ros_eco/launch/launch_config_and_argument/#usage","title":"usage","text":"list all launch arguments<pre><code># Output default value\nros2 launch launch_tutorial args_log_demo.launch.py \n#\n[INFO] [launch.user]: Argument 'arg1' value: hello world\n</code></pre> run with argument<pre><code># Show launch arguments\nros2 launch launch_tutorial args_log_demo.launch.py -s\n#\nArguments (pass arguments as '&lt;name&gt;:=&lt;value&gt;'):\n\n    'arg1':\n        simple arg1 for demo\n        (default: 'hello world')\n\n# Get Argument from CLI\nros2 launch launch_tutorial args_log_demo.launch.py arg1:=\"data to arg1 from cli\"\n#\n[INFO] [launch.user]: Argument 'arg1' value: data to arg1 from cli\n</code></pre>","tags":["ros2","launch","python","DeclareLaunchArgument","LaunchConfiguration"]},{"location":"ROS/ros_eco/launch/launch_events/","title":"Launch file event API","text":"<p>Reference</p>","tags":["ros2","launch","python","events","OnExecutionComplete","OnProcessExit","OnProcessIO","OnProcessStart","OnShutdown"]},{"location":"ROS/ros_eco/launch/launch_include_demo/","title":"IncludeLaunchDescription","text":"<p>IncludeLaunchDescription method allows to include one launch description (essentially a sub-launch file) inside another, enabling better organization and scalability of complex robot systems. This is particularly useful when you want to break down a large system into smaller, reusable components.</p>","tags":["ros2","launch","python","IncludeLaunchDescription","PythonLaunchDescriptionSource"]},{"location":"ROS/ros_eco/launch/launch_include_demo/#demo-very-simple","title":"Demo: Very simple","text":"<p>Parent launch file <code>include_demo.launch.py</code> include the <code>args_log_demo.launch.py</code> as sub launch</p> <ul> <li><code>args_log_demo.launch.py</code> use as sub launch</li> <li><code>include_demo.launch.py</code> us as parent launch</li> </ul> args_log_demo.launch.py<pre><code>from launch import LaunchDescription\nfrom launch.actions import DeclareLaunchArgument\nfrom launch.substitutions import LaunchConfiguration\nfrom launch.actions import LogInfo\n\ndef generate_launch_description():\n    ld = LaunchDescription()\n\n    arg1_decalre = DeclareLaunchArgument('arg1', description=\"simple arg1 for demo\", default_value='hello world')\n    arg1 = LaunchConfiguration('arg1')\n\n    log1 = LogInfo(msg=[\"Argument 'arg1' value: \",arg1])\n\n    ld.add_action(arg1_decalre)\n    ld.add_action(log1)\n    return ld\n</code></pre> include_demo.launch.py<pre><code>from launch import LaunchDescription\nfrom launch.actions import IncludeLaunchDescription\nfrom launch.launch_description_sources import PythonLaunchDescriptionSource\nfrom ament_index_python.packages import get_package_share_directory\nimport os\n\ndef generate_launch_description():\n    ld = LaunchDescription()\n    my_robot_pkg = get_package_share_directory('launch_tutorial')\n\n    robot_launch = IncludeLaunchDescription(\n        PythonLaunchDescriptionSource(\n            os.path.join(my_robot_pkg, 'launch', 'args_log_demo.launch.py')\n        ),\n        launch_arguments={\n            'arg1': 'call from parent',\n        }.items()\n    )\n\n    ld.add_action(robot_launch)\n    return ld\n</code></pre>","tags":["ros2","launch","python","IncludeLaunchDescription","PythonLaunchDescriptionSource"]},{"location":"ROS/ros_eco/launch/launch_include_demo/#usage","title":"usage","text":"<pre><code>ros2 launch launch_tutorial include_demo.launch.py \n# result\n[INFO] [launch]: Default logging verbosity is set to INFO\n[INFO] [launch.user]: Argument 'arg1' value: call from parent\n</code></pre>","tags":["ros2","launch","python","IncludeLaunchDescription","PythonLaunchDescriptionSource"]},{"location":"ROS/ros_eco/launch/launch_path_and_paramfile/","title":"PathJoinSubstitution and parameter config file","text":"<p>Using <code>PathJoinSubstitution</code> to build path to parameter yaml file.</p>","tags":["ros2","launch","python","PathJoinSubstitution","parameters"]},{"location":"ROS/ros_eco/launch/launch_path_and_paramfile/#project","title":"Project","text":"<pre><code>\u251c\u2500\u2500 CMakeLists.txt\n\u251c\u2500\u2500 config\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 params.yaml\n\u251c\u2500\u2500 launch\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 param_yaml_demo.launch.py\n\u251c\u2500\u2500 launch_tutorial\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 simple_node.py\n\u251c\u2500\u2500 package.xml\n\u2514\u2500\u2500 src\n</code></pre> param.yaml config/params.yaml<pre><code>/**:\n  ros__parameters:\n    arg1: \"from param file\"\n</code></pre> param_yaml_demo.launch.py launch/param_yaml_demo.launch<pre><code>import os\n\nfrom ament_index_python.packages import get_package_share_directory\nfrom launch import LaunchDescription\nfrom launch.actions import DeclareLaunchArgument\nfrom launch.substitutions import PathJoinSubstitution\nfrom launch.launch_description_sources import PythonLaunchDescriptionSource\nfrom launch.substitutions import LaunchConfiguration\nfrom launch_ros.actions import Node\n\n\ndef generate_launch_description():\n    ld = LaunchDescription()\n\n    config_file = PathJoinSubstitution([\n        get_package_share_directory('launch_tutorial'),\n        'config',\n        'params.yaml'\n    ])\n\n    node = Node(\n        package='launch_tutorial',\n        executable='simple_node.py',\n        name='simple',\n        output='screen',\n        parameters=[config_file])\n\n    ld.add_action(node)\n    return ld\n</code></pre> simple_node.py <pre><code>#!/usr/bin/env python3\n\nimport rclpy\nfrom rclpy.node import Node\n\nclass MyNode(Node):\n    def __init__(self):\n        node_name=\"minimal\"\n        super().__init__(node_name)\n        self.declare_parameter('arg1', \"hello default\")\n        self.get_logger().info(\"Hello ROS2\")\n        self.get_logger().info(self.get_parameter(\"arg1\").value)\n\ndef main(args=None):\n    rclpy.init(args=args)\n    node = MyNode()\n    rclpy.spin(node)\n    node.destroy_node()\n    rclpy.shutdown()\n\nif __name__ == '__main__':\n    main()\n</code></pre>","tags":["ros2","launch","python","PathJoinSubstitution","parameters"]},{"location":"ROS/ros_eco/launch/launch_actions/","title":"ROS2 Launch Actions","text":"<ul> <li>Node (from launch_ros.actions): Launches a ROS 2 node.</li> <li>IncludeLaunchDescription: Embeds another launch file.</li> <li>ExecuteProcess: Runs a generic process.</li> <li>DeclareLaunchArgument: Defines launch arguments.</li> </ul>","tags":["ros","launch","actions","node"]},{"location":"ROS/ros_eco/launch/launch_actions/#node","title":"Node","text":"<ul> <li>package: The ROS 2 package containing the node.</li> <li>executable: The name of the executable (e.g., script or binary).</li> <li>name: The name of the node instance (optional, overrides the default node name).</li> <li>parameters: A list or dict of parameters to pass to the node.</li> <li>arguments: Command-line arguments for the executable (non-ROS args).</li> <li>output='screen': Ensures logs are visible in the terminal</li> <li>respawn=True: Automatically restarts the node if it crashes.</li> <li>respawn_delay=5.0: Delay before respawning the node.</li> <li>namespace: Places the node in a ROS 2 namespace, prefixing its topics, services, and parameters.</li> <li>remappings: Renames topics or services the  node uses. list of tuples. <code>[('old_topic', 'new_topic')]</code></li> <li>additional_env: Sets environment variables for the node. Dictionary of key-value pairs.</li> <li>condition: Specifies a condition for launching the node. If the condition is not met, the node won't be launched.</li> <li>prefix: Adds a command prefix (e.g., gdb for debugging).</li> <li>emulate_tty: ??</li> </ul>","tags":["ros","launch","actions","node"]},{"location":"ROS/ros_eco/launch/launch_events_and_condition/","title":"ROS2 Launch Events and Conditions","text":"","tags":["ros","launch","events","condition"]},{"location":"ROS/ros_eco/launch/launch_events_and_condition/#launch-events","title":"Launch Events","text":"<ul> <li>OnProcessStart: Triggers when a process (like a node) starts</li> <li>OnProcessExit: Triggers when a process exits</li> <li>OnShutdown: Triggers when the system is shutting down ??</li> </ul>","tags":["ros","launch","events","condition"]},{"location":"ROS/ros_eco/launch/launch_events_and_condition/#conditions","title":"Conditions","text":"<p>Conditions allow you to include or exclude actions based on certain logic.</p> <ul> <li>IfCondition</li> <li>UnlessCondition</li> </ul>","tags":["ros","launch","events","condition"]},{"location":"ROS/ros_eco/launch/launch_substitute/","title":"ROS2 Launch Substitute","text":"<p>Substitutions are used \u2014 they allow you to compute or insert values dynamically during the launch process.</p> <ul> <li>LaunchConfiguration</li> <li>PathJoinSubstitution</li> <li>FindPackageShare</li> <li>EnvironmentVariable</li> <li>TextSubstitution</li> <li>Command</li> </ul>","tags":["ros","launch","substitute"]},{"location":"ROS/ros_eco/packages/","title":"Index","text":"<p>ROS/ros_eco/packages</p>","tags":["ros","packages"]},{"location":"ROS/ros_eco/packages/#ros-eco-system","title":"ROS Eco system","text":"<p>Ros packages and tools that are used in the ROS eco system.</p> <p>Diagnostics</p> <p>parameters generate</p> <p>TBD</p> <p>Mavros</p> <p>TBD</p> <p>TBD</p>","tags":["ros","packages"]},{"location":"ROS/ros_eco/packages/#gscam","title":"Gscam","text":"<p>ROS Package for broadcasting gstreamer video stream via ROS2 camera API, more</p>","tags":["ros","packages"]},{"location":"ROS/ros_eco/packages/#message_filters","title":"Message_filters","text":"<p>Message_filters is a collection of message \"filters\" which take messages in. and may or may not output the message at some time in the future, depending on a policy defined for that filter. more</p>","tags":["ros","packages"]},{"location":"ROS/ros_eco/packages/#topic_tools","title":"topic_tools","text":"<p>Tools for directing, throttling, selecting, and otherwise manipulating ROS 2 topics at a meta-level. These tools do not generally perform serialization on the streams being manipulated, instead acting on generic binary data using rclcpp's GenericPublisher and GenericSubscription ros_packages_topic_tools</p>","tags":["ros","packages"]},{"location":"ROS/ros_eco/packages/ros_package_message_filter/","title":"Message Filters","text":"<p>Message_filters is a collection of message \"filters\" which take messages in. and may or may not output the message at some time in the future, depending on a policy defined for that filter. more</p> <p>Tutorials</p>","tags":["ros","packages","message_filters"]},{"location":"ROS/ros_eco/packages/ros_package_message_filter/#timesynchronizer-demo","title":"TimeSynchronizer demo","text":"<p>TimeSynchronizer listens on multiple input message and invokes the callback when it has a collection of messages with matching timestamps.</p> TimeSynchronizer <pre><code>#!/usr/bin/env python3\n\nimport rclpy\nfrom rclpy.node import Node\nfrom rclpy.time import Time\n\nimport message_filters\nfrom geometry_msgs.msg import PointStamped\n\nclass MyNode(Node):\n    def __init__(self):\n        node_name=\"TimeSynchronizer_demo\"\n        super().__init__(node_name)\n        self.get_logger().info(\"Hello ROS2\")\n        self.pub1 = self.create_publisher(PointStamped, \"topic1\", 10)\n        self.pub2 = self.create_publisher(PointStamped, \"topic2\", 10)\n\n        sub1 = message_filters.Subscriber(self, PointStamped, \"topic1\")\n        sub2 = message_filters.Subscriber(self, PointStamped, \"topic2\")\n\n        ts = message_filters.TimeSynchronizer([sub1, sub2], 10)\n        ts.registerCallback(self.cb)\n        self.counter = 0\n        self.t1 = self.create_timer(1.0, self.timer_cb)\n\n    def cb(self, point1: PointStamped, point2: PointStamped):\n        self.get_logger().info(f\"----{Time.from_msg(point1.header.stamp)}\")\n\n    def timer_cb(self):\n        self.counter += 1\n        point = PointStamped()\n        sync_time = self.get_clock().now().to_msg()\n        point.header.stamp = sync_time\n        point.point.x = 1.0\n        self.pub1.publish(point)\n        if not (self.counter % 2 == 0):\n            point2 = PointStamped()\n            point2.header.stamp = sync_time\n            point2.point.x = 2.0\n            self.pub2.publish(point2)\n\n\ndef main(args=None):\n    rclpy.init(args=args)\n    node = MyNode()\n    rclpy.spin(node)\n    node.destroy_node()\n    rclpy.shutdown()\n\nif __name__ == '__main__':\n    main()\n</code></pre> <p>The demo publish two PointStamped messages with the same timestamp  - one message is published every second  - other every two seconds. The TimeSynchronizer will invoke the callback when it has both in the same time , meaning it publish every two seconds.</p>","tags":["ros","packages","message_filters"]},{"location":"ROS/ros_eco/packages/ros_package_message_filter/#approximatetimesynchronizer-demo","title":"ApproximateTimeSynchronizer demo","text":"<p>Like the TimeSynchronizer demo, but with a time window. The callback will be invoked when the timestamps of the messages are within the time window. the slop argument is the time window in seconds.</p> ApproximateTimeSynchronizer <pre><code>#!/usr/bin/env python3\n\nimport rclpy\nfrom rclpy.node import Node\nfrom rclpy.time import Time\nimport time\nimport message_filters\nfrom geometry_msgs.msg import PointStamped\n\nclass MyNode(Node):\n    def __init__(self):\n        node_name=\"ApproximateTimeSynchronizer_demo\"\n        super().__init__(node_name)\n        self.get_logger().info(\"Hello ROS2\")\n        self.pub1 = self.create_publisher(PointStamped, \"topic1\", 10)\n        self.pub2 = self.create_publisher(PointStamped, \"topic2\", 10)\n\n        sub1 = message_filters.Subscriber(self, PointStamped, \"topic1\")\n        sub2 = message_filters.Subscriber(self, PointStamped, \"topic2\")\n\n        ts = message_filters.ApproximateTimeSynchronizer([sub1, sub2], 10, slop=0.2)\n        ts.registerCallback(self.cb)\n        self.counter = 0\n        self.t1 = self.create_timer(1.0, self.timer_cb)\n\n    def cb(self, point1: PointStamped, point2: PointStamped):\n        self.get_logger().info(f\"----{Time.from_msg(point1.header.stamp)}\")\n\n    def timer_cb(self):\n        self.counter += 1\n        point = PointStamped()\n        point.header.stamp = self.get_clock().now().to_msg()\n        point.point.x = 1.0\n        self.pub1.publish(point)\n        time.sleep(0.1)\n        point2 = PointStamped()\n        point2.header.stamp = self.get_clock().now().to_msg()\n        point2.point.x = 2.0\n        self.pub2.publish(point2)\n\n\ndef main(args=None):\n    rclpy.init(args=args)\n    node = MyNode()\n    rclpy.spin(node)\n    node.destroy_node()\n    rclpy.shutdown()\n\nif __name__ == '__main__':\n    main()\n</code></pre> <p>The demo publish two PointStamped messages with timestamps that are within 0.1 seconds of each other</p> <p>The ApproximateTimeSynchronizer will invoke the callback when it has both in the same time window, meaning it publish every second.</p>","tags":["ros","packages","message_filters"]},{"location":"ROS/ros_eco/packages/diagnostics/","title":"ROS diagnostics","text":"<p>ROS diagnostics gives you the ability to monitor your system. There are two components in its architecture:</p> <ul> <li>diagnostic_updater</li> <li>diagnostic_aggregator</li> </ul> <p>The diagnostic_updater publishes diagnostic status messages on the <code>/diagnostics</code> topic, and the aggregator listens to these statuses, aggregates them, and publishes the results on the <code>/diagnostics_agg</code> topic.</p>","tags":["ros","diagnostics"]},{"location":"ROS/ros_eco/packages/diagnostics/#diagnostic_updater","title":"diagnostic_updater","text":"<p>Provide an easy way to publish diagnostic information from node </p>","tags":["ros","diagnostics"]},{"location":"ROS/ros_eco/packages/diagnostics/#diagnostic_aggregator","title":"diagnostic_aggregator","text":"<p>The aggregator collects, categorizes, and groups the statuses from all the system components. You can take a look at what is being published on the /diagnostics and /diagnostics_agg topics with the rqt_runtime_monitor and rqt_robot_monitor tools</p> <p>Diagnostic Tasks</p> <p>Diagnostic aggregator</p> <p>Diagnostic monitor</p>","tags":["ros","diagnostics"]},{"location":"ROS/ros_eco/packages/diagnostics/#install","title":"install","text":"<pre><code>sudo apt update\nsudo apt install -y \\\n  ros-humble-diagnostic-updater \\\n  ros-humble-diagnostic-aggregator \\\n  ros-humble-diagnostic-msgs \\\n  ros-humble-diagnostic-common-diagnostics\n\n# rqt\nsudo apt install ros-humble-rqt-robot-monitor\nsudo apt install ros-humble-rqt-runtime-monitor\n</code></pre>","tags":["ros","diagnostics"]},{"location":"ROS/ros_eco/packages/diagnostics/#diagnostics_msg","title":"diagnostics_msg","text":"<ul> <li>DiagnosticStatus.msg</li> <li>DiagnosticArray</li> </ul> <pre><code>octet OK=0\noctet WARN=1\noctet ERROR=2\noctet STALE=3\noctet level\nstring name\nstring message\nstring hardware_id\ndiagnostic_msgs/msg/KeyValue[] values\n</code></pre>","tags":["ros","diagnostics"]},{"location":"ROS/ros_eco/packages/diagnostics/#diagnostic_aggregator_1","title":"diagnostic_aggregator","text":"<p>Aggregator is a node that subscribes to <code>/diagnostics</code>, processes it and republishes aggregated data on <code>/diagnostics_agg</code>.</p> <p>The aggregator creates a series of analyzers to handle incoming <code>DiagnosticStatus</code></p> <p>API</p> <p></p> <p></p>","tags":["ros","diagnostics"]},{"location":"ROS/ros_eco/packages/diagnostics/#demos","title":"Demos","text":"<ul> <li>Diagnostic status function - - minimal implementation as diagnostic function</li> <li>DiagnosticTask class - minimal implementation as diagnostic task class</li> <li>Builtin tasks (FrequencyStatus)</li> <li>Remove task</li> <li>Composite task</li> </ul>","tags":["ros","diagnostics"]},{"location":"ROS/ros_eco/packages/diagnostics/#reference","title":"Reference","text":"<ul> <li>REP-107 Diagnostic System for Robots Running ROS</li> <li>ros diagnostic</li> <li>wiki</li> <li>python example</li> </ul>","tags":["ros","diagnostics"]},{"location":"ROS/ros_eco/packages/diagnostics/#projects-to-check","title":"projects to check","text":"<ul> <li>rviz_2d_overlay_plugins)</li> </ul>","tags":["ros","diagnostics"]},{"location":"ROS/ros_eco/packages/diagnostics/diagnostic_aggregator/","title":"Diagnostic aggregator","text":"<p>The Diagnostic Aggregator in ROS 2 is a tool designed to organize and categorize diagnostic messages efficiently.  It helps in monitoring system health by grouping diagnostic messages into a structured hierarchy,  making it easier to analyze the status of different components. it's subscribe to <code>/diagnostic</code> topic and publish to <code>/diagnostic_agg</code> topic. The aggregator make use of Analyzers, The analyzer are plugins that define how diagnostic data is processed, categorized, and reported.</p>","tags":["ros","diagnostic","aggregator"]},{"location":"ROS/ros_eco/packages/diagnostics/diagnostic_aggregator/#analyzer","title":"Analyzer","text":"<p>An analyzer processes incoming diagnostic messages, organizes them into a hierarchical structure, and generates processed diagnostic output. Each analyzer is responsible for:</p> <ul> <li>Matching: Determining which diagnostic messages it should process based on their names or other criteria.</li> <li>Analyzing: Processing the matched messages (e.g., checking for errors, staleness, or specific conditions).</li> <li>Reporting: Producing a structured output, typically as a vector of diagnostic_msgs/DiagnosticStatus messages, with a defined hierarchy.</li> </ul> <p>Analyzers are loaded dynamically by the aggregator_node at runtime using the pluginlib framework, and their behavior is configured via parameters (usually specified in a YAML file).</p> <p>The Aggregator came with few predefine analyzers</p> <ul> <li>GenericAnalyzer</li> <li>AnalyzerGroup</li> <li>DiscardAnalyzer</li> </ul>","tags":["ros","diagnostic","aggregator"]},{"location":"ROS/ros_eco/packages/diagnostics/diagnostic_aggregator/#analyzergroup","title":"AnalyzerGroup","text":"<p>This analyzer acts as a container for other analyzers, enabling hierarchical grouping of diagnostic data. It doesn\u2019t process data itself but delegates to its \"sub-analyzers.\"</p> <p>TODO: create yaml example and demo</p>","tags":["ros","diagnostic","aggregator"]},{"location":"ROS/ros_eco/packages/diagnostics/diagnostic_aggregator/#genericanalyzer","title":"GenericAnalyzer","text":"<p>Matches diagnostic messages based on criteria</p> <ul> <li>path: Defines the category name in the aggregated output.</li> <li>startswith: Groups diagnostics messages that start with a certain prefix.</li> <li>expected: Lists expected diagnostic topics (useful for error checking).</li> <li>contains: Groups messages that contain a specific word.</li> <li>timeout: Monitors staleness (e.g., if a message hasn\u2019t been updated within a timeout period, it\u2019s marked as stale). #TODO: create example</li> </ul> <pre><code>diagnostic_aggregator:\n  ros__parameters:\n    analyzers:\n\n      sensors:\n        type: \"diagnostic_aggregator/GenericAnalyzer\"\n        path: \"Sensors\"\n        startswith: [\"/sensors\"]\n        expected: [\"/sensors/camera\", \"/sensors/lidar\"]\n\n      motors:\n        type: \"diagnostic_aggregator/GenericAnalyzer\"\n        path: \"Motors\"\n        startswith: [\"/motors\"]\n        expected: [\"/motors/left_wheel\", \"/motors/right_wheel\"]\n\n      system:\n        type: \"diagnostic_aggregator/GenericAnalyzer\"\n        path: \"System\"\n        contains: [\"temperature\", \"battery\"]\n</code></pre>","tags":["ros","diagnostic","aggregator"]},{"location":"ROS/ros_eco/packages/diagnostics/diagnostic_aggregator/#expected","title":"expected","text":"<p>The expected parameter in the aggregator checks for the presence of specific name values inside the messages published to /diagnostics.</p> <p>stale</p> <p>In diagnostic_aggregator, stale severity is the severity level assigned to a diagnostic status when a message is not received within the configured timeout. This helps in detecting missing diagnostics.</p>","tags":["ros","diagnostic","aggregator"]},{"location":"ROS/ros_eco/packages/diagnostics/diagnostic_aggregator/#demo-stale-hb-message","title":"Demo: Stale HB message","text":"<ul> <li>Run node with heartbeat diagnostic</li> <li>Run Aggregator</li> <li>Run Monitor</li> <li>When stop the heartbeat , the aggregator alert on staled message</li> </ul> heartbeat node <pre><code>#!/usr/bin/env python3\n\nimport rclpy\nfrom rclpy.node import Node\nfrom diagnostic_updater import Heartbeat, Updater\n\nclass MyNode(Node):\n    def __init__(self):\n        node_name=\"node_name\"\n        super().__init__(node_name)\n        updater = Updater(self)\n        updater.hwid = \"hwid\"\n        self.task = Heartbeat()\n        updater.add(self.task)\n        self.get_logger().info(\"Hello ROS2\")\n\n\n\ndef main(args=None):\n    rclpy.init(args=args)\n    node = MyNode()\n    rclpy.spin(node)\n    node.destroy_node()\n    rclpy.shutdown()\n\nif __name__ == '__main__':\n    main()\n</code></pre> terminal1: heartbeat node1<pre><code>python3 /workspace/src/dia_demo/scripts/diagnostic_hb.py --ros-args -r __node:=node1\n</code></pre> terminal2: heartbeat node2<pre><code>python3 /workspace/src/dia_demo/scripts/diagnostic_hb.py --ros-args -r __node:=node2\n</code></pre> terminal3: diagnostics aggregator<pre><code>ros2 run diagnostic_aggregator aggregator_node --ros-args --params-file /workspace/src/dia_demo/config/dia_agg.yaml\n</code></pre> terminal4: monitor<pre><code>ros2 run rqt_robot_monitor rqt_robot_monitor\n</code></pre> <p>downaload tmuxp script to run all above terminals</p> Aggregator config config/dia_agg.yaml<pre><code>analyzers:\n  ros__parameters:\n    analyzers:\n      master_caution:\n        type: 'diagnostic_aggregator/AnalyzerGroup'\n        path: master_caution\n        analyzers:\n          node_hb:\n            type: diagnostic_aggregator/GenericAnalyzer\n            path: node1\n            find_and_remove_prefix: [\"node1: \"]\n            expected: [ 'node1: Heartbeat']\n            timeout: 2.0\n          node2:\n            type: diagnostic_aggregator/GenericAnalyzer\n            path: node2\n            find_and_remove_prefix: [\"node2: \"]\n            expected: [ 'node2: Heartbeat']\n            timeout: 2.0\n</code></pre> <p></p> <ul> <li> <p>Node 1 stop running </p> </li> <li> <p>Node 2 stop running </p> </li> </ul>","tags":["ros","diagnostic","aggregator"]},{"location":"ROS/ros_eco/packages/diagnostics/diagnostic_aggregator/#demo-ignore-messages","title":"Demo: Ignore messages","text":"<ul> <li>Use to heartbeat from previous demo</li> <li>Run with new configuration</li> <li>Echo topic <code>diagnostics_agg</code></li> </ul> config <pre><code>analyzers:\n  ros__parameters:\n    analyzers:\n      discard1:\n        type: diagnostic_aggregator/DiscardAnalyzer\n        path: \"remove\"\n        startswith:\n          - \"node1\"\n          - \"node2\"\n</code></pre>","tags":["ros","diagnostic","aggregator"]},{"location":"ROS/ros_eco/packages/diagnostics/diagnostic_aggregator/#usage","title":"usage","text":"<p>Download tmuxp script to run the demo</p> <p></p> <p>empty diagnostic_agg topic</p>","tags":["ros","diagnostic","aggregator"]},{"location":"ROS/ros_eco/packages/diagnostics/diagnostic_monitor/","title":"Diagnostic Monitor","text":"","tags":["ros","diagnostics","monitor"]},{"location":"ROS/ros_eco/packages/diagnostics/diagnostic_monitor/#rqt","title":"RQT","text":"install<pre><code>sudo apt install ros-humble-rqt-robot-monitor\nsudo apt install ros-humble-rqt-runtime-monitor\n</code></pre>","tags":["ros","diagnostics","monitor"]},{"location":"ROS/ros_eco/packages/diagnostics/diagnostic_monitor/#robot-monitor","title":"robot monitor","text":"<p>subscribe to:</p> <ul> <li>/diagnostics_agg</li> </ul>","tags":["ros","diagnostics","monitor"]},{"location":"ROS/ros_eco/packages/diagnostics/diagnostic_monitor/#robot-runtime-monitor","title":"robot runtime monitor","text":"<p>Show stale message</p> <p>stale</p> <p>In diagnostic_aggregator, stale severity is the severity level assigned to a diagnostic status when a message is not received within the configured timeout. This helps in detecting missing diagnostics.</p> <p>subscribe to:</p> <ul> <li>/diagnostics</li> <li>/diagnostics_agg</li> </ul>","tags":["ros","diagnostics","monitor"]},{"location":"ROS/ros_eco/packages/diagnostics/diagnostic_tasks/","title":"Diagnostic Tasks","text":"<p>DiagnosticTask is an abstract base class for collecting diagnostic data. </p> <p>A DiagnosticTask has a name, and a function that is called to create a DiagnosticStatusWrapper. </p> <p>DiagnosticsTask subclass by</p> <ul> <li>CompositeDiagnosticTask</li> <li>FrequencyStatus</li> <li>GenericFunctionDiagnosticTask</li> <li>Heartbeat</li> <li>TimeStampStatus</li> </ul>","tags":["ros","diagnostic","tasks"]},{"location":"ROS/ros_eco/packages/diagnostics/diagnostic_tasks/#diagnosticstatus-as-a-function","title":"DiagnosticStatus as a function","text":"<p>Implement DiagnosticStatus as function that register to DiagnosticUpdater</p> Demo code <pre><code>#!/usr/bin/env python3\n\nimport rclpy\nfrom rclpy.node import Node\nfrom diagnostic_msgs.msg import DiagnosticStatus\nimport diagnostic_updater\n\ndef dummy_diagnostic(stat: diagnostic_updater.DiagnosticStatusWrapper):\n   stat.message =\"message dummy_diagnostic\"\n   stat.level = DiagnosticStatus.WARN\n   stat.name = \"dummy_diagnostic\"\n\n   return stat\n\nclass MyNode(Node):\n    def __init__(self):\n        node_name=\"minimal\"\n        super().__init__(node_name)\n        updater = diagnostic_updater.Updater(self)\n        updater.add(\"Function updater\", dummy_diagnostic)\n        self.get_logger().info(\"Hello ROS2\")\n\ndef main(args=None):\n    rclpy.init(args=args)\n    node = MyNode()\n    rclpy.spin(node)\n    node.destroy_node()\n    rclpy.shutdown()\n\nif __name__ == '__main__':\n    main()\n</code></pre> <ul> <li> <p>dummy_diagnostic method get one argument stat of type diagnostic_updater.DiagnosticStatusWrapper DiagnosticStatusWrapper is a derived class of diagnostic_msgs.msg.DiagnosticStatus that provides a set of convenience methods.</p> </li> <li> <p>diagnostic_updater use <code>add</code> method to register diagnostic method</p> </li> <li>The updater publish diagnostic message every one second</li> </ul> /diagnostics topic ros2 topic echo /diagnostics<pre><code>---\nheader:\n  stamp:\n    sec: 1743564548\n    nanosec: 360259990\n  frame_id: ''\nstatus:\n- level: \"\\x01\"\n  name: 'minimal: dummy_diagnostic'\n  message: message dummy_diagnostic\n  hardware_id: ''\n  values: []\n---\nheader:\n  stamp:\n    sec: 1743564549\n    nanosec: 360183120\n  frame_id: ''\nstatus:\n- level: \"\\x01\"\n  name: 'minimal: dummy_diagnostic'\n  message: message dummy_diagnostic\n  hardware_id: ''\n  values: []\n</code></pre>","tags":["ros","diagnostic","tasks"]},{"location":"ROS/ros_eco/packages/diagnostics/diagnostic_tasks/#heartbeat","title":"Heartbeat","text":"<p>Diagnostic task to monitor whether a node is alive. This diagnostic task always reports as OK and 'Alive' when it runs</p> Demo code <pre><code>#!/usr/bin/env python3\n\nimport rclpy\nfrom rclpy.node import Node\nfrom diagnostic_updater import Heartbeat, Updater\n\nclass MyNode(Node):\n    def __init__(self):\n        node_name=\"node_name\"\n        super().__init__(node_name)\n        updater = Updater(self)\n        updater.hwid = \"hwid\"\n        self.task = Heartbeat()\n        updater.add(self.task)\n        self.get_logger().info(\"Hello ROS2\")\n\n\n\ndef main(args=None):\n    rclpy.init(args=args)\n    node = MyNode()\n    rclpy.spin(node)\n    node.destroy_node()\n    rclpy.shutdown()\n\nif __name__ == '__main__':\n    main()\n</code></pre> /diagnostic topic <pre><code>---\nheader:\n  stamp:\n    sec: 1743565018\n    nanosec: 240255516\n  frame_id: ''\nstatus:\n- level: \"\\0\"\n  name: 'node_name: Heartbeat'\n  message: Alive\n  hardware_id: hwid\n  values: []\n---\nheader:\n  stamp:\n    sec: 1743565019\n    nanosec: 239948956\n  frame_id: ''\nstatus:\n- level: \"\\0\"\n  name: 'node_name: Heartbeat'\n  message: Alive\n  hardware_id: hwid\n  values: []\n</code></pre>","tags":["ros","diagnostic","tasks"]},{"location":"ROS/ros_eco/packages/generate_parameter_library/","title":"generate_parameter_library","text":"<p>Generate C++ or Python code for ROS 2 parameter declaration, getting, and validation using declarative YAML. The generated library contains a C++ struct with specified parameters. Additionally, dynamic parameters and custom validation are made easy. more</p>","tags":["generate_parameter_library"]},{"location":"ROS/ros_eco/packages/gscam/","title":"GSCAM","text":"<p>ROS Package for broadcasting <code>gstreamer</code> video stream via ROS2 camera API, publish video as <code>sensors_msgs/Image</code> with frame_id and timestamp</p>","tags":["ros","gscam","gstreamer"]},{"location":"ROS/ros_eco/packages/gscam/#demo","title":"Demo","text":"<p>gstreamer pipe</p> <p>input gstreamer pipe can set by environment variable <code>GSCAM_CONFIG</code> or ros parameter <code>gscam_config</code></p> <pre><code>export GSCAM_CONFIG=\"videotestsrc ! video/x-raw,width=640,height=480,framrate=10/1 ! videoconvert\"\n\n#\nros2 run gscam gscam_node\n\n# \nros2 run rqt_image_view rat_image_view\n</code></pre> <p></p>","tags":["ros","gscam","gstreamer"]},{"location":"ROS/ros_eco/packages/gscam/#more-control","title":"More control","text":"","tags":["ros","gscam","gstreamer"]},{"location":"ROS/ros_eco/packages/gscam/#qos","title":"QOS","text":"<p>Run with parameter <code>use_sensor_data_qos:=true</code> to publish as <code>best_effort</code> qos</p> <pre><code>ros2 run gscam gscam_node --ros-args \\\n-p use_sensor_data_qos:=true \\\n-p gscam_config:=\"videotestsrc pattern=basll ! video/x-raw,width=640,height=480,framrate=10/1 ! videoconvert\"\n</code></pre>","tags":["ros","gscam","gstreamer"]},{"location":"ROS/ros_eco/packages/gscam/#camera-info","title":"Camera info","text":"<p>gscam using <code>camera_info_manager</code> package to control <code>camera_info</code> topic , we can change the data using <code>set_camera_info</code> service</p> <p>The init <code>camera_info</code> can control by parameter <code>camera_info_url</code></p> <pre><code>ros2 run gscam gscam_node --ros-args \\\n-p use_sensor_data_qos:=true \\\n-p camera_info_url:=file:///&lt;absolute&gt;/gscam_demo/config/uncalibrated_parameters.ini\n</code></pre> camera calibration file <pre><code># Camera intrinsics\n\n[image]\n\nwidth\n1280\n\nheight\n720\n\n[camera]\n\ncamera matrix\n900.00000 0.00000 640.00000 \n0.00000 900.00000 360.00000 \n0.00000 0.00000 1.00000 \n\ndistortion\n0.10000 -0.05000 0.00100 0.00200 0.00000 \n\n\nrectification\n0.00000 0.00000 0.00000 \n0.00000 0.00000 0.00000 \n0.00000 0.00000 0.00000 \n\nprojection\n0.00000 0.00000 0.00000 0.00000 \n0.00000 0.00000 0.00000 0.00000 \n0.00000 0.00000 0.00000 0.00000 \n</code></pre> <p>Download ini file</p>","tags":["ros","gscam","gstreamer"]},{"location":"ROS/ros_eco/packages/gscam/#update-service","title":"update service","text":"<p>The <code>/set_camera_info</code> service is part of camera_info_manager</p> <p>Note</p> <p>The service update/save the data to source ini file</p> <pre><code>#!/bin/python\n\n\nimport rclpy\nfrom rclpy.node import Node\nfrom sensor_msgs.msg import CameraInfo\nfrom sensor_msgs.srv import SetCameraInfo\n\n\nclass CameraInfoClient(Node):\n    def __init__(self):\n        super().__init__('camera_info_client')\n        self.client = self.create_client(SetCameraInfo, '/set_camera_info')\n\n        # Wait for the service to be available\n        while not self.client.wait_for_service(timeout_sec=3.0):\n            self.get_logger().warn(\"Waiting for /set_camera_info service...\")\n\n        self.send_request()\n\n    def send_request(self):\n        request = SetCameraInfo.Request()\n\n        # Fill the CameraInfo message\n        request.camera_info = CameraInfo()\n        request.camera_info.width = 1280\n        request.camera_info.height = 720\n        request.camera_info.k = [900.0, 0.0, 640.0, 0.0, 900.0, 360.0, 0.0, 0.0, 1.0]  # Intrinsic matrix\n        request.camera_info.d = [0.1, -0.05, 0.001, 0.002, 0.0]  # Distortion coefficients\n        request.camera_info.distortion_model = \"plumb_bob\"\n\n        self.future = self.client.call_async(request)\n        self.future.add_done_callback(self.response_callback)\n\n    def response_callback(self, future):\n        try:\n            response = future.result()\n            if response.success:\n                self.get_logger().info(\"Camera info updated successfully!\")\n            else:\n                self.get_logger().error(\"Failed to update camera info!\")\n        except Exception as e:\n            self.get_logger().error(f\"Service call failed: {str(e)}\")\n\n\ndef main():\n    rclpy.init()\n    node = CameraInfoClient()\n    rclpy.spin(node)\n    node.destroy_node()\n    rclpy.shutdown()\n\n\nif __name__ == '__main__':\n    main()\n</code></pre>","tags":["ros","gscam","gstreamer"]},{"location":"ROS/ros_eco/packages/mavros/","title":"Mavros","text":"<ul> <li>Clock/Time Synchronisation</li> </ul>","tags":["ros","mavros","mavlink","ardupilot"]},{"location":"ROS/ros_eco/packages/mavros/clock_time_sync/","title":"Clock/Time Synchronisation","text":"","tags":["ros","mavlink","time","clock"]},{"location":"ROS/ros_eco/packages/mavros/clock_time_sync/#reference","title":"Reference","text":"<ul> <li>Ardupilot clock/time sync</li> </ul>","tags":["ros","mavlink","time","clock"]},{"location":"ROS/ros_eco/packages/topic_tools/","title":"Topic Tools","text":"<p>Tools for directing, throttling, selecting, and otherwise manipulating ROS 2 topics at a meta-level. These tools do not generally perform serialization on the streams being manipulated, instead acting on generic binary data using rclcpp's GenericPublisher and GenericSubscription</p> <p>github</p> <ul> <li>Relay: Subscribes to a topic and republishes to another.</li> <li>RelayField: Republishes data in a different message type.</li> <li>Transform: Manipulates a topic or a field and outputs data on another topic.</li> <li>Throttle: Republishes data with bandwidth or rate limit.</li> <li>Drop: Republishes by dropping X out of every Y incoming messages.</li> <li>Mux: Multiplexes incoming topics to an output.</li> <li>Delay: Delays and republishes incoming data.</li> </ul>","tags":["ros","package","topic","tools","throttle"]},{"location":"ROS/ros_eco/packages/topic_tools/#throttle","title":"Throttle","text":"<p>Throttle is ROS 2 node that subscribes to a topic and republishes incoming data to another topic, either at a maximum bandwidth or maximum message rate.</p>","tags":["ros","package","topic","tools","throttle"]},{"location":"ROS/ros_eco/packages/topic_tools/#rate-throttle-message","title":"Rate (throttle message)","text":"<pre><code>ros2 run topic_tools throttle messages &lt;in topic&gt; &lt;msgs_per_sec&gt; [out topic]\n</code></pre>","tags":["ros","package","topic","tools","throttle"]},{"location":"ROS/ros_eco/packages/topic_tools/#demo","title":"Demo","text":"<p>Decrease incoming topic rate</p> <ul> <li>Node that publish counter data at 10hz</li> <li>topic tool throttle republish message at 1hz</li> <li>Topic echo to view to throttle output</li> </ul> counter_publisher.py<pre><code>#!/bin/python3\n\nimport rclpy\nfrom rclpy.node import Node\nfrom std_msgs.msg import Int32\n\nclass CounterPublisher(Node):\n    def __init__(self):\n        super().__init__('counter_publisher')\n        self.publisher_ = self.create_publisher(Int32, 'counter', 10)\n        self.counter = 0\n        self.timer = self.create_timer(0.1, self.timer_callback)\n\n    def timer_callback(self):\n        msg = Int32()\n        msg.data = self.counter\n        self.publisher_.publish(msg)\n        self.get_logger().info(f'Publishing: {msg.data}')\n        self.counter += 1\n\ndef main(args=None):\n    rclpy.init(args=args)\n    node = CounterPublisher()\n    rclpy.spin(node)\n    node.destroy_node()\n    rclpy.shutdown()\n\nif __name__ == '__main__':\n    main()\n</code></pre> topic_throttle.yaml<pre><code>session_name: my_session\nwindows:\n  - window_name: my_window\n    layout: even-vertical\n    shell_command_before:\n      - source /opt/ros/humble/setup.bash\n      - export RMW_IMPLEMENTATION=rmw_cyclonedds_cpp\n    panes:\n      - shell_command: #\n          - printf '\\033]2;%s\\033\\\\' 'pub'\n          - python3 /workspace/src/g_stream/scripts/counter_publisher.py\n      - shell_command: #\n          - printf '\\033]2;%s\\033\\\\' 'throttle'\n          - ros2 run topic_tools throttle messages counter 1.0 counter_t\n      - shell_command: #\n          - printf '\\033]2;%s\\033\\\\' 'sub'\n          - ros2 topic echo /counter_t\n</code></pre>","tags":["ros","package","topic","tools","throttle"]},{"location":"ROS/ros_eco/packages/topic_tools/#output","title":"output","text":"","tags":["ros","package","topic","tools","throttle"]},{"location":"ROS/ros_eco/packages/topic_tools/#mux","title":"Mux","text":"<p>Mux is a ROS2 node that subscribes to a set of incoming topics and republishes incoming data from one of them to another topic</p> <pre><code>ros2 run topic_tools mux &lt;outopic&gt; &lt;intopic1&gt; [intopic2...]\n</code></pre>","tags":["ros","package","topic","tools","throttle"]},{"location":"ROS/ros_eco/packages/topic_tools/#demo_1","title":"Demo","text":"<p>Subscribe to multiple (two) image source and select between them using MuxSelect service Using <code>gscam</code> package to create image source</p> <p>Note</p> <ul> <li>list</li> <li>add</li> <li>delete</li> <li>select</li> </ul> topic_mux.yaml<pre><code>session_name: my_session\nwindows:\n  - window_name: my_window\n    layout: even-vertical\n    shell_command_before:\n      - source /opt/ros/humble/setup.bash\n      - export RMW_IMPLEMENTATION=rmw_cyclonedds_cpp\n    panes:\n      - shell_command: #\n          - printf '\\033]2;%s\\033\\\\' 'source1'\n          - export GSCAM_CONFIG=\"videotestsrc ! video/x-raw,width=640,height=480,framerate=30/1 ! videoconvert\"\n          - ros2 run gscam gscam_node --ros-args -r /camera/image_raw:=image1\n      - shell_command: #\n          - printf '\\033]2;%s\\033\\\\' 'source2'\n          - export GSCAM_CONFIG=\"videotestsrc pattern=snow ! video/x-raw,width=640,height=480,framerate=30/1 ! videoconvert\"\n          - ros2 run gscam gscam_node --ros-args -r /camera/image_raw:=image2\n      - shell_command: #\n          - printf '\\033]2;%s\\033\\\\' 'mux'\n          - ros2 run topic_tools mux out_image image1 image2  \n      - shell_command: #\n          - printf '\\033]2;%s\\033\\\\' 'mux'\n          - ros2 run rqt_image_view rqt_image_view out_image\n      - shell_command: \n          - printf '\\033]2;%s\\033\\\\' 'control'\n          - ros2 service call /mux/list topic_tools_interfaces/srv/MuxList \"{}\"\n          # - ros2 service call /mux/select topic_tools_interfaces/srv/MuxSelect \"{topic: 'image2'}\"\n</code></pre>","tags":["ros","package","topic","tools","throttle"]},{"location":"ROS/ros_eco/packages/topic_tools/#todo-check-transform-and-implement-it-in-cpp-using-exprtk-library","title":"TODO: check transform and implement it in cpp using exprTk library","text":"","tags":["ros","package","topic","tools","throttle"]},{"location":"ROS/ros_eco/rviz_rqt/","title":"Rviz RQT and other ROS tools","text":"<p>rqt</p> <p>rviz</p> <p>plotjuggler</p> <p>VSC</p>","tags":["ros","rviz","rqt","tools","plotjuggler","vsc"]},{"location":"ROS/ros_eco/rviz_rqt/plotjuggler/","title":"PlotJuggler","text":"<p>PlotJuggler github</p>","tags":["ros","plot","plotjugller"]},{"location":"ROS/ros_eco/rviz_rqt/plotjuggler/#install","title":"Install","text":"","tags":["ros","plot","plotjugller"]},{"location":"ROS/ros_eco/rviz_rqt/plotjuggler/#ros-package","title":"ROS Package","text":"<pre><code># The install method from snap include ROS2, zmq, websocket and MQTT\nsudo snap install plotjuggler\n#\n#sudo apt install ros-humble-plotjuggler-ros\n</code></pre>","tags":["ros","plot","plotjugller"]},{"location":"ROS/ros_eco/rviz_rqt/plotjuggler/#plugins","title":"Plugins","text":"","tags":["ros","plot","plotjugller"]},{"location":"ROS/ros_eco/rviz_rqt/plotjuggler/#websocket","title":"Websocket","text":"code <pre><code>pip install websocket-client\n</code></pre> <pre><code>import websocket\nimport math\nimport json\nfrom time import sleep\nimport numpy as np\n\n\nws = websocket.WebSocket()\nws.connect(\"ws://localhost:9871\")\n\n\ntime = 0.0\n\nwhile True:\n   sleep(0.05)\n   time += 0.05\n   print(time)\n   data = {\n       \"timestamp\": time,\n       \"test_data\": {\n           \"cos\": math.cos(time),\n           \"sin\": math.sin(time),\n           \"floor\": np.floor(np.cos(time)),\n           \"ceil\": np.ceil(np.cos(time))\n       }\n   }\n\n   ws.send(json.dumps(data))\n</code></pre>","tags":["ros","plot","plotjugller"]},{"location":"ROS/ros_eco/rviz_rqt/plotjuggler/#usage","title":"Usage","text":"<p>Config plotjuggle to websocket listener that get json data</p> <p></p>","tags":["ros","plot","plotjugller"]},{"location":"ROS/ros_eco/rviz_rqt/plotjuggler/#zmq","title":"ZMQ","text":"code <pre><code>pip install websocket-client\n</code></pre> <pre><code>import zmq\nimport math\nimport json\nfrom time import sleep\nimport numpy as np\n\n\ncontext = zmq.Context()\nserverSocket = context.socket(zmq.PUB)\nport = 9872\nserverSocket.bind(\"tcp://*:\"+str(port))\ntime = 0.0\nwhile True:\n   sleep(0.05)\n   time += 0.05\n   print(time)\n   data = {\n       \"timestamp\": time,\n       \"test_data\": {\n           \"cos\": math.cos(time),\n           \"sin\": math.sin(time),\n           \"floor\": np.floor(np.cos(time)),\n           \"ceil\": np.ceil(np.cos(time))\n       }\n\n   }\n\n   serverSocket.send_string(json.dumps(data))\n</code></pre>","tags":["ros","plot","plotjugller"]},{"location":"ROS/ros_eco/rviz_rqt/plotjuggler/#usage_1","title":"usage","text":"","tags":["ros","plot","plotjugller"]},{"location":"ROS/ros_eco/rviz_rqt/plotjuggler/#mqtt","title":"MQTT","text":"","tags":["ros","plot","plotjugller"]},{"location":"ROS/ros_eco/rviz_rqt/plotjuggler/#prerequisites","title":"Prerequisites","text":"<p>Install mqtt broker on ubuntu machine</p> <pre><code>sudo apt install mosquitto mosquitto-clients\n</code></pre> <pre><code>sudo systemctl status mosquitto\n</code></pre>","tags":["ros","plot","plotjugller"]},{"location":"ROS/ros_eco/rviz_rqt/plotjuggler/#test-mqtt-broker","title":"Test mqtt broker","text":"<ul> <li>Without authentication</li> </ul> terminal 1, subscriber<pre><code>mosquitto_sub -t \"hello/topic\"\n</code></pre> terminal 2, publisher<pre><code>mosquitto_pub -t 'hello/topic' -m 'hello MQTT'\n</code></pre>","tags":["ros","plot","plotjugller"]},{"location":"ROS/ros_eco/rviz_rqt/plotjuggler/#install_1","title":"Install","text":"<pre><code>sudo snap install plotjuggler\n</code></pre>","tags":["ros","plot","plotjugller"]},{"location":"ROS/ros_eco/rviz_rqt/plotjuggler/#python-code","title":"Python code","text":"Python code <pre><code>pip install paho-mqtt numpy\n</code></pre> <pre><code>import paho.mqtt.client as mqtt\nimport math\nimport json\nfrom time import sleep\nimport numpy as np\n\n# MQTT Broker details\nBROKER = \"localhost\"  # Change to your MQTT broker address\nPORT = 1883  # Default MQTT port\nTOPIC = \"sensor/data\"  # MQTT topic to publish data\n\n# Create MQTT client\nclient = mqtt.Client()\nclient.connect(BROKER, PORT, 60)\n\ntime_counter = 0.0\n\nwhile True:\n    sleep(0.05)  # 50 ms sleep for 10 Hz\n    time_counter += 0.05  # Increment time\n\n    # Create data payload\n    data = {\n        \"timestamp\": time_counter,\n        \"test_data\": {\n            \"cos\": math.cos(time_counter),\n            \"sin\": math.sin(time_counter),\n            \"floor\": np.floor(np.cos(time_counter)),\n            \"ceil\": np.ceil(np.cos(time_counter))\n        }\n    }\n\n    # Convert to JSON and publish\n    client.publish(TOPIC, json.dumps(data))\n    print(f\"Published: {data}\")\n</code></pre>","tags":["ros","plot","plotjugller"]},{"location":"ROS/ros_eco/rviz_rqt/plotjuggler/#usage_2","title":"usage","text":"","tags":["ros","plot","plotjugller"]},{"location":"ROS/ros_eco/rviz_rqt/rqt/","title":"RQT","text":"<p>Custom Plugin</p> <p></p> <p></p>","tags":["ros","rqt"]},{"location":"ROS/ros_eco/rviz_rqt/rqt/#install","title":"Install","text":"<p>Install RQT with default plugin</p> <pre><code># source the ros folder before run the command\nsudo apt install ros-${ROS_DISTRO}-rqt ros-${ROS_DISTRO}-rqt-common-plugins\n</code></pre>","tags":["ros","rqt"]},{"location":"ROS/ros_eco/rviz_rqt/rqt/#pliugins","title":"Pliugins","text":"<ul> <li>RQt Image Overlay</li> </ul>","tags":["ros","rqt"]},{"location":"ROS/ros_eco/rviz_rqt/rqt/custom_plugins/","title":"RQT Custom plugin","text":"<p>Create Simple RQT python plugin</p>","tags":["ros","rqt","custom","plugin"]},{"location":"ROS/ros_eco/rviz_rqt/rqt/custom_plugins/#prerequisite","title":"Prerequisite","text":"<pre><code>sudo apt install ros-humble-rqt \nsudo apt install ros-humble-qt-gui \n</code></pre>","tags":["ros","rqt","custom","plugin"]},{"location":"ROS/ros_eco/rviz_rqt/rqt/custom_plugins/#code","title":"Code","text":"<ul> <li>Create ros2 ament_cmake package</li> </ul> <pre><code>\u251c\u2500\u2500 CMakeLists.txt\n\u251c\u2500\u2500 demo_control\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 rqt_demo.py\n\u2502   \u2514\u2500\u2500 rqt_plugin.py\n\u251c\u2500\u2500 package.xml\n\u251c\u2500\u2500 plugin.xml\n\u2514\u2500\u2500 resource\n   \u2514\u2500\u2500 Demo.ui\n</code></pre> CMakeLists.txt<pre><code>&lt;exec_depend&gt;rqt_gui&lt;/exec_depend&gt;\n&lt;exec_depend&gt;rqt_gui_py&lt;/exec_depend&gt;\n&lt;exec_depend&gt;python3-pyqt5&lt;/exec_depend&gt;\n\n&lt;export&gt;\n&lt;build_type&gt;ament_cmake&lt;/build_type&gt;\n\n&lt;rqt_gui plugin=\"${prefix}/plugin.xml\"/&gt; &lt;!--(1)--&gt; \n&lt;/export&gt;\n</code></pre> <ol> <li>Register plugin</li> </ol> plugin.xml<pre><code>&lt;library path=\"src\"&gt;\n&lt;class name=\"demo\" type=\"demo_control.rqt_plugin.DemoPlugin\" base_class_type=\"rqt_gui_py::Plugin\"&gt;\n    &lt;description&gt;\n        Demo rqt plugin\n    &lt;/description&gt;\n    &lt;qtgui&gt;\n        &lt;group&gt;\n            &lt;label&gt;Demo&lt;/label&gt;\n        &lt;/group&gt;\n        &lt;label&gt;simple demo plugin&lt;/label&gt;\n        &lt;icon type=\"theme\"&gt;system-help&lt;/icon&gt;\n        &lt;statustip&gt;Simple demo plugin.&lt;/statustip&gt;\n    &lt;/qtgui&gt;\n&lt;/class&gt;\n&lt;/library&gt;\n</code></pre>","tags":["ros","rqt","custom","plugin"]},{"location":"ROS/ros_eco/rviz_rqt/rqt/custom_plugins/#cmakelists","title":"CMakeLists","text":"<ul> <li>Copy <code>plugin.xml</code> and <code>resource</code> folder into project shared</li> </ul> <pre><code>cmake_minimum_required(VERSION 3.8)\nproject(g_stream_control)\n\nif(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES \"Clang\")\n  add_compile_options(-Wall -Wextra -Wpedantic)\nendif()\n\n# find dependencies\nfind_package(ament_cmake REQUIRED)\nfind_package(ament_cmake_python REQUIRED)\n\nament_python_install_package(${PROJECT_NAME})\n\nset(PLUGIN\n  g_stream_control/rqt_plugin.py\n)\n\n\ninstall(PROGRAMS\n    ${PLUGIN}\nDESTINATION lib/${PROJECT_NAME}\n)\n\ninstall(FILES\n    plugin.xml\n  DESTINATION share/${PROJECT_NAME}\n)\n\ninstall(DIRECTORY\n  resource\nDESTINATION share/${PROJECT_NAME}\n)\n\nament_package()\n</code></pre>","tags":["ros","rqt","custom","plugin"]},{"location":"ROS/ros_eco/rviz_rqt/rqt/custom_plugins/#plugin","title":"Plugin","text":"<ul> <li>Load widget</li> <li>Init ros</li> </ul> <pre><code>#!/usr/bin/env python3\n\n\nimport rclpy\nfrom rclpy.node import Node\nfrom qt_gui.plugin import Plugin\nfrom std_srvs.srv import SetBool, Trigger\nfrom g_stream_interface.srv import Preset\nfrom .rqt_demo import DemoWidget\nfrom rcl_interfaces.srv import SetParameters\nfrom rcl_interfaces.msg import Parameter, ParameterValue\nfrom functools import partial\n\nclass DemoPlugin(Plugin):\n    def __init__(self, context):\n        super(DemoPlugin, self).__init__(context)\n\n        # load ui\n        self._widget = DemoWidget()\n        self.setObjectName('RQTDemo')\n\n        # init ros node\n        self.node = context.node if context.node else rclpy.create_node(\"my_rqt_plugin\")\n</code></pre>","tags":["ros","rqt","custom","plugin"]},{"location":"ROS/ros_eco/rviz_rqt/rqt/custom_plugins/#widget","title":"Widget","text":"<ul> <li>Load <code>ui</code> file</li> </ul> rqt_demo.py<pre><code>import os\nfrom ament_index_python import get_resource\nfrom python_qt_binding import loadUi\nfrom python_qt_binding.QtWidgets import QWidget\n\n\nclass DemoWidget(QWidget):\n    def __init__(self):\n        super(DemoWidget, self).__init__()\n\n        _, package_path = get_resource('packages', 'demo_control')\n        ui_file = os.path.join(package_path, 'share', 'demo_control', 'resource', 'Demo.ui')\n        loadUi(ui_file, self)\n</code></pre>","tags":["ros","rqt","custom","plugin"]},{"location":"ROS/ros_eco/rviz_rqt/rqt/custom_plugins/#ui","title":"ui","text":"Demo.ui<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;ui version=\"4.0\"&gt;\n &lt;class&gt;TopicWidget&lt;/class&gt;\n &lt;widget class=\"QWidget\" name=\"TopicWidget\"&gt;\n  &lt;property name=\"geometry\"&gt;\n   &lt;rect&gt;\n    &lt;x&gt;0&lt;/x&gt;\n    &lt;y&gt;0&lt;/y&gt;\n    &lt;width&gt;731&lt;/width&gt;\n    &lt;height&gt;412&lt;/height&gt;\n   &lt;/rect&gt;\n  &lt;/property&gt;\n  &lt;property name=\"windowTitle\"&gt;\n   &lt;string&gt;Demo plugin&lt;/string&gt;\n  &lt;/property&gt;\n  &lt;widget class=\"QWidget\" name=\"verticalLayoutWidget\"&gt;\n   &lt;property name=\"geometry\"&gt;\n    &lt;rect&gt;\n     &lt;x&gt;170&lt;/x&gt;\n     &lt;y&gt;60&lt;/y&gt;\n     &lt;width&gt;160&lt;/width&gt;\n     &lt;height&gt;251&lt;/height&gt;\n    &lt;/rect&gt;\n   &lt;/property&gt;\n   &lt;layout class=\"QVBoxLayout\" name=\"verticalLayout\"&gt;\n\n    &lt;item&gt;\n     &lt;widget class=\"QPushButton\" name=\"pushButton\"&gt;\n      &lt;property name=\"text\"&gt;\n       &lt;string&gt;Demo&lt;/string&gt;\n      &lt;/property&gt;\n     &lt;/widget&gt;\n    &lt;/item&gt;\n   &lt;/layout&gt;\n  &lt;/widget&gt;\n &lt;/widget&gt;\n &lt;resources/&gt;\n &lt;connections/&gt;\n&lt;/ui&gt;\n</code></pre>","tags":["ros","rqt","custom","plugin"]},{"location":"ROS/ros_eco/rviz_rqt/rqt/custom_plugins/#usage","title":"Usage","text":"<pre><code># -v verbose\n# --force-discover force a rediscover of plugins\nrqt --force-discover -v\n</code></pre>","tags":["ros","rqt","custom","plugin"]},{"location":"ROS/ros_eco/rviz_rqt/rviz/","title":"rviz2","text":"<p>rviz2 is a visualization tool in ROS 2.</p> <p>It provides a 3D GUI to visualize:</p> <ul> <li>Robot models (URDF)</li> <li>Sensor data (e.g., LIDAR, cameras)</li> <li>TF transforms</li> <li>Path planning</li> <li>Maps and occupancy grids</li> </ul>","tags":["ros","rviz"]},{"location":"ROS/ros_eco/rviz_rqt/rviz/#install","title":"install","text":"<pre><code>sudo apt install ros-jazzy-rviz2\nsudo apt install ros-${ROS_DISTRO}-rviz2\n</code></pre>","tags":["ros","rviz"]},{"location":"ROS/ros_eco/rviz_rqt/rviz/#usage","title":"usage","text":"load with config<pre><code># rviz2 -d /path/to/config\n</code></pre> launch file<pre><code>import os\n\nfrom ament_index_python.packages import get_package_share_directory\nfrom launch import LaunchDescription\nfrom launch.substitutions import PathJoinSubstitution\nfrom launch_ros.actions import Node\n\nPKG_BRINGUP = \"turtlebot_bringup\"\n\n\ndef generate_launch_description():\n    ld =  LaunchDescription()\n\n    config_file = PathJoinSubstitution([\n        get_package_share_directory(PKG_BRINGUP),\n        'config',\n        'config.rviz'\n    ])\n\n    rviz_node = Node(\n        package='rviz2',\n        executable='rviz2',\n        name='rviz2',\n        output='screen',\n        arguments=['-d', config_file]\n    )\n\n    ld.add_action(rviz_node)\n    return ld\n</code></pre>","tags":["ros","rviz"]},{"location":"ROS/ros_eco/rviz_rqt/vsc_tool/","title":"VSC Tool","text":"<p>Command-line tools for maintaining a workspace of projects from multiple version-control systems.  ROS Wiki</p> install<pre><code>sudo apt install python3-vcstool\n</code></pre>","tags":["vsc","ros","tools"]},{"location":"ROS/ros_eco/rviz_rqt/vsc_tool/#repos-file","title":"Repos file","text":"project.repo<pre><code>repositories:\n  my_robot_pkg:\n    type: git\n    url: https://github.com/my-org/my_robot_pkg.git\n    version: main\n  nav2_bringup:\n    type: git\n    url: https://github.com/ros-planning/navigation2.git\n    version: humble\n</code></pre>","tags":["vsc","ros","tools"]},{"location":"ROS/ros_eco/rviz_rqt/vsc_tool/#import-and-update","title":"Import and update","text":"import<pre><code>vsc import &lt; project.repos\n</code></pre> update<pre><code>vsc pull\n</code></pre>","tags":["vsc","ros","tools"]},{"location":"ROS/ros_eco/rviz_rqt/vsc_tool/#export","title":"Export","text":"export<pre><code>vsc export &gt; project.repos\n</code></pre>","tags":["vsc","ros","tools"]},{"location":"ROS/ros_eco/rviz_rqt/vsc_tool/#use-case","title":"Use case","text":"<ul> <li>Import <code>.repos</code> file from a GitHub repository or using other whays like <code>curl</code> or <code>wget</code>.</li> <li>Run <code>vsc import</code> to clone the repositories.</li> </ul>","tags":["vsc","ros","tools"]},{"location":"ROS/ros_eco/urdf_xacro_gz_plugin/","title":"URDF, XACRO and Gazebo","text":"<p>URDF</p> <p>xacro</p> <p>Gazebo classic</p> <p>Gazebo harmonic</p>","tags":["xacro","urdf"]},{"location":"ROS/ros_eco/urdf_xacro_gz_plugin/#urdf","title":"URDF","text":"<p>Quick run rviz</p> <p>Quick visualize and manipulate URDF file using RVIZ and joint state publisher <pre><code>sudo apt install ros-humble-urdf-tutorial\n</code></pre></p> <pre><code>ros2 launch urdf_tutorial display.launch.py model:=/gz_tutorial_description/urdf/my_robot.urdf\n</code></pre>","tags":["xacro","urdf"]},{"location":"ROS/ros_eco/urdf_xacro_gz_plugin/#more-arguments","title":"more arguments","text":"<ul> <li>rvizconfig: absolute path to rviz config</li> </ul>","tags":["xacro","urdf"]},{"location":"ROS/ros_eco/urdf_xacro_gz_plugin/#toread","title":"ToRead","text":"<ul> <li>QoS mismatch between gazebo_ros_camera and gazebo_ros_video</li> </ul>","tags":["xacro","urdf"]},{"location":"ROS/ros_eco/urdf_xacro_gz_plugin/urdf_robot_state_publisher/","title":"robot state publisher","text":"<pre><code>sudo apt install ros-${ROS_DISTRO}-xacro\nsudo apt install ros-${ROS_DISTRO}-joint-state-publisher-gui\n</code></pre> terminal1<pre><code># don't forget to the quat when set the robot_description parameter\nros2 run robot_state_publisher robot_state_publisher --ros-args -p robot_description:=\"$(xacro urdf/my_robot.urdf)\"\n</code></pre> terminal2<pre><code>ros2 run joint_state_publisher_gui joint_state_publisher_gui \n</code></pre> terminal3<pre><code>rqt_graph\n</code></pre> <pre><code>install(\n    DIRECTORY urdf\n    DESTINATION share/${PROJECT_NAME}/\n)\n</code></pre>","tags":["urdf","ros","robot_state_publisher"]},{"location":"ROS/ros_eco/urdf_xacro_gz_plugin/urdf_robot_state_publisher/#collision","title":"Collision","text":"<p>Check collision with RVIZ</p>","tags":["urdf","ros","robot_state_publisher"]},{"location":"ROS/ros_eco/urdf_xacro_gz_plugin/urdf_robot_state_publisher/#gazebo-fortress","title":"Gazebo fortress","text":"<p>Migrating ROS 2 packages that use Gazebo Classic</p> <pre><code>sudo apt install ros-humble-ros-gz-sim\n</code></pre>","tags":["urdf","ros","robot_state_publisher"]},{"location":"ROS/ros_eco/urdf_xacro_gz_plugin/urdf_robot_state_publisher/#launch-gazebo","title":"Launch gazebo","text":"launch gazebo<pre><code>ros2 launch ros_gz_sim gz_sim.launch.py\n</code></pre>","tags":["urdf","ros","robot_state_publisher"]},{"location":"ROS/ros_eco/urdf_xacro_gz_plugin/urdf_robot_state_publisher/#spawn-robot-from-file","title":"Spawn robot from file","text":"<pre><code># convert xacro file to urdf\nxacro my_robot.urdf.xacro &gt; my_robot.urdf\n#\nros2 run ros_gz_sim create -name xxx -file src/gz_tutorial_description/urdf/my_robot2.urdf\n</code></pre>","tags":["urdf","ros","robot_state_publisher"]},{"location":"ROS/ros_eco/urdf_xacro_gz_plugin/gazebo_classic/","title":"ROS2 gazebo classic plugins","text":"install<pre><code>sudo apt install ros-humble-gazebo-ros-pkgs\n</code></pre> <ul> <li>Diff drive</li> <li>Camera</li> </ul>","tags":["ros","gazebo classic","plugin"]},{"location":"ROS/ros_eco/urdf_xacro_gz_plugin/gazebo_classic/camera/","title":"ROS2 Gazebo classic Camera Sensor and Plugin","text":"urdf gazebo camera<pre><code>&lt;!-- camera --&gt;\n&lt;gazebo reference=\"camera_link\"&gt;\n  &lt;sensor type=\"camera\" name=\"camera1\"&gt;\n    &lt;update_rate&gt;30.0&lt;/update_rate&gt;\n    &lt;camera name=\"head\"&gt;\n      &lt;horizontal_fov&gt;1.3962634&lt;/horizontal_fov&gt;\n      &lt;image&gt;\n        &lt;width&gt;800&lt;/width&gt;\n        &lt;height&gt;800&lt;/height&gt;\n        &lt;format&gt;R8G8B8&lt;/format&gt;\n      &lt;/image&gt;\n      &lt;clip&gt;\n        &lt;near&gt;0.02&lt;/near&gt;\n        &lt;far&gt;300&lt;/far&gt;\n      &lt;/clip&gt;\n      &lt;noise&gt;\n        &lt;type&gt;gaussian&lt;/type&gt;\n        &lt;!-- Noise is sampled independently per pixel on each frame.\n              That pixel's noise value is added to each of its color\n              channels, which at that point lie in the range [0,1]. --&gt;\n        &lt;mean&gt;0.0&lt;/mean&gt;\n        &lt;stddev&gt;0.007&lt;/stddev&gt;\n      &lt;/noise&gt;\n    &lt;/camera&gt;\n    &lt;plugin name=\"camera_controller\" filename=\"libgazebo_ros_camera.so\"&gt;\n      &lt;alwaysOn&gt;true&lt;/alwaysOn&gt;\n      &lt;updateRate&gt;0.0&lt;/updateRate&gt;\n      &lt;cameraName&gt;rrbot/camera1&lt;/cameraName&gt;\n      &lt;imageTopicName&gt;image_raw&lt;/imageTopicName&gt;\n      &lt;cameraInfoTopicName&gt;camera_info&lt;/cameraInfoTopicName&gt;\n      &lt;frameName&gt;camera_link_optical&lt;/frameName&gt;\n      &lt;hackBaseline&gt;0.07&lt;/hackBaseline&gt;\n      &lt;distortionK1&gt;0.0&lt;/distortionK1&gt;\n      &lt;distortionK2&gt;0.0&lt;/distortionK2&gt;\n      &lt;distortionK3&gt;0.0&lt;/distortionK3&gt;\n      &lt;distortionT1&gt;0.0&lt;/distortionT1&gt;\n      &lt;distortionT2&gt;0.0&lt;/distortionT2&gt;\n    &lt;/plugin&gt;\n  &lt;/sensor&gt;\n&lt;/gazebo&gt;\n</code></pre>","tags":["ros","gazebo","classic","camera"]},{"location":"ROS/ros_eco/urdf_xacro_gz_plugin/gazebo_classic/diff_drive/","title":"ROS2 Diff drive plugin","text":"","tags":["ros2","gazebo","classic","diff"]},{"location":"ROS/ros_eco/urdf_xacro_gz_plugin/gazebo_classic/diff_drive/#demo","title":"Demo","text":"my_robot.gazebo.xacro<pre><code>&lt;?xml version=\"1.0\"?&gt;\n&lt;robot xmlns:xacro=\"http://www.ros.org/wiki/xacro\"&gt;\n\n    &lt;gazebo&gt;\n        &lt;plugin name=\"diff_drive\" filename=\"libgazebo_ros_diff_drive.so\"&gt;\n\n            &lt;!-- Wheel Information --&gt;\n            &lt;left_joint&gt;left_wheel_joint&lt;/left_joint&gt;\n            &lt;right_joint&gt;right_wheel_joint&lt;/right_joint&gt;\n            &lt;wheel_separation&gt;0.297&lt;/wheel_separation&gt;\n            &lt;wheel_diameter&gt;0.066&lt;/wheel_diameter&gt;\n\n\n            &lt;!-- Limits --&gt;\n            &lt;max_wheel_torque&gt;200&lt;/max_wheel_torque&gt;\n            &lt;max_wheel_acceleration&gt;10.0&lt;/max_wheel_acceleration&gt;\n\n\n            &lt;!-- Output --&gt;\n            &lt;odometry_frame&gt;odom&lt;/odometry_frame&gt;\n            &lt;robot_base_frame&gt;base_link&lt;/robot_base_frame&gt;\n\n            &lt;publish_odom&gt;true&lt;/publish_odom&gt;\n            &lt;publish_odom_tf&gt;true&lt;/publish_odom_tf&gt;\n            &lt;publish_wheel_tf&gt;true&lt;/publish_wheel_tf&gt;\n\n        &lt;/plugin&gt;\n    &lt;/gazebo&gt;\n\n\n&lt;/robot&gt;\n</code></pre>","tags":["ros2","gazebo","classic","diff"]},{"location":"ROS/ros_eco/urdf_xacro_gz_plugin/gazebo_harmonic/","title":"ROS2 Gazebo harmonic integration","text":"<p>Bridge</p> <p>Interface</p> <p>Project</p>","tags":["ros","gazebo","harmonic","bridge","jazzy"]},{"location":"ROS/ros_eco/urdf_xacro_gz_plugin/gazebo_harmonic/ros_humble_gazebo_bridge/","title":"Gazebo harmonic bridge","text":"<p>Connect Gazebo and ROS2 using the bridge</p> <p>Install gazebo harmonic on docker image more</p> humble bridge   Install bridge from osrf repository  set gazebo and bridge in dockerfile<pre><code>RUN curl https://packages.osrfoundation.org/gazebo.gpg --output /usr/share/keyrings/pkgs-osrf-archive-keyring.gpg \\\n  &amp;&amp; echo \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/pkgs-osrf-archive-keyring.gpg] http://packages.osrfoundation.org/gazebo/ubuntu-stable $(lsb_release -cs) main\" | sudo tee /etc/apt/sources.list.d/gazebo-stable.list &gt; /dev/null \\\n  &amp;&amp; apt-get update &amp;&amp; apt-get install -q -y --no-install-recommends \\\n  gz-harmonic \\\n  ros-humble-ros-gzharmonic \\\n  &amp;&amp; rm -rf /var/lib/apt/lists/*\n</code></pre> <pre><code>apt-get install ros-humble-ros-gzharmonic\n</code></pre>","tags":["gazebo","harmonic","gz","simulation","ros","bridge"]},{"location":"ROS/ros_eco/urdf_xacro_gz_plugin/gazebo_harmonic/ros_humble_gazebo_bridge/#install","title":"Install","text":"<p>camera_info <pre><code>Bridge send data from gz to ros one way\n\n\n\n\n\n```bash title=\"bridge\"\nros2 run ros_gz_bridge parameter_bridge /vehicle/camera@sensor_msgs/msg/Image[gz.msgs.Image\n</code></pre></p>","tags":["gazebo","harmonic","gz","simulation","ros","bridge"]},{"location":"ROS/ros_eco/urdf_xacro_gz_plugin/gazebo_harmonic/jazzy_bridge/","title":"Gazebo bridge","text":"<p>Camera</p> <p>lidar</p> <p>imu</p> more <p>Diff drive</p> <p>joint state and pose publisher</p> <p>The bridge allows you to connect ROS 2 topics with Gazebo Harmonic topics so you can:</p> <ul> <li>Control simulation objects from ROS 2 (e.g., publish velocity commands).</li> <li>Get data from simulation (e.g., sensor readings, /clock).</li> <li>Sync time between ROS 2 and Gazebo.</li> </ul> <p>Tip</p> <pre><code>parameter_bridge &lt;topic@ROS2_type@gz_type&gt;\n</code></pre> <p>Tip</p> <ul> <li>@ : a bidirectional bridge, </li> <li>[ : a bridge from Gazebo to ROS,</li> <li>] : a bridge from ROS to Gazebo.</li> </ul>"},{"location":"ROS/ros_eco/urdf_xacro_gz_plugin/gazebo_harmonic/jazzy_bridge/#bridge-yaml-config","title":"bridge yaml config","text":"<p>github config yaml and message type mapping table</p> <pre><code>ros2 run ros_gz_bridge parameter_bridge --ros-args -p config_file:=$WORKSPACE/test/config/full.yaml\n</code></pre>"},{"location":"ROS/ros_eco/urdf_xacro_gz_plugin/gazebo_harmonic/jazzy_bridge/#demo","title":"Demo","text":"<p>Simulate using bridge, send message from side to side (no need to run gz sim for this check)</p> <p>send string message from gz to ros and from ros to gz using cli</p> <ul> <li>Run bridge</li> <li>Pub from GZ echo in ROS</li> <li>Pub from ROS echo in GZ</li> </ul> Terminal1: bridge<pre><code>ros2 run ros_gz_bridge parameter_bridge /chatter@std_msgs/msg/String@gz.msgs.StringMsg\n#\n[INFO] [1734974012.615668960] [ros_gz_bridge]: Creating GZ-&gt;ROS Bridge: [/chatter (gz.msgs.StringMsg) -&gt; /chatter (std_msgs/msg/String)] (Lazy 0)\n[INFO] [1734974012.616345817] [ros_gz_bridge]: Creating ROS-&gt;GZ Bridge: [/chatter (std_msgs/msg/String) -&gt; /chatter (gz.msgs.StringMsg)] (Lazy 0)\n</code></pre>"},{"location":"ROS/ros_eco/urdf_xacro_gz_plugin/gazebo_harmonic/jazzy_bridge/#pub-data-from-gz-to-ros","title":"pub data from gz to ros","text":"Terminal2: ros subscribe<pre><code>ros2 topic echo /chatter\n</code></pre> Terminal3: gz pub<pre><code>gz topic -t /chatter -m gz.msgs.StringMsg -p 'data:\"Hello\"'\n</code></pre>"},{"location":"ROS/ros_eco/urdf_xacro_gz_plugin/gazebo_harmonic/jazzy_bridge/#pub-data-from-ros-to-gz","title":"pub data from ros to gz","text":"Terminal2: ros pub<pre><code>ros2 topic pub /chatter std_msgs/msg/String \"data: 'Hi'\"\n</code></pre> Terminal3: gz sub<pre><code>gz topic -e -t /chatter\n</code></pre>"},{"location":"ROS/ros_eco/urdf_xacro_gz_plugin/gazebo_harmonic/jazzy_bridge/#resources","title":"Resources","text":"<ul> <li>Sensors services and interfaces</li> <li>ROS + Gazebo Sim demos</li> </ul>"},{"location":"ROS/ros_eco/urdf_xacro_gz_plugin/gazebo_harmonic/jazzy_bridge/camera/","title":"Camera","text":"<p>Bridge rgb camera between gazebo to ros</p>","tags":["ros","gazebo","bridge","jazzy","harmonic","camera"]},{"location":"ROS/ros_eco/urdf_xacro_gz_plugin/gazebo_harmonic/jazzy_bridge/camera/#gazebo","title":"Gazebo","text":"<p>Add sensor plugin to world</p> add sensor plugin to world<pre><code>&lt;plugin\n  filename=\"gz-sim-sensors-system\"\n  name=\"gz::sim::systems::Sensors\"&gt;\n  &lt;render_engine&gt;ogre2&lt;/render_engine&gt;\n&lt;/plugin&gt;\n</code></pre> RGB Camera<pre><code>&lt;sensor name=\"camera\" type=\"camera\"&gt;\n    &lt;pose&gt; 0 0 0 0 0 0 &lt;/pose&gt;\n    &lt;visualize&gt;true&lt;/visualize&gt;\n    &lt;update_rate&gt;10&lt;/update_rate&gt;\n    &lt;camera&gt;\n        &lt;camera_info_topic&gt;camera/camera_info&lt;/camera_info_topic&gt;\n        &lt;horizontal_fov&gt;1.089&lt;/horizontal_fov&gt;\n        &lt;image&gt;\n            &lt;format&gt;R8G8B8&lt;/format&gt;\n            &lt;width&gt;640&lt;/width&gt;\n            &lt;height&gt;480&lt;/height&gt;\n        &lt;/image&gt;\n        &lt;clip&gt;\n            &lt;near&gt;0.05&lt;/near&gt;\n            &lt;far&gt;8.0&lt;/far&gt;\n        &lt;/clip&gt;\n    &lt;/camera&gt;\n    &lt;topic&gt;camera/image_raw&lt;/topic&gt;\n    &lt;gz_frame_id&gt;camera_link_optical&lt;/gz_frame_id&gt;\n&lt;/sensor&gt;\n</code></pre> <p>urdf</p> <p>Don't forget to shroud with <code>&lt;gazebo reference=\"link name\"&gt;</code> tag</p> <p>download world</p>","tags":["ros","gazebo","bridge","jazzy","harmonic","camera"]},{"location":"ROS/ros_eco/urdf_xacro_gz_plugin/gazebo_harmonic/jazzy_bridge/camera/#ros2","title":"ROS2","text":"<p>check ros gz sim demo</p>","tags":["ros","gazebo","bridge","jazzy","harmonic","camera"]},{"location":"ROS/ros_eco/urdf_xacro_gz_plugin/gazebo_harmonic/jazzy_bridge/camera/#ros_gz_bridge","title":"ros_gz_bridge","text":"<pre><code>ros2 run ros_gz_bridge parameter_bridge /camera/image_raw@sensor_msgs/msg/Image@gz.msgs.Image\n</code></pre>","tags":["ros","gazebo","bridge","jazzy","harmonic","camera"]},{"location":"ROS/ros_eco/urdf_xacro_gz_plugin/gazebo_harmonic/jazzy_bridge/camera/#using-launch-file","title":"Using launch file","text":"<ul> <li>load bridge config from yaml file</li> <li>control topic qos</li> </ul> ros_gz_bridge launch file<pre><code>import os\n\nfrom ament_index_python.packages import get_package_share_directory\nfrom launch import LaunchDescription\nfrom ros_gz_bridge.actions import RosGzBridge\n\nPACKAGE_NAME = 'tutorial_bringup'\n\ndef generate_launch_description():\n    ld = LaunchDescription()\n\n    bridge_params = os.path.join(get_package_share_directory(PACKAGE_NAME),'config','gz_bridge.yaml')\n    bridge = RosGzBridge(\n            bridge_name=\"bridge\",\n            config_file=bridge_params,\n        )\n\n    ld.add_action(bridge)\n\n\n    return ld\n</code></pre> gz_bridge.yaml<pre><code>- ros_topic_name: \"/camera/image_raw\"\n  gz_topic_name: \"/camera/image_raw\"\n  ros_type_name: \"sensor_msgs/msg/Image\"\n  gz_type_name: \"gz.msgs.Image\"\n  direction: GZ_TO_ROS\n</code></pre>","tags":["ros","gazebo","bridge","jazzy","harmonic","camera"]},{"location":"ROS/ros_eco/urdf_xacro_gz_plugin/gazebo_harmonic/jazzy_bridge/camera/#ros_gz_image","title":"ros_gz_image","text":"<p>use image_transport</p> image transport bridge<pre><code>sudo apt install ros-jazzy-ros-gz-image\n</code></pre> <pre><code>ros2 run ros_gz_image image_bridge /camera/image_raw\n</code></pre>","tags":["ros","gazebo","bridge","jazzy","harmonic","camera"]},{"location":"ROS/ros_eco/urdf_xacro_gz_plugin/gazebo_harmonic/jazzy_bridge/camera/#rqt","title":"rqt","text":"<pre><code>ros2 run rqt_image_view rqt_image_view /camera/image_raw\n</code></pre>","tags":["ros","gazebo","bridge","jazzy","harmonic","camera"]},{"location":"ROS/ros_eco/urdf_xacro_gz_plugin/gazebo_harmonic/jazzy_bridge/diff-drive/","title":"DiffDrive","text":"","tags":["ros","gazebo","bridge","jazzy","harmonic","diff drive"]},{"location":"ROS/ros_eco/urdf_xacro_gz_plugin/gazebo_harmonic/jazzy_bridge/diff-drive/#gazebo","title":"Gazebo","text":"gazebo diff drive plugin<pre><code>&lt;plugin name=\"gz::sim::systems::DiffDrive\" filename=\"gz-sim-diff-drive-system\"&gt;\n\n    &lt;left_joint&gt;wheel_left_joint&lt;/left_joint&gt;\n    &lt;right_joint&gt;wheel_right_joint&lt;/right_joint&gt;\n    &lt;wheel_separation&gt;${wheel_separation}&lt;/wheel_separation&gt;\n    &lt;wheel_radius&gt;0.033&lt;/wheel_radius&gt;\n\n\n    &lt;max_linear_acceleration&gt;0.33&lt;/max_linear_acceleration&gt;\n\n    &lt;topic&gt;cmd_vel&lt;/topic&gt;\n\n\n    &lt;frame_id&gt;odom&lt;/frame_id&gt;\n    &lt;child_frame_id&gt;base_link&lt;/child_frame_id&gt;\n    &lt;odom_topic&gt;odom&lt;/odom_topic&gt;\n    &lt;odom_publisher_frequency&gt;30&lt;/odom_publisher_frequency&gt;\n\n    &lt;tf_topic&gt;/tf&lt;/tf_topic&gt;\n\n  &lt;/plugin&gt;\n</code></pre>","tags":["ros","gazebo","bridge","jazzy","harmonic","diff drive"]},{"location":"ROS/ros_eco/urdf_xacro_gz_plugin/gazebo_harmonic/jazzy_bridge/diff-drive/#ros","title":"ROS","text":"","tags":["ros","gazebo","bridge","jazzy","harmonic","diff drive"]},{"location":"ROS/ros_eco/urdf_xacro_gz_plugin/gazebo_harmonic/jazzy_bridge/diff-drive/#bridge-file","title":"bridge file","text":"bridge.yaml<pre><code># gz topic published by DiffDrive plugin\n- ros_topic_name: \"odom\"\n  gz_topic_name: \"odom\"\n  ros_type_name: \"nav_msgs/msg/Odometry\"\n  gz_type_name: \"gz.msgs.Odometry\"\n  direction: GZ_TO_ROS\n\n# gz topic published by DiffDrive plugin\n- ros_topic_name: \"tf\"\n  gz_topic_name: \"tf\"\n  ros_type_name: \"tf2_msgs/msg/TFMessage\"\n  gz_type_name: \"gz.msgs.Pose_V\"\n  direction: GZ_TO_ROS\n\n# gz topic subscribed to by DiffDrive plugin\n- ros_topic_name: \"cmd_vel\"\n  gz_topic_name: \"cmd_vel\"\n  ros_type_name: \"geometry_msgs/msg/Twist\"\n  gz_type_name: \"gz.msgs.Twist\"\n  direction: ROS_TO_GZ\n</code></pre>","tags":["ros","gazebo","bridge","jazzy","harmonic","diff drive"]},{"location":"ROS/ros_eco/urdf_xacro_gz_plugin/gazebo_harmonic/jazzy_bridge/imu/","title":"imu","text":"<p>Bridge IMU sensor from gazebo to ros</p>","tags":["ros","gazebo","bridge","jazzy","harmonic","imu"]},{"location":"ROS/ros_eco/urdf_xacro_gz_plugin/gazebo_harmonic/jazzy_bridge/imu/#gazebo","title":"Gazebo","text":"<p>Add imu plugin to world</p> add imu plugin to world<pre><code>&lt;plugin\n  filename=\"gz-sim-imu-system\"\n  name=\"gz::sim::systems::Imu\"&gt;\n&lt;/plugin&gt;\n</code></pre> sensor<pre><code>&lt;sensor name=\"imu\" type=\"imu\"&gt;\n    &lt;always_on&gt;1&lt;/always_on&gt;\n    &lt;update_rate&gt;50&lt;/update_rate&gt;\n    &lt;visualize&gt;true&lt;/visualize&gt;\n    &lt;topic&gt;imu&lt;/topic&gt;\n    &lt;enable_metrics&gt;true&lt;/enable_metrics&gt;\n&lt;/sensor&gt;\n</code></pre> <p>urdf</p> <p>Don't forget to shroud with <code>&lt;gazebo reference=\"link name\"&gt;</code> tag</p> gz<pre><code>gz topic --echo -t /imu\n</code></pre>","tags":["ros","gazebo","bridge","jazzy","harmonic","imu"]},{"location":"ROS/ros_eco/urdf_xacro_gz_plugin/gazebo_harmonic/jazzy_bridge/imu/#ros","title":"ROS","text":"","tags":["ros","gazebo","bridge","jazzy","harmonic","imu"]},{"location":"ROS/ros_eco/urdf_xacro_gz_plugin/gazebo_harmonic/jazzy_bridge/imu/#cli","title":"cli","text":"<pre><code>ros2 run ros_gz_bridge parameter_bridge /imu@sensor_msgs/msg/Imu[gz.msgs.IMU\n#\n Creating GZ-&gt;ROS Bridge: [/imu (gz.msgs.IMU) -&gt; /imu (sensor_msgs/msg/Imu)] (Lazy 0)\n</code></pre>","tags":["ros","gazebo","bridge","jazzy","harmonic","imu"]},{"location":"ROS/ros_eco/urdf_xacro_gz_plugin/gazebo_harmonic/jazzy_bridge/imu/#bridge-file","title":"bridge file","text":"<pre><code>- ros_topic_name: \"/imu\"\n  gz_topic_name: \"/imu\"\n  ros_type_name: \"sensor_msgs/msg/Imu\"\n  gz_type_name: \"gz.msgs.IMU\"\n  direction: GZ_TO_ROS\n</code></pre>","tags":["ros","gazebo","bridge","jazzy","harmonic","imu"]},{"location":"ROS/ros_eco/urdf_xacro_gz_plugin/gazebo_harmonic/jazzy_bridge/imu/#launch","title":"launch","text":"<p>TODO: check this coda again</p> imu_bridge.launch.py<pre><code>from ament_index_python.packages import get_package_share_directory\nfrom launch import LaunchDescription\nfrom launch_ros.actions import Node\nfrom pathlib import Path\n\nPKG_BRINGUP = 'turtlebot_bringup'\nBRIDGE_CONFIG = \"gz_bridge.yaml\"\nCONFIG_FOLDER = \"config\"\n\ndef generate_launch_description():\n    ld = LaunchDescription()\n\n    bridge_file = Path(get_package_share_directory(PKG_BRINGUP)) \\\n        .joinpath(CONFIG_FOLDER) \\\n        .joinpath(BRIDGE_CONFIG) \\\n        .as_posix()\n\n    ros_gz_bridge = Node(\n        package=\"ros_gz_bridge\",\n        executable=\"parameter_bridge\",\n        arguments=[\n            '--ros-args',\n            '-p',\n            f\"config_file:={bridge_file}\"\n        ],\n        parameters=[\n            {'use_sim_time': True},\n            {'qos_overrides./imu.publisher.reliability': 'best_effort'}\n        ],\n    )\n\n    ld.add_action(ros_gz_bridge)\n\n\n    return ld\n</code></pre>","tags":["ros","gazebo","bridge","jazzy","harmonic","imu"]},{"location":"ROS/ros_eco/urdf_xacro_gz_plugin/gazebo_harmonic/jazzy_bridge/joint_state_and_pose_publisher/","title":"Joint state and pose publisher","text":"","tags":["ros","gazebo","bridge","jazzy","harmonic","joint state","pose"]},{"location":"ROS/ros_eco/urdf_xacro_gz_plugin/gazebo_harmonic/jazzy_bridge/joint_state_and_pose_publisher/#joint-state","title":"Joint state","text":"<pre><code>&lt;plugin filename=\"gz-sim-joint-state-publisher-system\"\n    name=\"gz::sim::systems::JointStatePublisher\"&gt;\n    &lt;topic&gt;joint_states&lt;/topic&gt;\n    &lt;joint_name&gt;wheel_left_joint&lt;/joint_name&gt;\n    &lt;joint_name&gt;wheel_right_joint&lt;/joint_name&gt;\n&lt;/plugin&gt;\n</code></pre> bridge<pre><code>- ros_topic_name: \"joint_states\"\n  gz_topic_name: \"joint_states\"\n  ros_type_name: \"sensor_msgs/msg/JointState\"\n  gz_type_name: \"gz.msgs.Model\"\n  direction: GZ_TO_ROS\n</code></pre>","tags":["ros","gazebo","bridge","jazzy","harmonic","joint state","pose"]},{"location":"ROS/ros_eco/urdf_xacro_gz_plugin/gazebo_harmonic/jazzy_bridge/lidar/","title":"LIDAR","text":"<p>Bridge lidar system between gazebo to ros lidar sensor send two topics</p> <ul> <li>/lidar (sensor_msgs/msg/LaserScan) use for 2D lidar</li> <li>/lidar/points (sensor_msgs/msg/PointCloud2) use for 3D lidar</li> </ul>","tags":["ros","gazebo","bridge","jazzy","harmonic","lidar"]},{"location":"ROS/ros_eco/urdf_xacro_gz_plugin/gazebo_harmonic/jazzy_bridge/lidar/#gazebo","title":"Gazebo","text":"<p>Add sensor plugin to world</p> add sensor plugin to world<pre><code>&lt;plugin\n  filename=\"gz-sim-sensors-system\"\n  name=\"gz::sim::systems::Sensors\"&gt;\n  &lt;render_engine&gt;ogre2&lt;/render_engine&gt;\n&lt;/plugin&gt;\n</code></pre> sensor<pre><code>&lt;sensor name='gpu_lidar' type='gpu_lidar'&gt;\n    &lt;topic&gt;lidar&lt;/topic&gt;\n    &lt;update_rate&gt;10&lt;/update_rate&gt;\n    &lt;lidar&gt;\n    &lt;scan&gt;\n        &lt;horizontal&gt;\n        &lt;samples&gt;640&lt;/samples&gt;\n        &lt;resolution&gt;1&lt;/resolution&gt;\n        &lt;min_angle&gt;-1.396263&lt;/min_angle&gt;\n        &lt;max_angle&gt;1.396263&lt;/max_angle&gt;\n        &lt;/horizontal&gt;\n        &lt;vertical&gt;\n        &lt;samples&gt;16&lt;/samples&gt;\n        &lt;resolution&gt;1&lt;/resolution&gt;\n        &lt;min_angle&gt;-0.261799&lt;/min_angle&gt;\n        &lt;max_angle&gt;0.261799&lt;/max_angle&gt;\n        &lt;/vertical&gt;\n    &lt;/scan&gt;\n    &lt;range&gt;\n        &lt;min&gt;0.08&lt;/min&gt;\n        &lt;max&gt;10.0&lt;/max&gt;\n        &lt;resolution&gt;0.01&lt;/resolution&gt;\n    &lt;/range&gt;\n    &lt;/lidar&gt;\n    &lt;alwaysOn&gt;1&lt;/alwaysOn&gt;\n    &lt;visualize&gt;true&lt;/visualize&gt;\n&lt;/sensor&gt;\n</code></pre> gz<pre><code>gz topic --echo -t /lidar\n</code></pre> <p></p>","tags":["ros","gazebo","bridge","jazzy","harmonic","lidar"]},{"location":"ROS/ros_eco/urdf_xacro_gz_plugin/gazebo_harmonic/jazzy_bridge/lidar/#ros","title":"ROS","text":"","tags":["ros","gazebo","bridge","jazzy","harmonic","lidar"]},{"location":"ROS/ros_eco/urdf_xacro_gz_plugin/gazebo_harmonic/jazzy_bridge/lidar/#cli","title":"cli","text":"<pre><code>ros2 run ros_gz_bridge parameter_bridge /lidar@sensor_msgs/msg/LaserScan[gz.msgs.LaserScan\n#\n</code></pre>","tags":["ros","gazebo","bridge","jazzy","harmonic","lidar"]},{"location":"ROS/ros_eco/urdf_xacro_gz_plugin/gazebo_harmonic/jazzy_bridge/lidar/#bridge-file","title":"bridge file","text":"<pre><code>- ros_topic_name: \"/lidar\"\n  gz_topic_name: \"/lidar\"\n  ros_type_name: \"sensor_msgs/msg/LaserScan\"\n  gz_type_name: \"gz.msgs.LaserScan\"\n  direction: GZ_TO_ROS\n</code></pre>","tags":["ros","gazebo","bridge","jazzy","harmonic","lidar"]},{"location":"ROS/ros_eco/urdf_xacro_gz_plugin/gazebo_harmonic/jazzy_bridge/lidar/#launch","title":"launch","text":"imu_bridge.launch.py<pre><code>from ament_index_python.packages import get_package_share_directory\nfrom launch import LaunchDescription\nfrom launch_ros.actions import Node\nfrom pathlib import Path\n\nPKG_BRINGUP = 'turtlebot_bringup'\nBRIDGE_CONFIG = \"gz_bridge.yaml\"\nCONFIG_FOLDER = \"config\"\n\ndef generate_launch_description():\n    ld = LaunchDescription()\n\n    bridge_file = Path(get_package_share_directory(PKG_BRINGUP)) \\\n        .joinpath(CONFIG_FOLDER) \\\n        .joinpath(BRIDGE_CONFIG) \\\n        .as_posix()\n\n    ros_gz_bridge = Node(\n        package=\"ros_gz_bridge\",\n        executable=\"parameter_bridge\",\n        arguments=[\n            '--ros-args',\n            '-p',\n            f\"config_file:={bridge_file}\"\n        ],\n        parameters=[\n            {'use_sim_time': True},\n            {'qos_overrides./imu.publisher.reliability': 'best_effort'}\n        ],\n    )\n\n    ld.add_action(ros_gz_bridge)\n\n\n    return ld\n</code></pre>","tags":["ros","gazebo","bridge","jazzy","harmonic","lidar"]},{"location":"ROS/ros_eco/urdf_xacro_gz_plugin/gazebo_harmonic/jazzy_interface/","title":"ROS GZ Interface","text":"<p>This package currently contains some Gazebo-specific ROS message and service data structures (.msg and .srv)</p> <p>Message and service data structures for interacting with Gazebo from ROS2</p>","tags":["tag"]},{"location":"ROS/ros_eco/urdf_xacro_gz_plugin/gazebo_harmonic/jazzy_interface/#demo-set-entity-pose","title":"Demo: Set Entity POSE","text":"<p>Gazebo expose service to set entity position and orientation <code>/world/&lt;world name&gt;/set_pose</code></p>","tags":["tag"]},{"location":"ROS/ros_eco/urdf_xacro_gz_plugin/gazebo_harmonic/jazzy_interface/#run-from-gazebo","title":"Run from gazebo","text":"gz set_pose service call<pre><code>gz service --timeout 10000 -s /world/my_world/set_pose \\\n--reptype gz.msgs.Boolean \\\n--reqtype gz.msgs.Pose \\\n--req 'name: \"box\" position {\n  x: 5\n  y: 0\n  z: 0.5\n}'\n</code></pre>","tags":["tag"]},{"location":"ROS/ros_eco/urdf_xacro_gz_plugin/gazebo_harmonic/jazzy_interface/#expose-the-service-via-ros","title":"Expose the service via ROS","text":"run bridge<pre><code>ros2 run ros_gz_bridge parameter_bridge \\\n    /world/my_world/set_pose@ros_gz_interfaces/srv/SetEntityPose\n</code></pre> query entity name<pre><code># or check the urdf\n# idea: wotk with grep\ngz topic -e -t /world/my_world/pose/info \n</code></pre> call full message<pre><code># call service set_pose on world name: my_world\n# entity name: \nros2 service call /world/my_world/set_pose ros_gz_interfaces/srv/SetEntityPose \\\n\"{entity: {name: 'box'}, \\\npose: {position: {x: 3.0, y: 3.0, z: 0.5}, \norientation: {x: 0.0, y: 0.0, z: 0.0, w: 1.0}}}\"\n</code></pre> <pre><code># send part of the message other argument get defaults\nros2 service call /world/my_world/set_pose ros_gz_interfaces/srv/SetEntityPose \\\n\"{entity: {name: 'box'}, \\\npose: {position: {x: 1.0 } } }\"\n</code></pre>","tags":["tag"]},{"location":"ROS/ros_eco/urdf_xacro_gz_plugin/gazebo_harmonic/project_template/","title":"ROS2 Gazebo Project","text":"","tags":["ros","gazebo","project","template"]},{"location":"ROS/ros_eco/urdf_xacro_gz_plugin/gazebo_harmonic/project_template/#resources","title":"Resources","text":"<ul> <li>Guide to ros_gz_project_template for ROS 2 and Gazebo Development</li> <li>github: ros_gz_project_template</li> </ul>","tags":["ros","gazebo","project","template"]},{"location":"ROS/ros_eco/urdf_xacro_gz_plugin/urdf/","title":"URDF","text":"<p>URDF is an xml file that describe the geometry of a robot. URDF is a tree structure with one root link. The measuring units are meters and radians.</p> robot<pre><code>&lt;robot name=\"robot_name\"&gt;\n  &lt;link&gt;  &lt;/link&gt;\n  &lt;link&gt;  &lt;/link&gt;\n\n  &lt;joint&gt;  &lt;/joint&gt;\n&lt;/robot&gt;\n</code></pre>","tags":["urdf","ros"]},{"location":"ROS/ros_eco/urdf_xacro_gz_plugin/urdf/#link","title":"Link","text":"<p>The link element describes a rigid body with an inertia, visual features, and collision properties.</p> <p></p> <p>Tip</p> <p>The reference frame of the link is its joint</p> link<pre><code>&lt;link name=\"link_name\"&gt;\n\n  &lt;visual&gt;\n      &lt;origin xyz=\"0 0 0\" rpy=\"0 0 0\" /&gt;\n      &lt;geometry&gt;\n        &lt;cylinder length=\"0.6\" radius=\"0.2\"/&gt;\n      &lt;/geometry&gt;\n  &lt;/visual&gt;\n\n  &lt;collision&gt;\n      &lt;origin xyz=\"0 0 0\" rpy=\"0 0 0\" /&gt;\n      &lt;geometry&gt;\n          &lt;cylinder length=\"0.6\" radius=\"0.2\"/&gt;\n      &lt;/geometry&gt;\n  &lt;/collision&gt;\n\n  &lt;inertial&gt;\n      &lt;origin xyz=\"0 0 0\" rpy=\"0 0 0\"/&gt;\n      &lt;mass value=\"1\"/&gt;\n      &lt;inertia\n          ixx=\"1.0\" ixy=\"0.0\" ixz=\"0.0\"\n          iyy=\"1.0\" iyz=\"0.0\"\n          izz=\"1.0\"/&gt;\n  &lt;/inertial&gt;\n&lt;/link&gt;\n</code></pre>","tags":["urdf","ros"]},{"location":"ROS/ros_eco/urdf_xacro_gz_plugin/xacro/","title":"XACRO","text":"<p>Xacro (XML Macros) Xacro is an XML macro language. With xacro, you can construct shorter and more readable XML files by using macros that expand to larger XML expressions. more</p>","tags":["ros","xacro"]},{"location":"ROS/ros_eco/urdf_xacro_gz_plugin/xacro/#install-ros-support","title":"Install ROS support","text":"<pre><code>sudo apt install ros-humble-xacro\n</code></pre>","tags":["ros","xacro"]},{"location":"ROS/ros_eco/urdf_xacro_gz_plugin/xacro/#usage","title":"Usage","text":"","tags":["ros","xacro"]},{"location":"ROS/ros_eco/urdf_xacro_gz_plugin/xacro/#cli","title":"cli","text":"<pre><code>xacro hello.urdf.xacro &gt; hello.urdf\n</code></pre>","tags":["ros","xacro"]},{"location":"ROS/ros_eco/urdf_xacro_gz_plugin/xacro/#launch-file","title":"launch file","text":"<ul> <li>Load and procee xacro file</li> <li>Run <code>robot_state_publisher</code> to publish <code>robot_description</code> topic</li> <li>Run <code>joint_state_publisher_gui</code> to publish <code>TF's</code></li> <li>Run <code>rviz</code> to view the robot</li> </ul> load xacro and view in rviz<pre><code>import os\n\nfrom ament_index_python.packages import get_package_share_directory\nfrom launch import LaunchDescription\nfrom launch.substitutions import PathJoinSubstitution\nfrom launch_ros.actions import Node\nimport xacro\n\nPKG_BRINGUP = \"self_balancing_bringup\"\nPKG_DESCRIPTION = \"self_balancing_description\"\nROBOT = \"robot.urdf\"\n\nURDF = \"urdf\"\nCONFIG = \"config\"\n\n\ndef generate_launch_description():\n    ld = LaunchDescription()\n\n    pkg_path = os.path.join(get_package_share_directory(PKG_DESCRIPTION))\n    xacro_file = os.path.join(pkg_path, URDF, ROBOT)\n    robot_description_config = xacro.process_file(xacro_file).toxml()\n    params = {\"robot_description\": robot_description_config, \"use_sim_time\": True}\n\n    node_robot_state_publisher = Node(\n        package=\"robot_state_publisher\",\n        executable=\"robot_state_publisher\",\n        output=\"screen\",\n        parameters=[params],\n    )\n\n    node_state_publisher_gui = Node(\n        package=\"joint_state_publisher_gui\",\n        executable=\"joint_state_publisher_gui\",\n        output=\"screen\",\n    )\n\n    rviz_node = Node(\n        package=\"rviz2\",\n        executable=\"rviz2\",\n        name=\"rviz2\",\n        output=\"screen\",\n        arguments=[\n            \"-d\",\n            PathJoinSubstitution(\n                [get_package_share_directory(PKG_BRINGUP), CONFIG, \"display.rviz\"]\n            ),\n        ],\n    )\n\n    ld.add_action(node_robot_state_publisher)\n    ld.add_action(node_state_publisher_gui)\n    ld.add_action(rviz_node)\n    return ld\n</code></pre>","tags":["ros","xacro"]},{"location":"ROS/ros_eco/urdf_xacro_gz_plugin/xacro/#xacro-terms","title":"XACRO terms","text":"<ul> <li>match</li> <li>property</li> <li>arg</li> <li>include</li> <li>condition</li> <li>macro</li> <li>loops</li> </ul>","tags":["ros","xacro"]},{"location":"ROS/ros_eco/urdf_xacro_gz_plugin/xacro/#recommend-xacro-layout","title":"Recommend xacro layout","text":"<ul> <li>robot.urdf.xacro: main xacro file</li> <li>gazebo.xacro: all gazebo stuff</li> <li>control.xacro: ros2 control</li> <li>materials.xacro</li> <li>macros.xacro</li> <li>inertial.xacro</li> </ul> robot.urdf.xacro<pre><code>&lt;robot xmlns:xacro=\"http://www.ros.org/wiki/xacro\" name=\"my_robot\"&gt;\n  &lt;xacro:include filename=\"gazebo.xacro\"/&gt;\n  &lt;xacro:include filename=\"control.xacro\"/&gt;\n\n  &lt;xacro:property name=\"a\" value=\"0.1\" /&gt;\n&lt;/robot&gt;\n</code></pre> gazebo.xacro<pre><code>&lt;robot xmlns:xacro=\"http://www.ros.org/wiki/xacro\"&gt;\n  &lt;gazebo reference=\"imu_link\"&gt;\n        &lt;sensor name=\"link2_imu\" type=\"imu\"&gt;\n            &lt;always_on&gt;1&lt;/always_on&gt;\n            &lt;update_rate&gt;50&lt;/update_rate&gt;\n            &lt;visualize&gt;true&lt;/visualize&gt;\n            &lt;topic&gt;imu-control&lt;/topic&gt;\n            &lt;enable_metrics&gt;true&lt;/enable_metrics&gt;\n        &lt;/sensor&gt;\n    &lt;/gazebo&gt;\n\n\n&lt;/robot&gt;\n</code></pre> <p> tag materials.xacro<pre><code>&lt;robot xmlns:xacro=\"http://www.ros.org/wiki/xacro\"&gt;\n  &lt;material name=\"white\"&gt;\n        &lt;color rgba=\"1 1 1 1\"/&gt;\n    &lt;/material&gt;\n\n    &lt;material name=\"orange\"&gt;\n        &lt;color rgba=\"1 0.3 0.1 1\"/&gt;\n    &lt;/material&gt;\n\n    &lt;material name=\"blue\"&gt;\n        &lt;color rgba=\"0.2 0.2 1 1\"/&gt;\n    &lt;/material&gt;\n\n&lt;/robot&gt;\n</code></pre> inertial.xacro<pre><code>&lt;robot xmlns:xacro=\"http://www.ros.org/wiki/xacro\"&gt;\n  &lt;xacro:macro name=\"inertial_sphere\" params=\"mass radius *origin\"&gt;\n        &lt;inertial&gt;\n            &lt;xacro:insert_block name=\"origin\"/&gt;\n            &lt;mass value=\"${mass}\" /&gt;\n            &lt;inertia ixx=\"${(2/5) * mass * (radius*radius)}\" ixy=\"0.0\" ixz=\"0.0\"\n                    iyy=\"${(2/5) * mass * (radius*radius)}\" iyz=\"0.0\"\n                    izz=\"${(2/5) * mass * (radius*radius)}\" /&gt;\n        &lt;/inertial&gt;\n    &lt;/xacro:macro&gt;  \n\n\n    &lt;xacro:macro name=\"inertial_box\" params=\"mass x y z *origin\"&gt;\n        &lt;inertial&gt;\n            &lt;xacro:insert_block name=\"origin\"/&gt;\n            &lt;mass value=\"${mass}\" /&gt;\n            &lt;inertia ixx=\"${(1/12) * mass * (y*y+z*z)}\" ixy=\"0.0\" ixz=\"0.0\"\n                    iyy=\"${(1/12) * mass * (x*x+z*z)}\" iyz=\"0.0\"\n                    izz=\"${(1/12) * mass * (x*x+y*y)}\" /&gt;\n        &lt;/inertial&gt;\n    &lt;/xacro:macro&gt;\n\n\n    &lt;xacro:macro name=\"inertial_cylinder\" params=\"mass length radius *origin\"&gt;\n        &lt;inertial&gt;\n            &lt;xacro:insert_block name=\"origin\"/&gt;\n            &lt;mass value=\"${mass}\" /&gt;\n            &lt;inertia ixx=\"${(1/12) * mass * (3*radius*radius + length*length)}\" ixy=\"0.0\" ixz=\"0.0\"\n                    iyy=\"${(1/12) * mass * (3*radius*radius + length*length)}\" iyz=\"0.0\"\n                    izz=\"${(1/2) * mass * (radius*radius)}\" /&gt;\n        &lt;/inertial&gt;\n    &lt;/xacro:macro&gt;\n&lt;/robot&gt;\n</code></pre>","tags":["ros","xacro"]},{"location":"ROS/ros_eco/urdf_xacro_gz_plugin/xacro/#reference","title":"Reference","text":"<ul> <li>articulatedrobotics - Describing robots with URDF</li> </ul>","tags":["ros","xacro"]},{"location":"ROS/ros_eco/urdf_xacro_gz_plugin/xacro/xacro_arg_and_condition/","title":"XACRO arg and condition","text":"","tags":["xacro","arg","condition"]},{"location":"ROS/ros_eco/urdf_xacro_gz_plugin/xacro/xacro_arg_and_condition/#arg","title":"arg","text":"<p>Simple <code>xacro</code> file that get argument from outside. if no argument set it use the default. Using <code>xacro</code> command to substitute xacro sentence</p> simple xacro<pre><code>&lt;robot xmlns:xacro=\"http://www.ros.org/wiki/xacro\" name=\"robot_name\"&gt;\n    &lt;xacro:arg name=\"name\" default=\"default_bot\"/&gt;\n\n    &lt;link name=\"$(arg name)\"&gt;\n\n    &lt;/link&gt;\n\n\n&lt;/robot&gt;\n</code></pre> usage<pre><code># use default value\nxacro demo.urdf.xacro\n\n# set arg from cli\nxacro demo.urdf.xacro name:=turtle\n\n# convert to urdf file\nxacro demo.urdf.xacro name:=turtle &gt; demo.urdf\n</code></pre>","tags":["xacro","arg","condition"]},{"location":"ROS/ros_eco/urdf_xacro_gz_plugin/xacro/xacro_arg_and_condition/#launch-file","title":"launch file","text":"<ul> <li>Use python pathlib for path construct</li> <li>Use xacro library</li> <li>Check condition example for command and PathJoinSubstitution </li> </ul> <pre><code>from ament_index_python.packages import get_package_share_directory\nfrom launch import LaunchDescription\nfrom launch_ros.actions import Node\nimport xacro\nfrom pathlib import Path\n\nPKG_DESCRIPTION = \"turtlebot_description\"\nURDF_XACRO_FILE = \"demo.urdf.xacro\"\n\n\ndef generate_launch_description():\n    ld =  LaunchDescription()\n\n    xacro_file = Path(\n        get_package_share_directory(PKG_DESCRIPTION)) \\\n        .joinpath(\"urdf\") \\\n        .joinpath(URDF_XACRO_FILE) \\\n        .as_posix()\n\n\n    urdf = xacro.process_file(xacro_file, mappings={\"name\":\"my_name\"}).toxml()\n    params = {'robot_description': urdf, 'use_sim_time': True}\n    node_robot_state_publisher = Node(\n        package='robot_state_publisher',\n        executable='robot_state_publisher',\n        output='screen',\n        parameters=[params]\n    )\n\n\n    ld.add_action(node_robot_state_publisher)\n    return ld\n</code></pre> usage<pre><code>#-f outout topic full data\nros2 topic echo /robot_description -f\n</code></pre>","tags":["xacro","arg","condition"]},{"location":"ROS/ros_eco/urdf_xacro_gz_plugin/xacro/xacro_arg_and_condition/#condition","title":"Condition","text":"simple xacro with condition and argument<pre><code>&lt;robot xmlns:xacro=\"http://www.ros.org/wiki/xacro\" name=\"robot_name\"&gt;\n    &lt;xacro:arg name=\"use_control\" default=\"false\"/&gt;\n\n    &lt;xacro:if value=\"$(arg use_control)\"&gt;\n        &lt;!-- ros2 control--&gt;\n         &lt;link name=\"ros2_control\"&gt;\n\n         &lt;/link&gt;\n    &lt;/xacro:if&gt;\n    &lt;xacro:unless value=\"$(arg use_control)\"&gt;\n        &lt;!-- other plugin--&gt;\n        &lt;link name=\"ros2\"&gt;\n\n        &lt;/link&gt;\n    &lt;/xacro:unless&gt;\n\n\n&lt;/robot&gt;\n</code></pre>","tags":["xacro","arg","condition"]},{"location":"ROS/ros_eco/urdf_xacro_gz_plugin/xacro/xacro_arg_and_condition/#usage","title":"usage","text":"<p>Launch file with argument to control urdf parse (use ros2_control or not) using substitutions class :</p> <ul> <li>LaunchConfiguration</li> <li>Command</li> <li>PathJoinSubstitution</li> </ul> launch file that set xacro argument <pre><code>from ament_index_python.packages import get_package_share_directory\nfrom launch import LaunchDescription\nfrom launch_ros.actions import Node\nfrom launch.substitutions import LaunchConfiguration, Command, PathJoinSubstitution\nfrom launch.actions import DeclareLaunchArgument\n\nPKG_DESCRIPTION = \"turtlebot_description\"\nURDF_XACRO_FILE = \"demo.urdf.xacro\"\n\nARG_USE_ROS2_CONTROL = \"use_ros2_control\"\n\ndef generate_launch_description():\n    ld =  LaunchDescription()\n\n    use_ros2_control = LaunchConfiguration(ARG_USE_ROS2_CONTROL)\n    use_ros2_control_arg = DeclareLaunchArgument(\n            ARG_USE_ROS2_CONTROL,\n            default_value='false',\n            description='Use sim time if true')\n\n    xacro_file = PathJoinSubstitution([\n        get_package_share_directory(PKG_DESCRIPTION),\n        'urdf',\n        URDF_XACRO_FILE\n    ])\n\n\n    urdf = Command(['xacro ', xacro_file, \" use_control:=\", use_ros2_control])\n\n\n    params = {'robot_description': urdf, 'use_sim_time': True}\n    node_robot_state_publisher = Node(\n        package='robot_state_publisher',\n        executable='robot_state_publisher',\n        output='screen',\n        parameters=[params]\n    )\n\n    ld.add_action(use_ros2_control_arg)\n    ld.add_action(node_robot_state_publisher)\n    return ld\n</code></pre> how to launch<pre><code># with\nros2 launch turtlebot_bringup demo.launch.py use_ros2_control:=True\n# Without\nros2 launch turtlebot_bringup demo.launch.py use_ros2_control:=False\n</code></pre> echo topic<pre><code># -f: output all topic data\nros2 topic echo /robot_description -f\n</code></pre>","tags":["xacro","arg","condition"]},{"location":"ROS/ros_world/","title":"ROS World","text":"<p>Navigation and Localization</p> <p>Perception</p> <p>DDS</p> <p>ROS Control</p> <p>TF</p> <p>Zenoh</p>"},{"location":"ROS/ros_world/#posts","title":"Posts","text":"<ul> <li>ROS2 Parameters</li> </ul>"},{"location":"ROS/ros_world/dds/","title":"DDS","text":"<p>Cyclone DDS</p> <p>TBD</p> <p>TBD</p>","tags":["dds"]},{"location":"ROS/ros_world/dds/#todo-dds-cyclondds-to-do","title":"TODO: dds cyclondds to do","text":"<ul> <li>dds tools</li> <li>ddperf</li> <li>cyclonedds</li> <li>shm</li> <li>zenoh with shm</li> <li>fastdds and zenoh</li> </ul>","tags":["dds"]},{"location":"ROS/ros_world/dds/cyclone_large_message_drop/","title":"Send image message across ROS using cyclonedds","text":"<ul> <li>Ubuntu 22.04</li> <li>Humble</li> <li>Cyclonedds</li> </ul>","tags":["ros","dds","cyclonedds","image","large message"]},{"location":"ROS/ros_world/dds/cyclone_large_message_drop/#demo","title":"Demo","text":"<p>publish Image </p> cyclonedds.xml<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;\n&lt;CycloneDDS xmlns=\"https://cdds.io/config\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"https://cdds.io/config https://raw.githubusercontent.com/eclipse-cyclonedds/cyclonedds/master/etc/cyclonedds.xsd\"&gt;\n    &lt;Domain Id=\"any\"&gt;\n        &lt;Internal&gt;\n            &lt;SocketReceiveBufferSize min=\"20MB\"&gt;&lt;/SocketReceiveBufferSize&gt;\n        &lt;/Internal&gt;\n    &lt;/Domain&gt;\n&lt;/CycloneDDS&gt;\n</code></pre> <p>Increased my <code>/proc/sys/net/core/rmem_max</code> to 30MB</p> <pre><code>echo 30000000 | sudo tee /proc/sys/net/core/rmem_max\n</code></pre>","tags":["ros","dds","cyclonedds","image","large message"]},{"location":"ROS/ros_world/dds/cyclone_large_message_drop/#use-cycloneddsxml","title":"use cyclonedds.xml","text":"<pre><code>export CYCLONEDDS_URI=file://$PWD/cyclonedds.xml\n</code></pre> publisher<pre><code>RMW_IMPLEMENTATION=rmw_cyclonedds_cpp ros2 run cpp_demos simple_img_pub\n</code></pre> subscriber<pre><code>RMW_IMPLEMENTATION=rmw_cyclonedds_cpp  ros2 run cpp_demos simple_img_sub \n</code></pre> simple_img_pub.cpp<pre><code>#include &lt;chrono&gt;\n#include &lt;functional&gt;\n#include &lt;memory&gt;\n#include &lt;string&gt;\n#include &lt;thread&gt;\n#include &lt;rclcpp/rclcpp.hpp&gt;\n#include &lt;rclcpp/clock.hpp&gt;\n#include &lt;opencv2/opencv.hpp&gt;\n#include &lt;rmw/qos_profiles.h&gt;\n#include &lt;rclcpp/qos.hpp&gt;\n#include &lt;rclcpp/time.hpp&gt;\n// #include &lt;std_msgs/msg/string.hpp&gt;\n// #include &lt;sensor_msgs/msg/image.hpp&gt;\n// #include &lt;cv_bridge/cv_bridge.h&gt;\n// #include &lt;std_msgs/msg/header.hpp&gt;\n#include \"custom_msg/msg/image.hpp\"\n\nusing namespace std::chrono_literals;\n\nvoid fill_loaned_message(\n  rclcpp::LoanedMessage&lt;custom_msg::msg::Image&gt; &amp; loanedMsg,\n  const cv::Mat &amp; frame, uint64_t timestamp,\n  uint64_t count)\n{\n  auto &amp;msg = loanedMsg.get();\n  auto size = frame.elemSize() * frame.total();\n  if (size &gt; custom_msg::msg::Image::MAX_SIZE) {\n    std::stringstream s;\n    s &lt;&lt; \"MAX_SIZE exceeded - message requires \" &lt;&lt; size &lt;&lt; \"bytes\\n\";\n    throw std::runtime_error(s.str());\n  }\n\n  msg.rows = frame.rows;\n  msg.cols = frame.cols;\n  msg.size = size;\n  msg.channels = frame.channels();\n  msg.type = frame.type();\n  msg.offset = 0;  // TODO(matthiaskillat) alignment?\n  msg.count = count;\n  msg.timestamp = timestamp;\n\n  // TODO(matthiaskillat): avoid if possible\n  std::memcpy(msg.data.data(), frame.data, size);\n}\n\nclass MinimalPublisher : public rclcpp::Node\n{\npublic:\n  MinimalPublisher()\n      : Node(\"minimal_publisher\")\n  {\n    // auto qos = rclcpp::SensorDataQoS();\n    auto qos = rclcpp::QoS(rclcpp::KeepLast(1), rmw_qos_profile_sensor_data);\n    // auto qos = rclcpp::QoS(rclcpp::KeepLast(1));\n    // publisher_ = this-&gt;create_publisher&lt;sensor_msgs::msg::Image&gt;(\"topic\", qos);\n    publisher_ = this-&gt;create_publisher&lt;custom_msg::msg::Image&gt;(\"topic\", qos);\n    timer_ = this-&gt;create_wall_timer(\n        1000ms, std::bind(&amp;MinimalPublisher::timer_callback, this));\n  }\n\nprivate:\n  void timer_callback()\n  {\n    cv::Mat img(cv::Size(640, 480), CV_8UC3);\n    auto size = img.elemSize()*img.total();\n    RCLCPP_INFO_STREAM(this-&gt;get_logger(), size);\n    cv::randu(img, cv::Scalar(0, 0, 0), cv::Scalar(255, 255, 255));\n    rclcpp::Time now = this-&gt;get_clock()-&gt;now();\n    // auto message = sensor_msgs::msg::Image();\n    // auto my_header = std_msgs::msg::Header();\n    // my_header.stamp = now;\n    auto sec_as_tin64 = static_cast&lt;int64&gt;(now.seconds() * 1e9);\n    RCLCPP_INFO_STREAM(this-&gt;get_logger(), sec_as_tin64);\n    auto msg = this-&gt;publisher_-&gt;borrow_loaned_message();\n    fill_loaned_message(msg,\n      img,\n      sec_as_tin64,\n      fid_++);\n    // auto msg = cv_bridge::CvImage(my_header, \"bgr8\", img).toImageMsg();\n    this-&gt;publisher_-&gt;publish(std::move(msg));\n\n    // RCLCPP_INFO_STREAM(this-&gt;get_logger(), \"\"&lt;&lt;(c-message.header.stamp).seconds());\n  }\n  rclcpp::TimerBase::SharedPtr timer_;\n  rclcpp::Publisher&lt;custom_msg::msg::Image&gt;::SharedPtr publisher_;\n  int fid_ = 0;\n};\n\nint main(int argc, char *argv[])\n{\n  rclcpp::init(argc, argv);\n  auto node = std::make_shared&lt;MinimalPublisher&gt;();\n  rclcpp::spin(node);\n  rclcpp::shutdown();\n  return 0;\n}\n</code></pre> simple_img_sub.cpp<pre><code>#include &lt;memory&gt;\n#include &lt;rclcpp/rclcpp.hpp&gt;\n// #include &lt;sensor_msgs/msg/image.hpp&gt;\n#include &lt;rclcpp/qos.hpp&gt;\n#include &lt;rclcpp/time.hpp&gt;\n#include &lt;rmw/qos_profiles.h&gt;\n// #include &lt;cv_bridge/cv_bridge.h&gt;\n#include &lt;opencv2/opencv.hpp&gt;\n#include \"custom_msg/msg/image.hpp\"\n\nvoid from_message(const custom_msg::msg::Image::SharedPtr &amp;msg, cv::Mat &amp;frame)\n{\n    void *buffer = msg-&gt;data.data();\n    frame = cv::Mat(msg-&gt;rows, msg-&gt;cols, msg-&gt;type, buffer);\n}\n\nclass MinimalSub : public rclcpp::Node\n{\npublic:\n    MinimalSub() : Node(\"minimal_img_sub\")\n    {\n        RCLCPP_INFO_STREAM(this-&gt;get_logger(), \"hello sub\");\n        // auto qos = rclcpp::QoS(rclcpp::KeepLast(1));\n        auto qos = rclcpp::QoS(rclcpp::KeepLast(1), rmw_qos_profile_sensor_data);\n        sub_ = this-&gt;create_subscription&lt;custom_msg::msg::Image&gt;(\"topic\", qos, std::bind(&amp;MinimalSub::img_handler, this, std::placeholders::_1));\n    }\n\nprivate:\n    void img_handler(custom_msg::msg::Image::SharedPtr msg)\n    {\n        cv::Mat frame;\n        from_message(msg, frame);\n\n        auto now = this-&gt;get_clock()-&gt;now();\n        auto sec_as_tin64 = static_cast&lt;int64&gt;(now.seconds() * 1e9);\n\n        // auto msg_time = rclcpp::Duration::from_seconds(msg-&gt;timestamp);\n        RCLCPP_INFO_STREAM(this-&gt;get_logger(), (sec_as_tin64 - msg-&gt;timestamp)/1e9);\n        cv::imshow(\"debug\", frame);\n        cv::waitKey(1);\n    }\n    rclcpp::Subscription&lt;custom_msg::msg::Image&gt;::SharedPtr sub_;\n};\n\nint main(int argc, char *argv[])\n{\n    rclcpp::init(argc, argv);\n    auto node = std::make_shared&lt;MinimalSub&gt;();\n    rclcpp::spin(node);\n    rclcpp::shutdown();\n    return 0;\n}\n</code></pre> Image.msg<pre><code>uint32 rows\nuint32 cols\nuint8 channels\nuint8 type\nuint32 offset\nuint32 size\nuint64 count\nuint64 timestamp\n\nuint32 MAX_SIZE=921600\nchar[921600] data\n</code></pre> CMakeLists.txt<pre><code>cmake_minimum_required(VERSION 3.8)\nproject(cpp_demos)\n\nif(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES \"Clang\")\n  add_compile_options(-Wall -Wextra -Wpedantic)\nendif()\n\n# find dependencies\nfind_package(ament_cmake REQUIRED)\nfind_package(rclpy REQUIRED)\nfind_package(rclcpp REQUIRED)\nfind_package(OpenCV REQUIRED)\nfind_package(custom_msg REQUIRED)\nfind_package(example_interfaces REQUIRED)\n\ninclude_directories(include ${OpenCV_INCLUDE_DIRS})\n\n\n\n# # img pub\nadd_executable(simple_img_pub src/simple_img_pub.cpp)\nament_target_dependencies(simple_img_pub rclcpp custom_msg OpenCV)\n\n# # img sub\nadd_executable(simple_img_sub src/simple_img_sub.cpp)\nament_target_dependencies(simple_img_sub rclcpp  OpenCV custom_msg)\n\ninstall(TARGETS\n  simple_img_pub\n  simple_img_sub\n  DESTINATION lib/${PROJECT_NAME})\n\n\nament_package()\n</code></pre>","tags":["ros","dds","cyclonedds","image","large message"]},{"location":"ROS/ros_world/dds/cyclone_large_message_drop/#reference","title":"Reference","text":"<ul> <li> Reduce how eager CycloneDDS is in retransmits #484 </li> </ul>","tags":["ros","dds","cyclonedds","image","large message"]},{"location":"ROS/ros_world/dds/cyclonedds/","title":"Cyclone DDS","text":"<p>CycloneDDS web site</p>","tags":["cyclonedds","dds"]},{"location":"ROS/ros_world/dds/cyclonedds/#install","title":"install","text":"<pre><code>sudo apt install ros-humble-rmw-cyclonedds-cpp\n</code></pre>","tags":["cyclonedds","dds"]},{"location":"ROS/ros_world/dds/cyclonedds/#cyclonedds-xml-configuration","title":"CycloneDDS XML configuration","text":"<pre><code>export CYCLONEDDS_URI=file://$PWD/cyclonedds.xml\nexport RMW_IMPLEMENTATION=rmw_cyclonedds_cpp\n</code></pre> <p>cyclonedds version</p> <p>CycloneDDS has xml configuration file for runtime configuration that changed between versions.</p> <pre><code>dpkg -s ros-humble-cyclonedds\n</code></pre> <p>ros humble ver(0.10.5)</p> <p>configuration</p> <p>tools</p> <p>tips / best practice</p>","tags":["cyclonedds","dds"]},{"location":"ROS/ros_world/dds/cyclonedds/#cyclonedds-protocols","title":"CycloneDDS protocols","text":"<p>SSPDP and SEDP are the two core discovery protocols that enable nodes to find and communicate with each other automatically.</p> Protocol Full Name Role SPDP Simple Participant Discovery Protocol Discovers other DDS participants (nodes) on the network SEDP Simple Endpoint Discovery Protocol Discovers the publishers and subscribers (topics, types, QoS) within each participant <p>SPDP (Simple Participant Discovery Protocol) is the first step in DDS discovery. It:</p> <pre><code>- Broadcasts participant info (GUID, capabilities) using multicast on UDP port 7400 (domain 0).\n- Helps nodes find each other without a centralized registry.\n- Uses periodic announcements.\n- In CycloneDDS:\n    - SPDP is what shows up in tcpdump as packets to 239.255.0.1:7400 (default multicast group).\n</code></pre> <p>SEDP (Simple Endpoint Discovery Protocol):</p> <p>Once SPDP discovers participants, SEDP kicks in to share:</p> <pre><code>- What topics each node publishes or subscribes to\n- Message types\n- QoS policies\n</code></pre>","tags":["cyclonedds","dds"]},{"location":"ROS/ros_world/dds/cyclonedds/#demo-cyclonedds-between-two-machines","title":"Demo: CycloneDDS between two machines","text":"<p>Ros humble cyclonedds version 0.10.5</p>","tags":["cyclonedds","dds"]},{"location":"ROS/ros_world/dds/cyclonedds/#machine-1","title":"machine 1","text":"cyclonedds.xml<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;CycloneDDS xmlns=\"https://cdds.io/config\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xsi:schemaLocation=\"https://cdds.io/config https://raw.githubusercontent.com/eclipse-cyclonedds/cyclonedds/master/etc/cyclonedds.xsd\"&gt;\n  &lt;Domain Id=\"any\"&gt;\n    &lt;General&gt;\n       &lt;AllowMulticast&gt;true&lt;/AllowMulticast&gt;\n       &lt;!-- &lt;AllowMulticast&gt;spdp&lt;/AllowMulticast&gt; --&gt;\n    &lt;/General&gt;\n  &lt;/Domain&gt;\n&lt;/CycloneDDS&gt;\n</code></pre> <p>AllowMulticast</p> <p>Both configurations are valid <code>true</code> and <code>spdp</code> .</p> <p>The  setting controls which parts of DDS discovery and communication are allowed to use multicast. <ul> <li><code>true</code>: allow all multicast traffic,</li> <li><code>spdp</code>: only discovery uses multicast, other communication is unicast</li> <li><code>false</code>: unicast only</li> </ul>","tags":["cyclonedds","dds"]},{"location":"ROS/ros_world/dds/cyclonedds/#machine-2","title":"machine 2","text":"cyclonedds.xml<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;CycloneDDS xmlns=\"https://cdds.io/config\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xsi:schemaLocation=\"https://cdds.io/config https://raw.githubusercontent.com/eclipse-cyclonedds/cyclonedds/master/etc/cyclonedds.xsd\"&gt;\n  &lt;Domain Id=\"any\"&gt;\n    &lt;General&gt;\n      &lt;!-- &lt;AllowMulticast&gt;true&lt;/AllowMulticast&gt; --&gt;\n        &lt;Interfaces&gt;\n          &lt;NetworkInterface autodetermine=\"false\" name=\"enx5c857e356893\"/&gt;\n        &lt;/Interfaces&gt;\n    &lt;/General&gt;\n\n  &lt;/Domain&gt;\n</code></pre> <p>NetworkInterface</p> <p>The <code>NetworkInterface</code> setting is used to specify which network interface to use for communication. </p> <ul> <li><code>autodetermine=\"false\"</code>: disables automatic detection of the network interface.</li> <li><code>name=\"enx5c857e356893\"</code>: specifies the name of the network interface to use.</li> </ul>","tags":["cyclonedds","dds"]},{"location":"ROS/ros_world/dds/cyclonedds/#test","title":"Test","text":"<pre><code># machine 1\nros2 topic pub xxx std_msgs/String \"data: hello world\" -r 1\n</code></pre> <pre><code># machine 2\nros2 topic echo xxx\n</code></pre>","tags":["cyclonedds","dds"]},{"location":"ROS/ros_world/dds/cyclonedds/#system-configuration-recommendation","title":"System configuration recommendation","text":"<p>ros2 rmw cyclone settings</p> <ul> <li>net.core.rmem_max</li> <li>net.core.rmem_default</li> </ul> <pre><code># Add settings to sysctl \necho \"net.core.rmem_max=8388608\\nnet.core.rmem_default=8388608\\n\" | sudo tee /etc/sysctl.d/60-cyclonedds.conf\n</code></pre>","tags":["cyclonedds","dds"]},{"location":"ROS/ros_world/dds/cyclonedds/#posts","title":"Posts","text":"<ul> <li>cyclonedds_multicast</li> <li>cyclone shm</li> </ul>","tags":["cyclonedds","dds"]},{"location":"ROS/ros_world/dds/cyclonedds/cyclinedds_shm/","title":"CycloneDDS with SHM","text":"<p>Using cycloneDDS using shm</p> <p>Note</p> <p>Cyclone DDS Shared Memory - Boost Data Transfer Speed and Maximize Efficiency</p> <pre><code>&lt;CycloneDDS xmlns=\"https://cdds.io/config\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"https://cdds.io/config https://raw.githubusercontent.com/eclipse-cyclonedds/cyclonedds/iceoryx/etc/cyclonedds.xsd\"&gt;\n    &lt;Domain id=\"any\"&gt;\n        &lt;SharedMemory&gt;\n            &lt;Enable&gt;true&lt;/Enable&gt;\n            &lt;LogLevel&gt;info&lt;/LogLevel&gt;\n        &lt;/SharedMemory&gt;\n    &lt;/Domain&gt;\n&lt;/CycloneDDS&gt;\n</code></pre>","tags":["dds","cyclonedds","shm"]},{"location":"ROS/ros_world/dds/cyclonedds/cyclinedds_shm/#iox-roudi","title":"iox-roudi","text":"<p>roudi config <pre><code>iox-roudi \n</code></pre></p>","tags":["dds","cyclonedds","shm"]},{"location":"ROS/ros_world/dds/cyclonedds/cyclinedds_shm/#demo","title":"Demo","text":"<p>Run tmuxp script that run <code>iox-roudi</code> server and publish image using gscam with two subscribers We can see using bmon or other network sniffer that is no traffic</p> environment variables<pre><code>export RMW_IMPLEMENTATION=rmw_cyclonedds_cpp\nexport CYCLONEDDS_URI=file:///cyclonedds.xml\n</code></pre> tmux script <pre><code>session_name: dds\nwindows:\n  - window_name: cyclone\n    layout: tiled\n    suppress_history: false\n    shell_command_before:\n      - source /opt/ros/humble/setup.bash\n      - export RMW_IMPLEMENTATION=rmw_cyclonedds_cpp\n      - export CYCLONEDDS_URI=file:///home/user/projects/blog/docs/ROS/ros_world/dds/cyclonedds/shm.xml\n    panes:\n      - shell_command:\n          - iox-roudi \n      - shell_command: #\n          - export GSCAM_CONFIG=\"videotestsrc pattern=snow ! video/x-raw,width=640,height=480,framerate=30/1 ! videoconvert\"\n          - ros2 run gscam gscam_node\n      - shell_command: #\n          - ros2 run rqt_image_view rqt_image_view\n\n      - shell_command:\n          - # ros2 topic echo /camera/image_raw\n        split: vertical\n</code></pre> <ul> <li>cyclonedd.xml</li> <li>tmuxp yaml to run the demo</li> </ul>","tags":["dds","cyclonedds","shm"]},{"location":"ROS/ros_world/dds/cyclonedds/cyclinedds_shm/#iceoryx-introspection","title":"iceoryx-introspection","text":"<pre><code>ros-humble-iceoryx-introspection\n</code></pre> <pre><code>iox-introspection-client --h\n</code></pre>","tags":["dds","cyclonedds","shm"]},{"location":"ROS/ros_world/dds/cyclonedds/cyclinedds_shm/#reference","title":"reference","text":"<ul> <li>Using Shared Memory with ROS 2</li> </ul>","tags":["dds","cyclonedds","shm"]},{"location":"ROS/ros_world/dds/cyclonedds/cyclonedds_multicast/","title":"CycloneDDS XML configuration","text":"<ul> <li>CycloneDDS config</li> <li>xml reference</li> </ul> <p>Default Multicast Behavior in CycloneDDS (ROS 2 Humble)</p> Settings Default Value Discovery (SPDP) Multicast Enabled User Data (Topic Data) Unicast Only Meta Traffic (SEDP, other discovery traffic) Unicast Only","tags":["dds","cyclonedds","multicast","xml"]},{"location":"ROS/ros_world/dds/cyclonedds/cyclonedds_multicast/#demo","title":"Demo","text":"<p>Send image data using gscam package and subscribe using rqt_image_viewer and ros2 topic echo measure/monitor the data using bmon tool</p> installation<pre><code>sudo apt install bmon\nsudo apt install ros-humble-gscam\n</code></pre> bmon<pre><code>bmon\n</code></pre> terminal1<pre><code>export GSCAM_CONFIG=\"videotestsrc pattern=snow ! video/x-raw,width=640,height=480,framerate=30/1 ! videoconvert\"\nros2 run gscam gscam_node\n</code></pre> <pre><code>ros2 run rqt_image_view rqt_image_view\n</code></pre> <p></p> <pre><code>ros2 topic echo /camera/image_raw\n</code></pre> <p></p>","tags":["dds","cyclonedds","multicast","xml"]},{"location":"ROS/ros_world/dds/cyclonedds/cyclonedds_multicast/#multicast","title":"Multicast","text":"<p>For easy of use , using tmuxp yaml file to run all the test together temp.xml<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;CycloneDDS xmlns=\"https://cdds.io/config\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xsi:schemaLocation=\"https://cdds.io/config https://raw.githubusercontent.com/eclipse-cyclonedds/cyclonedds/master/etc/cyclonedds.xsd\"&gt;\n  &lt;Domain Id=\"any\"&gt;\n    &lt;General&gt;\n      &lt;AllowMulticast&gt;true&lt;/AllowMulticast&gt;\n    &lt;/General&gt;\n  &lt;/Domain&gt;\n&lt;/CycloneDDS&gt;\n</code></pre></p>","tags":["dds","cyclonedds","multicast","xml"]},{"location":"ROS/ros_world/dds/cyclonedds/cyclonedds_multicast/#tmuxp-script","title":"tmuxp script","text":"tmuxp_demo_multicast.yaml<pre><code>session_name: dds\nwindows:\n  - window_name: cyclone\n    layout: tiled\n    suppress_history: false\n    shell_command_before:\n      - source /opt/ros/humble/setup.bash\n    panes:\n      - shell_command: #\n          - export GSCAM_CONFIG=\"videotestsrc pattern=snow ! video/x-raw,width=640,height=480,framerate=30/1 ! videoconvert\"\n          - export CYCLONEDDS_URI=file://$PWD/temp.xml\n          - ros2 run gscam gscam_node\n      - shell_command: #\n          - export CYCLONEDDS_URI=file://$PWD/temp.xml\n          - ros2 run rqt_image_view rqt_image_view\n\n      - shell_command:\n          - export CYCLONEDDS_URI=file://$PWD/temp.xml\n          -  # ros2 topic echo /camera/image_raw\n</code></pre> <pre><code>tmuxp load tmuxp_demo_multicast.yaml\n</code></pre>","tags":["dds","cyclonedds","multicast","xml"]},{"location":"ROS/ros_world/dds/cyclonedds/cyclonedds_multicast/#multicast-with-one-subscriber","title":"multicast with one subscriber","text":"<p>lo</p> <p>The communication use lo interface by default lo not support multicast</p> <p></p>","tags":["dds","cyclonedds","multicast","xml"]},{"location":"ROS/ros_world/dds/cyclonedds/cyclonedds_multicast/#multicast-with-two-or-more-subscriber","title":"multicast with two or more subscriber","text":"<p>wlo1</p> <p>The communication use the physical adapter (wlo1) support multicast</p> <p></p>","tags":["dds","cyclonedds","multicast","xml"]},{"location":"ROS/ros_world/dds/cyclonedds/cyclonedds_multicast/#reference","title":"Reference","text":"<ul> <li>Download tmuxp file</li> </ul>","tags":["dds","cyclonedds","multicast","xml"]},{"location":"ROS/ros_world/dds/cyclonedds/cyclonedds_config/","title":"CycloneDDS configuration","text":"<p>Control cyclonedds discovery, network and tracing settings using xml file more</p> <p>cyclone version</p> <p>Check to right documentation for installed version</p> usage<pre><code>export CYCLONEDDS_URI=\"file://$HOME/cyclonedds.xml\"\n</code></pre> <p>unicast</p> <p>TBD</p> <p>TBD</p> <p>Tracing</p> <p>shm</p> <p>large messages</p>","tags":["dds","cyclonedds","config","cyclonedds_uri"]},{"location":"ROS/ros_world/dds/cyclonedds/cyclonedds_config/#reporting-and-tracing","title":"Reporting and Tracing","text":"<p>doc</p>","tags":["dds","cyclonedds","config","cyclonedds_uri"]},{"location":"ROS/ros_world/dds/cyclonedds/cyclonedds_config/#demo-output-conf-to-log-file","title":"Demo: output conf to log file","text":"<p>create directory path before running</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;CycloneDDS\n   xmlns=\"https://cdds.io/config\"\n   xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n   xsi:schemaLocation=\"https://cdds.io/config https://raw.githubusercontent.com/eclipse-cyclonedds/cyclonedds/master/etc/cyclonedds.xsd\"\n &gt;\n   &lt;Domain Id=\"any\"&gt;\n    &lt;Tracing&gt;\n      &lt;Verbosity&gt;config&lt;/Verbosity&gt;\n      &lt;OutputFile&gt;\n        ${HOME}/dds/log/cdds.log.${CYCLONEDDS_PID}\n      &lt;/OutputFile&gt;\n    &lt;/Tracing&gt;\n  &lt;/Domain&gt;\n&lt;/CycloneDDS&gt;\n</code></pre>","tags":["dds","cyclonedds","config","cyclonedds_uri"]},{"location":"ROS/ros_world/dds/cyclonedds/cyclonedds_config/#shm","title":"SHM","text":"<p>Using Shared Memory with ROS 2</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;\n&lt;CycloneDDS xmlns=\"https://cdds.io/config\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"https://cdds.io/config https://raw.githubusercontent.com/eclipse-cyclonedds/cyclonedds/iceoryx/etc/cyclonedds.xsd\"&gt;\n    &lt;Domain id=\"any\"&gt;\n        &lt;SharedMemory&gt;\n            &lt;Enable&gt;true&lt;/Enable&gt;\n            &lt;LogLevel&gt;info&lt;/LogLevel&gt;\n        &lt;/SharedMemory&gt;\n    &lt;/Domain&gt;\n&lt;/CycloneDDS&gt;\n</code></pre> run rudi<pre><code>iox-roudi\n</code></pre>","tags":["dds","cyclonedds","config","cyclonedds_uri"]},{"location":"ROS/ros_world/dds/cyclonedds/cyclonedds_config/#large-message","title":"Large message","text":"<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;\n&lt;CycloneDDS xmlns=\"https://cdds.io/config\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"https://cdds.io/config https://raw.githubusercontent.com/eclipse-cyclonedds/cyclonedds/master/etc/cyclonedds.xsd\"&gt;\n  &lt;Domain Id=\"any\"&gt;\n    &lt;General&gt;\n      &lt;Interfaces&gt;\n        &lt;NetworkInterface autodetermine=\"true\" priority=\"default\" multicast=\"default\" /&gt;\n      &lt;/Interfaces&gt;\n      &lt;AllowMulticast&gt;default&lt;/AllowMulticast&gt;\n      &lt;MaxMessageSize&gt;65500B&lt;/MaxMessageSize&gt;\n    &lt;/General&gt;\n    &lt;Internal&gt;\n      &lt;SocketReceiveBufferSize min=\"10MB\"/&gt;\n      &lt;Watermarks&gt;\n        &lt;WhcHigh&gt;500kB&lt;/WhcHigh&gt;\n      &lt;/Watermarks&gt;\n    &lt;/Internal&gt;\n  &lt;/Domain&gt;\n&lt;/CycloneDDS&gt;\n</code></pre> /etc/sysctl.d/10-cyclone-max.conf<pre><code># IP fragmentation settings\nnet.ipv4.ipfrag_time=3  # in seconds, default is 30 s\nnet.ipv4.ipfrag_high_thresh=134217728  # 128 MiB, default is 256 KiB\n\n# Increase the maximum receive buffer size for network packets\nnet.core.rmem_max=2147483647  # 2 GiB, default is 208 KiB\n</code></pre>","tags":["dds","cyclonedds","config","cyclonedds_uri"]},{"location":"ROS/ros_world/dds/cyclonedds/cyclonedds_config/unicast/","title":"CycloneDDS unicast between machine","text":"<p>Disable multicast discovery and allow unicast traffic between two machines</p>","tags":["dds","cyclonedds","ros","unicast"]},{"location":"ROS/ros_world/dds/cyclonedds/cyclonedds_config/unicast/#demo","title":"Demo","text":"<pre><code>graph TD\n    subgraph MachineA [Machine A]\n        A1[eth0: 192.168.1.10]\n        A2[eth1: 10.0.0.1]\n    end\n\n    subgraph MachineB [Machine B]\n        B1[eth0: 10.0.0.4]\n    end\n\n    A2 --- B1\n</code></pre> Sender cyclondedds.xml<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;CycloneDDS xmlns=\"https://cdds.io/config\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" \nxsi:schemaLocation=\"https://cdds.io/config https://raw.githubusercontent.com/eclipse-cyclonedds/cyclonedds/master/etc/cyclonedds.xsd\"&gt;\n\n  &lt;Domain Id=\"any\"&gt;\n    &lt;General&gt;\n      &lt;AllowMulticast&gt;false&lt;/AllowMulticast&gt;\n\n    &lt;/General&gt;\n    &lt;Discovery&gt;\n      &lt;ParticipantIndex&gt;auto&lt;/ParticipantIndex&gt;\n      &lt;Peers&gt;\n        &lt;Peer Address=\"10.0.0.4\" /&gt;\n        &lt;Peer Address=\"127.0.0.1\" /&gt;\n      &lt;/Peers&gt;\n    &lt;/Discovery&gt;\n  &lt;/Domain&gt;\n&lt;/CycloneDDS&gt;\n</code></pre> Receiver cyclondedds.xml<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;CycloneDDS xmlns=\"https://cdds.io/config\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" \nxsi:schemaLocation=\"https://cdds.io/config https://raw.githubusercontent.com/eclipse-cyclonedds/cyclonedds/master/etc/cyclonedds.xsd\"&gt;\n\n  &lt;Domain Id=\"any\"&gt;\n    &lt;General&gt;\n        &lt;AllowMulticast&gt;false&lt;/AllowMulticast&gt;\n    &lt;/General&gt;\n    &lt;Discovery&gt;\n    &lt;ParticipantIndex&gt;auto&lt;/ParticipantIndex&gt;\n      &lt;Peers&gt;\n        &lt;Peer Address=\"10.0.0.1\" /&gt;\n        &lt;Peer Address=\"127.0.0.1\" /&gt;\n      &lt;/Peers&gt;\n    &lt;/Discovery&gt;\n  &lt;/Domain&gt;\n&lt;/CycloneDDS&gt;\n</code></pre> <p>peer localhost</p> <p><code>&lt;Peer Address=\"127.0.0.1\" /&gt;</code></p> <p>This is essential because Cyclone DDS does not automatically assume loopback (127.0.0.1) unless you\u2019re using multicast or explicitly list it.</p> env.sh<pre><code>export CYCLONEDDS_URI=file://$PWD/cyclonedds.xml\nsource /opt/ros/humble/setup.bash\nexport RMW_IMPLEMENTATION=rmw_cyclonedds_cpp\n</code></pre>","tags":["dds","cyclonedds","ros","unicast"]},{"location":"ROS/ros_world/dds/cyclonedds/cyclonedds_config/unicast/#usage","title":"usage","text":"<p>We can run the pub/sub on both side</p> pub<pre><code>source env.sh\nros2 topic pub xxx std_msgs/String \"data: hello world\" -r 1\n</code></pre> echo<pre><code>source env.sh\nros2 topic echo /xxx\n</code></pre> <p>ros2 daemon</p> <p>The ROS2 daemon is a background process that:</p> <ul> <li>Caches discovered ROS nodes and topics</li> <li>Improves discovery performance</li> <li>Manages node name resolution</li> </ul> <p>Some time we need to restart for refresh discovery when using ROS commands</p> <pre><code>ros2 daemon stop &amp;&amp; ros2 daemon start\n</code></pre>","tags":["dds","cyclonedds","ros","unicast"]},{"location":"ROS/ros_world/dds/cyclonedds/cyclonedds_tips/","title":"Cyclonedds","text":"","tags":["dds","cyclonedds","tips"]},{"location":"ROS/ros_world/dds/cyclonedds/cyclonedds_tips/#send-large-message-like-image","title":"Send large message like Image","text":"<p>stereolabs.com: DDS Middleware and Network tuning</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;CycloneDDS xmlns=\"https://cdds.io/config\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xsi:schemaLocation=\"https://cdds.io/config https://raw.githubusercontent.com/eclipse-cyclonedds/cyclonedds/master/etc/cyclonedds.xsd\"&gt;\n  &lt;Domain Id=\"any\"&gt;\n    &lt;Internal&gt;\n      &lt;SocketReceiveBufferSize min=\"20MB\"&gt;&lt;/SocketReceiveBufferSize&gt;\n    &lt;/Internal&gt;\n  &lt;/Domain&gt;\n&lt;/CycloneDDS&gt;\n</code></pre> <pre><code>sudo sysctl -w net.core.rmem_max=30000000\nsudo sysctl -w net.core.rmem_max=2147483647 \n</code></pre>","tags":["dds","cyclonedds","tips"]},{"location":"ROS/ros_world/dds/cyclonedds/cyclonedds_tools/","title":"Cyclonedds tools","text":"install<pre><code>sudo apt install cyclonedds-tools\n</code></pre>","tags":["dds","cyclonedds","tools"]},{"location":"ROS/ros_world/dds/cyclonedds/cyclonedds_tools/#ddsperf","title":"ddsperf","text":"<p>Measures primarily data throughput and latency of the cyclone-based applications within the network or within the same board,</p> <p>Benchmarking Tools</p> <p>Tip</p> <p>Network throughput is a measure of how much data is successfully transferred from one point to another in a given period of time across a network. It's typically expressed in bits per second (bps)</p> <p>Tip</p> <p>Latency is the time delay wheen the packet is send and when it is received.</p> <p>using ping whe measure to round trip latency for a packet </p> terminal 1<pre><code>ddsperf pub size 1k 1Hz\n</code></pre> terminal 2<pre><code>ddsperf sub\n#\n\n[15894] 1.000  size 1024 total 1 lost 0 delta 1 lost 0 rate 0.00 kS/s 0.01 Mb/s (0.00 kS/s 0.00 Mb/s)\n[15894] 2.000  size 1024 total 2 lost 0 delta 1 lost 0 rate 0.00 kS/s 0.01 Mb/s (0.00 kS/s 0.00 Mb/s)\n[15894] 3.000  size 1024 total 3 lost 0 delta 1 lost 0 rate 0.00 kS/s 0.01 Mb/s (0.00 kS/s 0.00 Mb/s)\n[15894] 4.000  size 1024 total 4 lost 0 delta 1 lost 0 rate 0.00 kS/s 0.01 Mb/s (0.00 kS/s 0.00 Mb/s)\n[15894] 4.000  rss:6.4MB vcsw:11 ivcsw:0 ddsperf:1%+0%\n</code></pre> <ul> <li>pid</li> <li>time</li> <li>size of the data involved in this test (For example, 1024 bytes, which is the \u201csize 1k\u201d defined in the pub command).</li> <li>total packets received .</li> <li>The total packets lost (For example, 0).</li> <li>delta: the packets received in a 1 second reporting </li> <li>The packets lost in a 1 second report period (For example, 0).</li> <li>The number of samples processed by the Sub application in 1s (unit KS/s is 1000 samples per second).</li> </ul> publisher<pre><code>ddsperf pub size 1k 10Hz\n</code></pre> <pre><code>ddsperf sub\n[15916] participant ubuntu:15916: new (self)\n[15916] participant dev:5138: new\n[15916] 1.001  size 1024 total 10 lost 0 delta 10 lost 0 rate 0.01 kS/s 0.08 Mb/s (0.00 kS/s 0.01 Mb/s)\n[15916] 2.000  size 1024 total 20 lost 0 delta 10 lost 0 rate 0.01 kS/s 0.08 Mb/s (0.00 kS/s 0.02 Mb/s)\n[15916] 3.000  size 1024 total 30 lost 0 delta 10 lost 0 rate 0.01 kS/s 0.08 Mb/s (0.00 kS/s 0.02 Mb/s)\n[15916] 4.000  size 1024 total 40 lost 0 delta 10 lost 0 rate 0.01 kS/s 0.08 Mb/s (0.00 kS/s 0.03 Mb/s)\n[15916] 4.000  rss:6.5MB vcsw:28 ivcsw:1 ddsperf:0%+1%\n</code></pre> <pre><code>[15916] 4.000  rss:6.5MB vcsw:28 ivcsw:1 ddsperf:0%+1%\n</code></pre> <ul> <li>rss: process memory usage</li> <li>vcsw: context switch (idle) </li> <li>ivcsw: context switch (block)</li> <li>ddsperf: cpu user space, cpu kernel space</li> </ul>","tags":["dds","cyclonedds","tools"]},{"location":"ROS/ros_world/dds/cyclonedds/cyclonedds_tools/#using-iperf3","title":"using iperf3","text":"<p>iperf (or more commonly iperf3) is a powerful network testing tool used to measure:</p> <ul> <li>Network throughput (bandwidth)</li> <li>Data transfer rate (in both directions)</li> <li>Packet loss (UDP mode)</li> <li>Jitter (UDP mode)</li> <li>Retransmissions (TCP mode)</li> </ul> install<pre><code>sudo apt install iperf3\n</code></pre> run server<pre><code>iperf3 -s\n</code></pre> run client<pre><code>iperf3 -c &lt;server-ip&gt;\n\n#\n# send udp packet at 10Mbps\niperf3 -c 192.168.1.100 -u -b 10M\n</code></pre> Measure Throughput<pre><code># run server\n\n# run client\niperf3 -c 192.168.1.100\n\n# result\n[ ID] Interval           Transfer     Bitrate         Retr  Cwnd\n[  5]   0.00-1.00   sec   113 MBytes   952 Mbits/sec    0    329 KBytes \n</code></pre> <ul> <li>Transfer: Total amount of data send during the duration</li> <li>Bitrate: average speed over the duration</li> </ul>","tags":["dds","cyclonedds","tools"]},{"location":"ROS/ros_world/navigation_and_localization/","title":"Index","text":"<p>Robot Localization</p> <p>NAV2</p> <p>tbd</p>"},{"location":"ROS/ros_world/navigation_and_localization/nav2/","title":"NAV2","text":"<p>Nav2</p>","tags":["ros","nav"]},{"location":"ROS/ros_world/navigation_and_localization/robot_localization/","title":"Robot localization","text":"<p>The robot_localization package is a collection of non-linear state estimators for robots moving in 3D (or 2D) space. more </p> <p>Each of the state estimators can fuse an arbitrary number of sensors (IMUs, odometers, indoor localization systems, GPS receivers\u2026) to track the 15 dimensional:</p> <ul> <li>position: x, y, z</li> <li>orientation: roll, pitch, yaw</li> <li>linear velocity: vx, vy, vz</li> <li>angular velocity:  roll_rate, pitch_rate, yaw_rate</li> <li>linear acceleration: ax, ay, az</li> </ul>","tags":["ros","localization"]},{"location":"ROS/ros_world/navigation_and_localization/robot_localization/#coordinate-systems","title":"Coordinate systems","text":"<p>REP 105 Coordinate Frames for Mobile Platforms which describe the coordinate system conventions used in ROS</p> <p>(earth) -&gt; map -&gt; odom -&gt; base_link</p> <p>base_link is rigidly attached to the mobile robot\u2019s base. The base_link frame can be attached in any arbitrary position or orientation, but REP 103 specifies the preferred orientation of the frame as X forward, Y left and Z up. (flu)</p> <p>odom frame is a local, drifting coordinate system used to track the robot's position relative to its starting point. - It starts at (0, 0, 0) when the robot boots up. - It moves with the robot as it drives around. - It is smooth and continuous, meaning it never jumps \u2014 ideal for control. - But it can drift over time due to sensor inaccuracies (e.g., wheel slippage, IMU noise).</p> <p>Odometry is the process of estimating the robot's pose (position + orientation) by integrating motion over time. odom -&gt; base_link transform (robot's motion relative to the start)</p> <p>Dead Reckoning</p> <p>Dead reckoning is the process of estimating your current position based on a previous position and motion measurements (like speed and direction).</p> <p>map frame is a fixed, global reference frame in ROS used for global localization \u2014 a known, non-drifting coordinate system representing the world.</p>","tags":["ros","localization"]},{"location":"ROS/ros_world/navigation_and_localization/robot_localization/#how-its-work","title":"How it's work","text":"<p>The robot_localization state estimator nodes accept measurements from an arbitrary number of pose-related sensors:</p> <ul> <li>nav_msgs/Odometry: position, orientation, linear and angular velocity</li> <li>sensor_msgs/Imu: orientation, angular velocity and linear acceleration</li> <li>geometry_msgs/PoseWithCovarianceStamped: position and orientation</li> <li>geometry_msgs/TwistWithCovarianceStamped: linear and angular velocity</li> </ul> <p>Based on these measurements, the state estimators publish the filtered position, orientation and linear and angular velocity (nav_msgs/Odometry) on the /odometry/filtered topic and (if enabled) the filtered acceleration on the /accel/filtered topics.</p>","tags":["ros","localization"]},{"location":"ROS/ros_world/navigation_and_localization/robot_localization/#tf","title":"TF","text":"<p>robot_localization publish one of the tf's - odom -&gt; base_link - map -&gt; odom</p> <p>Usually we run two estimator</p> <ul> <li>odom \u2192 base_link transform, which gets all continuous inputs</li> <li>map \u2192 odom transform, which gets all (both continuous and non-continuous)</li> </ul>","tags":["ros","localization"]},{"location":"ROS/ros_world/navigation_and_localization/robot_localization/#sensor-flow","title":"Sensor flow","text":"<ul> <li>continuous sensors send data in high rate and regularly like imu and wheel odometry (&gt;10hz)</li> <li>none-continuous sensor send data in low rate like gps (&lt;10 hz) and can be expected non-regularly interval.</li> </ul> <p>This very important to the filter how much trust to put on prediction and how aggressively to correct on sensor update</p>","tags":["ros","localization"]},{"location":"ROS/ros_world/navigation_and_localization/robot_localization/#demo","title":"Demo","text":"<p>Use turtlesim to simulate robot_localization package usage The idea for the demo The Ros Robot_localization package</p> <p>Read more</p>","tags":["ros","localization"]},{"location":"ROS/ros_world/navigation_and_localization/robot_localization/#reference","title":"Reference","text":"<ul> <li>The Ros Robot_localization package</li> </ul>","tags":["ros","localization"]},{"location":"ROS/ros_world/navigation_and_localization/robot_localization/localization_demo/","title":"Robot localization using pose and twist messages","text":"<p>Using turtlesim read turtle odometry and create two sensors</p> <p>Both sensors add random noise and set sensor covariance</p> <ul> <li>Position: publish PoseWithCovarianceStamped message</li> <li>Velocity: publish TwistWithCovarianceStamped message</li> </ul> <p>Run two robot_localization nodes:</p> <ul> <li>odom -&gt; base_link (config/ekf_odom.yaml)</li> <li>map -&gt; odom (config/ekf_map.yaml)</li> </ul> <pre><code>turtlesim_loc\n\u251c\u2500\u2500 CMakeLists.txt\n\u251c\u2500\u2500 config\n\u2502   \u251c\u2500\u2500 ekf_map.yaml\n\u2502   \u2514\u2500\u2500 ekf_odom.yaml\n\u251c\u2500\u2500 launch\n\u2502   \u2514\u2500\u2500 loc_sim.launch.py\n\u251c\u2500\u2500 package.xml\n\u251c\u2500\u2500 tmux\n\u2502   \u2514\u2500\u2500 sim.yaml\n\u2514\u2500\u2500 turtlesim_loc\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 pose_sim.py\n    \u251c\u2500\u2500 sensors\n    \u2502   \u251c\u2500\u2500 __init__.py\n    \u2502   \u251c\u2500\u2500 position.py\n    \u2502   \u2514\u2500\u2500 twist.py\n    \u2514\u2500\u2500 transforms\n        \u251c\u2500\u2500 __init__.py\n        \u2514\u2500\u2500 tf_visual.py\n</code></pre>","tags":["ros","robot localization"]},{"location":"ROS/ros_world/navigation_and_localization/robot_localization/localization_demo/#config","title":"config","text":"map -&gt; odom estimator <pre><code>ekf_filter_node:\n  ros__parameters:\n    use_sim_time: false\n\n    # Sensor topic names\n    twist0: odom_turtle/sensor/twist\n    pose0: pose_turtle/sensor/pose\n\n    # Configuration: which variables to fuse (15 booleans for each topic)\n    # x, y, z, roll, pitch, yaw, vx, vy, vz, vroll, vpitch, vyaw, ax, ay, az\n    twist0_config: [false, false, false,\n                       false, false, false,\n                       true,  true, false,\n                       false, false, true,\n                       false, false, false]\n\n    pose0_config: [true,  true,  false,\n                   false, false, true,\n                   false, false, false,\n                   false, false, false,\n                   false, false, false]\n\n    # Frame settings\n    base_link_frame: base_link\n    odom_frame: odom\n    world_frame: map\n    map_frame: map\n\n    # Output\n    publish_tf: true\n    publish_acceleration: false\n\n    # Frequency\n    frequency: 30.0\n\n    two_d_mode: true\n</code></pre> odom -&gt; base_link estimator <pre><code>ekf_filter_node:\n  ros__parameters:\n    use_sim_time: false\n\n    # Sensor topic names\n    twist0: odom_turtle/sensor/twist\n\n    # Configuration: which variables to fuse (15 booleans for each topic)\n    # x, y, z, roll, pitch, yaw, vx, vy, vz, vroll, vpitch, vyaw, ax, ay, az\n    twist0_config: [false, false, false,\n                       false, false, false,\n                       true,  true, false,\n                       false, false, true,\n                       false, false, false]\n\n\n    # Frame settings\n    base_link_frame: base_link\n    odom_frame: odom\n    world_frame: odom\n    map_frame: map\n\n    # Output\n    publish_tf: true\n    publish_acceleration: false\n\n    # Frequency\n    frequency: 10.0\n\n    two_d_mode: true\n</code></pre> <p>The two `robot_localization\" publish TF</p> <ul> <li>map-&gt; odom</li> <li>odom -&gt; base_link</li> </ul> <p>We use the TF to draw/simulate the fuse turtle</p> fuse turtle visual <pre><code>#!/usr/bin/env python3\n# https://github.com/Kapernikov/ros_robot_localization_tutorial/blob/master/ros-ws/src/robot_localization_demo/src/transforms/transformation_visualization_node.cpp\n\nimport rclpy\nfrom rclpy.node import Node\nfrom turtlesim.srv import Spawn, SetPen, TeleportAbsolute\nfrom tf2_ros import TransformListener, Buffer\nimport tf2_ros\nfrom rclpy.time import Time\nfrom rclpy.duration import Duration\nfrom tf2_geometry_msgs import do_transform_pose\nfrom geometry_msgs.msg import Pose\n\nSRV_SPAWN = \"/spawn\"\nROBOT_NAME = \"filter_turtle\"\nSRV_TELEPORT = f\"/{ROBOT_NAME}/teleport_absolute\"\n\nclass MyNode(Node):\n    def __init__(self):\n        node_name=\"minimal\"\n        super().__init__(node_name)\n        self.__last_call = 0\n        self.__update_counter = 0\n        self.__spawn_client = self.create_client(Spawn, SRV_SPAWN)\n        while not self.__spawn_client.wait_for_service(timeout_sec=1.0):\n            self.get_logger().warn(f\"Service not available. Retrying... \")\n\n        self.__spawn()\n        self.__teleport_client = self.create_client(TeleportAbsolute, SRV_TELEPORT)\n        while not self.__teleport_client.wait_for_service(timeout_sec=3.0):\n            self.get_logger().warn(f\"Service teleport not available. Retrying... \")\n\n        # Create a buffer and a listener\n        self.tf_buffer = Buffer()\n        self.tf_listener = TransformListener(self.tf_buffer, self)\n\n        # Timer to periodically lookup transform\n        self.timer = self.create_timer(1.0, self.__timer_callback)\n\n    def __spawn(self):\n        request = Spawn.Request()\n        request.name = ROBOT_NAME\n        request.x = 5.55\n        request.y = 5.55\n        future = self.__spawn_client.call_async(request)\n        rclpy.spin_until_future_complete(self, future)\n        if future.result() is not None:\n            self.get_logger().info(f\"Turtle spawned successfully: {future.result()}\")\n        else:\n            self.get_logger().error(f\"Failed to spawn turtle: {future.exception()}\")\n\n        SRV_SET_PEN = f\"/{ROBOT_NAME}/set_pen\"\n        set_pen_client = self.create_client(SetPen, SRV_SET_PEN)\n        while not set_pen_client.wait_for_service(timeout_sec=1.0):\n            self.get_logger().warn(f\"Service set_pen not available. Retrying... \")\n\n        request = SetPen.Request()\n        request.r = 0\n        request.g = 255 \n        request.b = 0\n        request.width = 3\n        request.off = 0\n        future = set_pen_client.call_async(request)\n        rclpy.spin_until_future_complete(self, future)\n        if future.result() is not None:\n            self.get_logger().info(f\"Turtle 'set pen' successfully: {future.result()}\")\n        else:\n            self.get_logger().error(f\"Failed to 'set pen' turtle: {future.exception()}\")\n\n\n    def __timer_callback(self):\n        try:\n            trans = self.tf_buffer.lookup_transform(\n                target_frame='map',\n                source_frame='base_link',\n                time=Time(),  # \"now\"\n                timeout=Duration(seconds=1.0)\n            )\n            self.get_logger().info(\n                f\"Transform: Translation = ({trans.transform.translation.x:.2f}, {trans.transform.translation.y:.2f}, {trans.transform.translation.z:.2f})\"\n            )\n        except (tf2_ros.LookupException, tf2_ros.ConnectivityException, tf2_ros.ExtrapolationException) as e:\n            self.get_logger().warn(f'Could not transform: {e}')\n\n\n        pose = Pose()\n        new_pose = do_transform_pose(pose, trans)\n        request = TeleportAbsolute.Request()\n        request.x = new_pose.position.x\n        request.y = new_pose.position.y\n        request.theta = 0.0\n        future = self.__teleport_client.call_async(request)\n        future.add_done_callback(self.__teleport_response_handler)\n\n    def __teleport_response_handler(self, future):\n        pass\n\ndef main(args=None):\n    rclpy.init(args=args)\n    node = MyNode()\n    rclpy.spin(node)\n    node.destroy_node()\n    rclpy.shutdown()\n\nif __name__ == '__main__':\n    main()\n</code></pre>","tags":["ros","robot localization"]},{"location":"ROS/ros_world/navigation_and_localization/robot_localization/localization_demo/#launch-demo","title":"Launch demo","text":"<ul> <li>terminal 1: launch localization and all sensors</li> <li>terminal 2: run teleoop</li> <li>termianl 3: run fuse turtle visual</li> </ul> launch  <pre><code>import os\n\nfrom ament_index_python.packages import get_package_share_directory\nfrom launch import LaunchDescription\nfrom launch.actions import DeclareLaunchArgument\nfrom launch.actions import IncludeLaunchDescription\nfrom launch.launch_description_sources import PythonLaunchDescriptionSource\nfrom launch.substitutions import LaunchConfiguration\nfrom launch_ros.actions import Node\nfrom launch.substitutions import PathJoinSubstitution\n\nPKG = \"turtlesim_loc\"\n\ndef generate_launch_description():\n    ld = LaunchDescription()\n\n    ekf_config_odom = PathJoinSubstitution([\n        get_package_share_directory(PKG),\n        'config',\n        'ekf_odom.yaml'\n    ])\n\n    ekf_config_map = PathJoinSubstitution([\n        get_package_share_directory(PKG),\n        'config',\n        'ekf_map.yaml'\n    ])\n\n    turtle = Node(\n        package='turtlesim',\n        executable='turtlesim_node',\n        output='screen')\n\n    position_sensor_emulation = Node(\n        package='turtlesim_loc',\n        executable='position.py',\n        output='screen')\n\n    twist_sensor_emulation = Node(\n        package='turtlesim_loc',\n        executable='twist.py',\n        output='screen')\n\n    teleop = Node(\n        package='turtlesim',\n        executable='turtle_teleop_key',\n        output='screen')\n    # ros2 run robot_localization ekf_node --ros-args --params-file /workspace/src/localiztion_demo/turtlesim_loc/config/ekf.yaml --log-level info\n    ekf_node_odom = Node(\n            package='robot_localization',\n            executable='ekf_node',\n            name='ekf_filter_node',\n            output='screen',\n            parameters=[ekf_config_odom],\n            remappings=[\n                ('odometry/filtered', 'odometry/filtered_odom')\n            ]\n        )\n\n    ekf_node_map = Node(\n            package='robot_localization',\n            executable='ekf_node',\n            name='ekf_filter_node',\n            output='screen',\n            parameters=[ekf_config_map],\n            remappings=[\n                ('odometry/filtered', 'odometry/filtered_map')\n            ]\n        )\n\n    ld.add_action(turtle)\n    ld.add_action(position_sensor_emulation)\n    ld.add_action(twist_sensor_emulation)\n    # ld.add_action(teleop)\n    ld.add_action(ekf_node_map)\n    ld.add_action(ekf_node_odom)\n    return ld\n</code></pre> terminal 1<pre><code>\n</code></pre> terminal 2<pre><code>\n</code></pre> terminal 3<pre><code>\n</code></pre>","tags":["ros","robot localization"]},{"location":"ROS/ros_world/parameters/","title":"ROS Parameters","text":"","tags":["ros2","parameters"]},{"location":"ROS/ros_world/parameters/#parameter-file","title":"parameter file","text":"","tags":["ros2","parameters"]},{"location":"ROS/ros_world/parameters/#demo","title":"Demo:","text":"<p>Simple Node with multiple parameter file one of the file use wildcard as <code>node_name</code></p> Post <pre><code>import rclpy\nfrom rclpy.node import Node\n\nPARAM1 = \"param1\"\nPARAM2 = \"param2\"\n\nclass MyNode(Node):\n    def __init__(self):\n        node_name=\"minimal\"\n        super().__init__(node_name)\n        p1 = self.declare_parameter(PARAM1, 1)\n        p2 = self.declare_parameter(PARAM2, 2)\n        self.get_logger().info(f\"P1: {p1.value}\")\n        self.get_logger().info(f\"P1: {p2.value}\")\n\ndef main(args=None):\n    rclpy.init(args=args)\n    node = MyNode()\n    rclpy.spin_once(node)\n    node.destroy_node()\n    rclpy.shutdown()\n\nif __name__ == '__main__':\n    main()\n</code></pre>","tags":["ros2","parameters"]},{"location":"ROS/ros_world/parameters/#param-files","title":"Param files","text":"params1.yaml<pre><code>minimal:\n  ros__parameters:\n    param1: 10\n    param2: 20\n</code></pre> params2.yaml<pre><code>/**:\n  ros__parameters:\n    param1: 100\n    param2: 200\n</code></pre>","tags":["ros2","parameters"]},{"location":"ROS/ros_world/parameters/#usage","title":"usage","text":"<p>Note</p> <p>Wildcards can be used for node names and namespaces. - <code>*</code>  matches a single token delimited by slashes (/).  - <code>**</code> matches zero or more tokens delimited by slashes.  - Partial matches are not allowed (e.g. foo*).</p> <pre><code>/**:\n    ros__parameters:\n        wildcard_full: \"Full wildcard for any namespaces and any node names\"\n\n/**/parameter_blackboard:\n    ros__parameters:\n        wildcard_namespace: \"Wildcard for a specific node name under any namespace\"\n\n/*:\n    ros__parameters:\n        wildcard_nodename_root_namespace: \"Wildcard for any node names, but only in root namespace\"\n</code></pre> use default params value declare in code<pre><code>ros2 run ros_py param_demo.py \n[INFO] [1740517785.377374134] [minimal]: P1: 1\n[INFO] [1740517785.377601145] [minimal]: P1: 2\n</code></pre> load paras from file<pre><code>ros2 run ros_py param_demo.py --ros-args --params-file params1.yaml\n[INFO] [1740517874.809880531] [minimal]: P1: 10\n[INFO] [1740517874.810112715] [minimal]: P1: 20\n</code></pre>","tags":["ros2","parameters"]},{"location":"ROS/ros_world/parameters/#load-multiple-params-file","title":"load multiple params file","text":"<p>wildcard matching</p> <p>params2.yaml has global match <code>/**</code></p> <pre><code>ros2 run ros_py param_demo.py \\\n--ros-args \\\n--params-file params1.yaml \\\n--params-file params2.yaml\n[INFO] [1740518709.532923265] [minimal]: P1: 100\n[INFO] [1740518709.533163666] [minimal]: P1: 200\n</code></pre>","tags":["ros2","parameters"]},{"location":"ROS/ros_world/parameters/#reference","title":"Reference","text":"<ul> <li>Passing ROS arguments to nodes via the command-line</li> <li>Using the ros2 param command-line tool</li> </ul>","tags":["ros2","parameters"]},{"location":"ROS/ros_world/perception/","title":"Perception","text":"<p>CV-Bridge</p> <p>TBD</p> <p>TBD</p>","tags":["ros","cvbridge","cv-bridge"]},{"location":"ROS/ros_world/perception/cv_bridge/","title":"Index","text":"","tags":["cv_bridge","ros","opencv"]},{"location":"ROS/ros_world/perception/cv_bridge/#cv-bridge","title":"cv bridge","text":"<p>Build</p> <p>TBD</p> <p>TBD</p> install<pre><code>sudo apt install ros-jazzy-cv-bridge ros-jazzy-image-transport python3-opencv\n</code></pre> simple demo<pre><code>import rclpy\nfrom rclpy.node import Node\n\nfrom sensor_msgs.msg import Image\nfrom cv_bridge import CvBridge\nimport cv2\n\nclass ImageViewerNode(Node):\n    def __init__(self):\n        super().__init__('image_viewer_node')\n\n        self.bridge = CvBridge()\n\n        self.subscription = self.create_subscription(\n            Image,\n            '/camera/image_raw',  # Change to your actual image topic\n            self.image_callback,\n            10\n        )\n\n    def image_callback(self, msg):\n        try:\n            # Convert to OpenCV image\n            cv_image = self.bridge.imgmsg_to_cv2(msg, desired_encoding='bgr8')\n\n            # Show image using OpenCV\n            cv2.imshow('Camera Image', cv_image)\n            cv2.waitKey(1)\n        except Exception as e:\n            self.get_logger().error(f'Failed to convert image: {e}')\n\ndef main(args=None):\n    rclpy.init(args=args)\n    node = ImageViewerNode()\n\n    try:\n        rclpy.spin(node)\n    except KeyboardInterrupt:\n        pass\n    finally:\n        node.destroy_node()\n        rclpy.shutdown()\n        cv2.destroyAllWindows()\n\nif __name__ == '__main__':\n    main()\n</code></pre>","tags":["cv_bridge","ros","opencv"]},{"location":"ROS/ros_world/perception/cv_bridge/cv_bridge_build/","title":"Build CV_Bridge for custom opencv build","text":"<p>Build opencv 4.10 with cuda support Use Docker to create build image</p> <ul> <li>clone github</li> </ul>","tags":["opencv","cv_bridge","ros","custom build"]},{"location":"ROS/ros_world/perception/cv_bridge/cv_bridge_build/#build-on-docker","title":"Build on docker","text":"<ul> <li>docker base cuda devel with cudnn <code>FROM nvidia/cuda:12.6.0-cudnn-devel-ubuntu22.04</code> </li> <li>Install dependencies</li> <li>Run colcon</li> </ul> <pre><code>sudo apt install\n    libboost-all-dev \\\n    libboost-python-dev \\\n    python3-dev\n</code></pre> colcon<pre><code>colcon build --packages-up-to cv_bridge \\\n--cmake-args \\\n  -DCUDA_TOOLKIT_ROOT_DIR=/usr/local/cuda \\\n  -DCMAKE_INCLUDE_PATH=/usr/include/opencv4/\n</code></pre>","tags":["opencv","cv_bridge","ros","custom build"]},{"location":"ROS/ros_world/perception/cv_bridge/cv_bridge_build/#pack-to-debian","title":"Pack to debian","text":"","tags":["opencv","cv_bridge","ros","custom build"]},{"location":"ROS/ros_world/perception/cv_bridge/cv_bridge_build/#patch-files","title":"patch files","text":"patch_package.xml<pre><code>#/bin/bash\n\n# comment libopencv-dev, python3-opencv\nsed -i 's|^\\([[:space:]]*\\)&lt;depend&gt;libopencv-dev&lt;/depend&gt;|\\1&lt;!-- &lt;depend&gt;libopencv-dev&lt;/depend&gt; --&gt;|' package.xml\nsed -i 's|^\\([[:space:]]*\\)&lt;depend&gt;python3-opencv&lt;/depend&gt;|\\1&lt;!-- &lt;depend&gt;python3-opencv&lt;/depend&gt; --&gt;|' package.xml\n</code></pre> patch_rules.sh<pre><code>#!/bin/bash\nset -e\n# remove current override_dh_shlibdeps\nsed -i '/^override_dh_shlibdeps:/,/^$/d' /workspace/cv_bridge/debian/rules\n\n\n\ncat &lt;&lt;'EOF' &gt;&gt; debian/rules\n\noverride_dh_shlibdeps:\n    dh_shlibdeps --dpkg-shlibdeps-params=--ignore-missing-info\n\n\noverride_dh_builddeb:\n    dh_builddeb --destdir=/workspace/debs\nEOF\n\necho \"[\u2705] Successfully patched debian/rules\"\n</code></pre> patch_compat<pre><code>cat &lt;&lt;'EOF' &gt; debian/compat\n10\nEOF\n</code></pre> add entry to changelog<pre><code>DEBEMAIL=\"you@example.com\" DEBFULLNAME=\"Your Name\" dch \\\n  --newversion 3.2.1-1jammy-cv410 \\\n  --distribution jammy \\\n  --urgency high \\\n  \"build against opencv4.10\"\n</code></pre> <p>dch command</p> <pre><code>sudo apt install devscripts\n</code></pre>","tags":["opencv","cv_bridge","ros","custom build"]},{"location":"ROS/ros_world/ros_control/","title":"ROS2_Control","text":"<p>ros2_control is a framework for robot hardware abstraction and controller management </p> <p>Hardware interface Abstracts real or simulated robot hardware and expose hardware functionality in a standard way:</p> <ul> <li>state interface (read-only) feedback from hardware</li> <li>command interface (Read/Write) : command to the hardware</li> </ul> <p>ros2 control tutorials</p> <p>TBD</p> <p>GPIO</p>","tags":["ros","control","ros2_control"]},{"location":"ROS/ros_world/ros_control/#install","title":"Install","text":"<pre><code>sudo apt install ros-humble-ros2-control\nsudo apt install ros-humble-ros2-controllers\nsudo apt install ros-humble-control-msgs\n# gazebo classic \nsudo apt install ros-humble-gazebo-ros2-control\n</code></pre> <p>ROS2_control abstract controller from hardware interfaces Hardware interface expose hardware functionality in a standard way: - state interface (read-only) feedback from hardware - command interface (Read/Write) : command to the hardware</p> <p>ros2_control Concepts &amp; Simulation</p>","tags":["ros","control","ros2_control"]},{"location":"ROS/ros_world/ros_control/#controller-manager","title":"Controller Manager","text":"","tags":["ros","control","ros2_control"]},{"location":"ROS/ros_world/ros_control/#resource-manager","title":"Resource Manager","text":"","tags":["ros","control","ros2_control"]},{"location":"ROS/ros_world/ros_control/#hardware-interface","title":"Hardware interface","text":"","tags":["ros","control","ros2_control"]},{"location":"ROS/ros_world/ros_control/#lifecycle-state","title":"Lifecycle State","text":"<p><pre><code>stateDiagram-v2\n    [*] --&gt; Unconfigured: on_init\n    Unconfigured --&gt; Inactive: on_configure\n    Inactive --&gt; Active: on_activate()\n    Active --&gt; Inactive: on_deactivate()\n    Inactive --&gt; Unconfigured: on_cleanup()\n    Unconfigured --&gt; [*]: on_shutdown()\n\n    Active --&gt; Active: read()      write()\n\n</code></pre> on_init: read parameters on_configure: establish comms on_activate: engage actuators on_deactivate: disengage actuators on_cleanup: disconnect comms on_shutdown: graceful shutdown</p>","tags":["ros","control","ros2_control"]},{"location":"ROS/ros_world/ros_control/#to-read-and-watch","title":"To Read and Watch","text":"<ul> <li>must watch</li> <li>The construct - ROS2 Control Framework </li> <li>You can use ANY hardware with ros2_control </li> <li>ros2_control Concepts &amp; Simulation</li> <li>ros2_control_custom_hardware_interface</li> <li>Using I2C to control PWM | ROS Control with the JetBot Part 1 <ul> <li>ROS2 Control with the JetBot Part 1: Using I2C to control PWM</li> </ul> </li> </ul>","tags":["ros","control","ros2_control"]},{"location":"ROS/ros_world/ros_control/gpio/","title":"GPIO Controllers","text":"<p>This is a collection of controllers for hardware interfaces of type GPIO more</p>","tags":["ros","gpio"]},{"location":"ROS/ros_world/ros_control/tutorials/","title":"ros2 control tutorials","text":"<p>Using Gazebo to simulate type of control on one joint simple robot. Show yaml control configuration and ros2_control tag for each type.</p> <p>The ros2_control declare what the robot can do, and expose it as command and state The Controller YAML declare which controller to load and use by the controller_manager The controller expose ROS messages to command and get states</p> <p>position controller</p> <p>velocity controller</p> <p>Effort Control</p> <p>imu broadcaster</p> <ul> <li>ros2_control guide</li> <li>ROS2 Jazzy Tutorial: ros2_control in Gazebo - Control Simulation from Scratch in Gazebo!</li> </ul>","tags":["ros","ros2_control","tutorial"]},{"location":"ROS/ros_world/ros_control/tutorials/effort_control/","title":"ROS2 Control: effort control","text":"<p>In ROS 2 Control, the effort_controllers/JointGroupEffortController is used to send effort (torque/force) commands to joints</p>","tags":["ros","control","ros2_control","effort"]},{"location":"ROS/ros_world/ros_control/tutorials/effort_control/#gazebo-simulation","title":"Gazebo simulation","text":"xacro load gazebo control plugin and set ros2_control tag<pre><code>&lt;robot xmlns:xacro=\"http://www.ros.org/wiki/xacro\" &gt;\n    &lt;gazebo&gt;\n        &lt;plugin filename=\"gz_ros2_control-system\" name=\"gz_ros2_control::GazeboSimROS2ControlPlugin\"&gt;\n            &lt;parameters&gt;\n                $(find tutorial_bringup)/config/effort_controllers.yaml\n            &lt;/parameters&gt;\n        &lt;/plugin&gt;\n\n    &lt;/gazebo&gt;\n\n    &lt;ros2_control name=\"robot\" type=\"system\"&gt;\n        &lt;hardware&gt;\n            &lt;plugin&gt;gz_ros2_control/GazeboSimSystem&lt;/plugin&gt;\n        &lt;/hardware&gt;\n\n        &lt;joint name=\"first_joint\"&gt;\n            &lt;command_interface name=\"effort\"&gt;\n                &lt;param name=\"min\"&gt;-10&lt;/param&gt;\n                &lt;param name=\"max\"&gt;10&lt;/param&gt;\n            &lt;/command_interface&gt;\n\n            &lt;state_interface name=\"position\" /&gt;\n            &lt;state_interface name=\"velocity\" /&gt;\n        &lt;/joint&gt;\n\n    &lt;/ros2_control&gt;\n&lt;/robot&gt;\n</code></pre> controllers yaml file <pre><code>controller_manager:\n  ros__parameters:\n    update_rate: 10\n\n\n    joint_state_broadcaster:\n      type: joint_state_broadcaster/JointStateBroadcaster\n\n    effort_controller:\n      type: effort_controllers/JointGroupEffortController\n\n\neffort_controller:\n  ros__parameters:\n    joints:\n      - first_joint\n</code></pre> launch file <pre><code>import os\n\nfrom ament_index_python.packages import get_package_share_directory\nfrom launch import LaunchDescription\nfrom launch.actions import IncludeLaunchDescription\nfrom launch.substitutions import PathJoinSubstitution\nfrom launch.launch_description_sources import PythonLaunchDescriptionSource\nfrom launch_ros.actions import Node\nimport xacro\n\nPKG_BRINGUP = \"tutorial_bringup\"\nPKG_DESCRIPTION = \"tutorial_description\"\nROBOT = \"robot.xacro\"\nCONFIG = \"config\"\nURDF = \"urdf\"\nBRIDGE_CONFIG = \"gz_bridge.yaml\"\n\ndef generate_launch_description():\n    ld = LaunchDescription()\n\n    pkg_path = os.path.join(get_package_share_directory(PKG_DESCRIPTION))\n    xacro_file = os.path.join(pkg_path, URDF, ROBOT)\n    robot_description = xacro.process_file(xacro_file).toxml()\n\n    node_robot_state_publisher = Node(\n        package=\"robot_state_publisher\",\n        executable=\"robot_state_publisher\",\n        output=\"screen\",\n        parameters=[{\"robot_description\": robot_description, \"use_sim_time\": True}],\n    )\n\n    gazebo = IncludeLaunchDescription(\n        PythonLaunchDescriptionSource(\n            [\n                PathJoinSubstitution(\n                    [\n                        get_package_share_directory(\"ros_gz_sim\"),\n                        \"launch\",\n                        \"gz_sim.launch.py\",\n                    ]\n                )\n            ]\n        ),\n        launch_arguments=[(\"gz_args\", \" -r -v 3 my_world.sdf\")],\n    )\n\n    gz_spawn_entity = Node(\n        package=\"ros_gz_sim\",\n        executable=\"create\",\n        output=\"screen\",\n        arguments=[\"-name\", \"robot\", \"-topic\", \"/robot_description\"],\n    )\n\n\n    joint_state_broadcaster_spawner = Node(\n        package=\"controller_manager\",\n        executable=\"spawner\",\n        arguments=[\"joint_state_broadcaster\"],\n        output=\"screen\",\n    )\n\n    control_spawner = Node(\n        package=\"controller_manager\",\n        executable=\"spawner\",\n        arguments=[\"effort_controller\"],\n        output=\"screen\",\n    )\n\n    gazebo_bridge = Node(\n        package=\"ros_gz_bridge\",\n        executable=\"parameter_bridge\",\n        name=\"parameter_bridge\",\n        output=\"screen\",\n        arguments=[\"/clock@rosgraph_msgs/msg/Clock[gz.msgs.Clock\"],\n    )\n\n\n    ld.add_action(node_robot_state_publisher)\n    ld.add_action(gazebo)\n    ld.add_action(gz_spawn_entity)\n    ld.add_action(gazebo_bridge)\n    ld.add_action(control_spawner)\n    ld.add_action(joint_state_broadcaster_spawner)\n\n    return ld\n</code></pre>","tags":["ros","control","ros2_control","effort"]},{"location":"ROS/ros_world/ros_control/tutorials/effort_control/#usage","title":"Usage","text":"<pre><code>ros2 topic pub -1 /effort_controller/commands std_msgs/msg/Float64MultiArray \"{ data: [-2.0] }\"\n</code></pre>","tags":["ros","control","ros2_control","effort"]},{"location":"ROS/ros_world/ros_control/tutorials/imu_broadcaster/","title":"ROS2 Control imu broadcaster","text":"","tags":["ros","ros2_control","imu","imu_broadcaster"]},{"location":"ROS/ros_world/ros_control/tutorials/imu_broadcaster/#gazebo-simulation","title":"Gazebo simulation","text":"urdf/gazebo.xacro<pre><code>&lt;robot xmlns:xacro=\"http://www.ros.org/wiki/xacro\"&gt;\n    &lt;gazebo&gt;\n        &lt;plugin filename=\"gz_ros2_control-system\" name=\"gz_ros2_control::GazeboSimROS2ControlPlugin\"&gt;\n            &lt;parameters&gt;\n                $(find tutorial_bringup)/config/robot_controller.yaml\n            &lt;/parameters&gt;\n        &lt;/plugin&gt;\n\n    &lt;/gazebo&gt;\n\n    &lt;gazebo reference=\"second_link\"&gt;\n        &lt;sensor name=\"link2_imu\" type=\"imu\"&gt;\n            &lt;always_on&gt;1&lt;/always_on&gt;\n            &lt;update_rate&gt;50&lt;/update_rate&gt;\n            &lt;visualize&gt;true&lt;/visualize&gt;\n            &lt;topic&gt;imu-control&lt;/topic&gt;\n            &lt;enable_metrics&gt;true&lt;/enable_metrics&gt;\n        &lt;/sensor&gt;\n    &lt;/gazebo&gt;\n&lt;/robot&gt;\n</code></pre> config/controllers.yaml<pre><code>controller_manager:\n  ros__parameters:\n    update_rate: 10\n\n    imu_broadcaster:\n      type: imu_sensor_broadcaster/IMUSensorBroadcaster\n\nimu_broadcaster:\n  ros__parameters:\n\n    sensor_name: link2_imu\n    frame_id: second_link\n</code></pre> load controller<pre><code>ros2 control load_controller --set-state active imu_broadcaster\n</code></pre> launch<pre><code>imu_broadcaster_spawner = Node(\n        package=\"controller_manager\",\n        executable=\"spawner\",\n        arguments=[\"imu_broadcaster\"],\n        output=\"screen\",\n    )\n</code></pre>","tags":["ros","ros2_control","imu","imu_broadcaster"]},{"location":"ROS/ros_world/ros_control/tutorials/imu_broadcaster/#reference","title":"Reference","text":"<ul> <li>mpu6050-ros2-control</li> </ul>","tags":["ros","ros2_control","imu","imu_broadcaster"]},{"location":"ROS/ros_world/ros_control/tutorials/position_control/","title":"ROS2 Control: Position control","text":"<p>ROS2 control docs</p>","tags":["ros","control","ros2_control","position"]},{"location":"ROS/ros_world/ros_control/tutorials/position_control/#gazebo-simulation","title":"Gazebo simulation","text":"<p>controller manager</p> <p>The controller manager loaded by gazebo</p> urdf/xacro<pre><code>&lt;robot xmlns:xacro=\"http://www.ros.org/wiki/xacro\"&gt;\n    &lt;gazebo&gt;\n        &lt;plugin filename=\"gz_ros2_control-system\" name=\"gz_ros2_control::GazeboSimROS2ControlPlugin\"&gt;\n            &lt;parameters&gt;\n                $(find tutorial_bringup)/config/robot_controller.yaml\n            &lt;/parameters&gt;\n        &lt;/plugin&gt;\n    &lt;/gazebo&gt;\n&lt;/robot&gt;\n</code></pre> <p>Once gazebo launch it's load the control plugin and parse the <code>&lt;ros2_control&gt;</code> block.</p> <ul> <li>Init the hardware interface</li> <li>Launch the controller manager</li> </ul> xacro load gazebo control plugin and set ros2_control tag<pre><code>&lt;robot xmlns:xacro=\"http://www.ros.org/wiki/xacro\" &gt;\n    &lt;gazebo&gt;\n        &lt;plugin filename=\"gz_ros2_control-system\" name=\"gz_ros2_control::GazeboSimROS2ControlPlugin\"&gt;\n            &lt;parameters&gt;\n                $(find tutorial_bringup)/config/position_controllers.yaml\n            &lt;/parameters&gt;\n        &lt;/plugin&gt;\n\n    &lt;/gazebo&gt;\n\n    &lt;ros2_control name=\"robot\" type=\"system\"&gt;\n        &lt;hardware&gt;\n            &lt;plugin&gt;gz_ros2_control/GazeboSimSystem&lt;/plugin&gt;\n        &lt;/hardware&gt;\n\n        &lt;joint name=\"first_joint\"&gt;\n            &lt;command_interface name=\"position\"&gt;\n                &lt;param name=\"min\"&gt;-1.571&lt;/param&gt;\n                &lt;param name=\"max\"&gt;1.571&lt;/param&gt;\n            &lt;/command_interface&gt;\n\n            &lt;state_interface name=\"position\" /&gt;\n        &lt;/joint&gt;\n\n    &lt;/ros2_control&gt;\n&lt;/robot&gt;\n</code></pre> controllers yaml file <pre><code>controller_manager:\n  ros__parameters:\n    update_rate: 10\n\n\n    joint_state_broadcaster:\n      type: joint_state_broadcaster/JointStateBroadcaster\n\n    position_controller:\n      type: position_controllers/JointGroupPositionController\n\n\nposition_controller:\n  ros__parameters:\n    joints:\n      - first_joint\n</code></pre> launch file <pre><code>import os\n\nfrom ament_index_python.packages import get_package_share_directory\nfrom launch import LaunchDescription\nfrom launch.actions import DeclareLaunchArgument, IncludeLaunchDescription\nfrom launch.substitutions import PathJoinSubstitution\nfrom launch.launch_description_sources import PythonLaunchDescriptionSource\nfrom launch_ros.actions import Node\nfrom launch.substitutions import LaunchConfiguration, Command\nfrom launch_ros.parameter_descriptions import ParameterValue\nimport xacro\nfrom pathlib import Path\n\nPKG_BRINGUP = \"tutorial_bringup\"\nPKG_DESCRIPTION = \"tutorial_description\"\nROBOT = \"robot.xacro\"\nCONFIG = \"config\"\nURDF = \"urdf\"\nBRIDGE_CONFIG = \"gz_bridge.yaml\"\n\ndef generate_launch_description():\n    ld = LaunchDescription()\n\n    pkg_path = os.path.join(get_package_share_directory(PKG_DESCRIPTION))\n    xacro_file = os.path.join(pkg_path, URDF, ROBOT)\n    robot_description = xacro.process_file(xacro_file).toxml()\n\n    node_robot_state_publisher = Node(\n        package=\"robot_state_publisher\",\n        executable=\"robot_state_publisher\",\n        output=\"screen\",\n        parameters=[{\"robot_description\": robot_description, \"use_sim_time\": True}],\n    )\n\n    gazebo = IncludeLaunchDescription(\n        PythonLaunchDescriptionSource(\n            [\n                PathJoinSubstitution(\n                    [\n                        get_package_share_directory(\"ros_gz_sim\"),\n                        \"launch\",\n                        \"gz_sim.launch.py\",\n                    ]\n                )\n            ]\n        ),\n        launch_arguments=[(\"gz_args\", \" -r -v 3 my_world.sdf\")],\n    )\n\n    gz_spawn_entity = Node(\n        package=\"ros_gz_sim\",\n        executable=\"create\",\n        output=\"screen\",\n        arguments=[\"-name\", \"robot\", \"-topic\", \"/robot_description\"],\n    )\n\n\n    joint_state_broadcaster_spawner = Node(\n        package=\"controller_manager\",\n        executable=\"spawner\",\n        arguments=[\"joint_state_broadcaster\"],\n        output=\"screen\",\n    )\n\n    control_spawner = Node(\n        package=\"controller_manager\",\n        executable=\"spawner\",\n        arguments=[\"position_controller\"],\n        output=\"screen\",\n    )\n\n    gazebo_bridge = Node(\n        package=\"ros_gz_bridge\",\n        executable=\"parameter_bridge\",\n        name=\"parameter_bridge\",\n        output=\"screen\",\n        arguments=[\"/clock@rosgraph_msgs/msg/Clock[gz.msgs.Clock\"],\n    )\n\n\n    ld.add_action(node_robot_state_publisher)\n    ld.add_action(gazebo)\n    ld.add_action(gz_spawn_entity)\n    ld.add_action(gazebo_bridge)\n    ld.add_action(control_spawner)\n    ld.add_action(joint_state_broadcaster_spawner)\n\n    return ld\n</code></pre>","tags":["ros","control","ros2_control","position"]},{"location":"ROS/ros_world/ros_control/tutorials/position_control/#usage","title":"usage","text":"send command<pre><code>ros2 topic pub -1 /position_controller/commands std_msgs/msg/Float64MultiArray \"{ data: [1.0] }\"\n</code></pre>","tags":["ros","control","ros2_control","position"]},{"location":"ROS/ros_world/ros_control/tutorials/position_control/#state","title":"State","text":"<p>State define in ros2_control</p> <pre><code>&lt;state_interface name=\"position\" /&gt;\n</code></pre> echo state<pre><code>ros2 topic echo /dynamic_joint_states\n#\n---\nheader:\n  stamp:\n    sec: 167\n    nanosec: 299000000\n  frame_id: ''\njoint_names:\n- first_joint\ninterface_values:\n- interface_names:\n  - position\n  values:\n  - 1.000000000000095\n---\n</code></pre> <p>Extent the state interface</p> <p>Add state to <code>ros2_control</code> section <pre><code>&lt;state_interface name=\"position\" /&gt;\n&lt;state_interface name=\"velocity\" /&gt;\n</code></pre></p> <pre><code>header:\nstamp:\n    sec: 85\n    nanosec: 799000000\nframe_id: ''\njoint_names:\n- first_joint\ninterface_values:\n- interface_names:\n- position\n- velocity\nvalues:\n- 1.00\n- 0\n</code></pre>","tags":["ros","control","ros2_control","position"]},{"location":"ROS/ros_world/ros_control/tutorials/velocity_control/","title":"ROS2 Control: velocity control","text":"","tags":["ros","control","ros2_control","velocity"]},{"location":"ROS/ros_world/ros_control/tutorials/velocity_control/#gazebo-simulation","title":"Gazebo simulation","text":"xacro loaf gazebo control plugin and set ros2_control tag<pre><code>&lt;robot xmlns:xacro=\"http://www.ros.org/wiki/xacro\" &gt;\n    &lt;gazebo&gt;\n        &lt;plugin filename=\"gz_ros2_control-system\" name=\"gz_ros2_control::GazeboSimROS2ControlPlugin\"&gt;\n            &lt;parameters&gt;\n                $(find tutorial_bringup)/config/velocity_controllers.yaml\n            &lt;/parameters&gt;\n        &lt;/plugin&gt;\n\n    &lt;/gazebo&gt;\n\n    &lt;ros2_control name=\"robot\" type=\"system\"&gt;\n        &lt;hardware&gt;\n            &lt;plugin&gt;gz_ros2_control/GazeboSimSystem&lt;/plugin&gt;\n        &lt;/hardware&gt;\n\n        &lt;joint name=\"first_joint\"&gt;\n            &lt;command_interface name=\"velocity\"&gt;\n                &lt;param name=\"min\"&gt;-0.5&lt;/param&gt;\n                &lt;param name=\"max\"&gt;0.5&lt;/param&gt;\n            &lt;/command_interface&gt;\n\n            &lt;state_interface name=\"position\" /&gt;\n            &lt;state_interface name=\"velocity\" /&gt;\n        &lt;/joint&gt;\n\n    &lt;/ros2_control&gt;\n&lt;/robot&gt;\n</code></pre> controllers yaml file <pre><code>controller_manager:\n  ros__parameters:\n    update_rate: 10\n\n\n    joint_state_broadcaster:\n      type: joint_state_broadcaster/JointStateBroadcaster\n\n    velocity_controller:\n      type: velocity_controllers/JointGroupVelocityController\n\n\nvelocity_controller:\n  ros__parameters:\n    joints:\n      - first_joint\n</code></pre> launch file <pre><code>import os\n\nfrom ament_index_python.packages import get_package_share_directory\nfrom launch import LaunchDescription\nfrom launch.actions import IncludeLaunchDescription\nfrom launch.substitutions import PathJoinSubstitution\nfrom launch.launch_description_sources import PythonLaunchDescriptionSource\nfrom launch_ros.actions import Node\nimport xacro\n\nPKG_BRINGUP = \"tutorial_bringup\"\nPKG_DESCRIPTION = \"tutorial_description\"\nROBOT = \"robot.xacro\"\nCONFIG = \"config\"\nURDF = \"urdf\"\nBRIDGE_CONFIG = \"gz_bridge.yaml\"\n\ndef generate_launch_description():\n    ld = LaunchDescription()\n\n    pkg_path = os.path.join(get_package_share_directory(PKG_DESCRIPTION))\n    xacro_file = os.path.join(pkg_path, URDF, ROBOT)\n    robot_description = xacro.process_file(xacro_file).toxml()\n\n    node_robot_state_publisher = Node(\n        package=\"robot_state_publisher\",\n        executable=\"robot_state_publisher\",\n        output=\"screen\",\n        parameters=[{\"robot_description\": robot_description, \"use_sim_time\": True}],\n    )\n\n    gazebo = IncludeLaunchDescription(\n        PythonLaunchDescriptionSource(\n            [\n                PathJoinSubstitution(\n                    [\n                        get_package_share_directory(\"ros_gz_sim\"),\n                        \"launch\",\n                        \"gz_sim.launch.py\",\n                    ]\n                )\n            ]\n        ),\n        launch_arguments=[(\"gz_args\", \" -r -v 3 my_world.sdf\")],\n    )\n\n    gz_spawn_entity = Node(\n        package=\"ros_gz_sim\",\n        executable=\"create\",\n        output=\"screen\",\n        arguments=[\"-name\", \"robot\", \"-topic\", \"/robot_description\"],\n    )\n\n\n    joint_state_broadcaster_spawner = Node(\n        package=\"controller_manager\",\n        executable=\"spawner\",\n        arguments=[\"joint_state_broadcaster\"],\n        output=\"screen\",\n    )\n\n    control_spawner = Node(\n        package=\"controller_manager\",\n        executable=\"spawner\",\n        arguments=[\"velocity_controller\"],\n        output=\"screen\",\n    )\n\n    gazebo_bridge = Node(\n        package=\"ros_gz_bridge\",\n        executable=\"parameter_bridge\",\n        name=\"parameter_bridge\",\n        output=\"screen\",\n        arguments=[\"/clock@rosgraph_msgs/msg/Clock[gz.msgs.Clock\"],\n    )\n\n\n    ld.add_action(node_robot_state_publisher)\n    ld.add_action(gazebo)\n    ld.add_action(gz_spawn_entity)\n    ld.add_action(gazebo_bridge)\n    ld.add_action(control_spawner)\n    ld.add_action(joint_state_broadcaster_spawner)\n\n    return ld\n</code></pre>","tags":["ros","control","ros2_control","velocity"]},{"location":"ROS/ros_world/ros_control/tutorials/velocity_control/#usage","title":"usage","text":"send command<pre><code>ros2 topic pub -1 /velocity_controller/commands std_msgs/msg/Float64MultiArray \"{ data: [1.0] }\"\n</code></pre> <pre><code>ros2 topic echo /dynamic_joint_states\n#\nheader:\nstamp:\n    sec: 85\n    nanosec: 799000000\nframe_id: ''\njoint_names:\n- first_joint\ninterface_values:\n- interface_names:\n- position\n- velocity\nvalues:\n- 1.00\n- 0\n</code></pre>","tags":["ros","control","ros2_control","velocity"]},{"location":"ROS/ros_world/ros_tf/","title":"TF2","text":"<p>tf2  provides a coordinate transformation framework, allowing nodes to track and transform data between different coordinate frames over time</p> <p>Euler RPY</p> <p>Quaternion</p> <p>Linear algebra</p>","tags":["ros","tf","quaternion","tf2"]},{"location":"ROS/ros_world/ros_tf/#rotation-and-translation-matrix","title":"Rotation and Translation Matrix","text":"<ul> <li>Translation: Shifts a point in space (represented as a vector [x, y, z]).</li> <li>Rotation: Rotates a point around an axis (using quaternions or rotation matrices).</li> </ul> <p>A transformation matrix combines rotation and translation</p> \\[ T=\\begin{bmatrix} R &amp; t \\\\ 0 &amp; 1 \\end{bmatrix} \\] \\[ T = \\begin{bmatrix} r_{11} &amp; r_{12} &amp; r_{13} &amp; x \\\\ r_{21} &amp; r_{22} &amp; r_{23} &amp; y \\\\ r_{31} &amp; r_{32} &amp; r_{33} &amp; z \\\\ 0 &amp; 0 &amp; 0 &amp; 1 \\end{bmatrix} \\]","tags":["ros","tf","quaternion","tf2"]},{"location":"ROS/ros_world/ros_tf/#install-ros-tf-support-packages","title":"Install ROS tf support packages","text":"install<pre><code>sudo apt-get install \\\nros-humble-tf2-tools \\\nros-humble-tf-transformations \\\nros-humble-rqt-tf-tree\n</code></pre>","tags":["ros","tf","quaternion","tf2"]},{"location":"ROS/ros_world/ros_tf/#static-and-dynamic-tf","title":"Static and Dynamic TF","text":"","tags":["ros","tf","quaternion","tf2"]},{"location":"ROS/ros_world/ros_tf/#static-tf","title":"Static TF","text":"<p>Use to publish fix coordinate relation (coordinate that not change in time) it publish to <code>tf_static</code> topic </p>","tags":["ros","tf","quaternion","tf2"]},{"location":"ROS/ros_world/ros_tf/#demo","title":"Demo","text":"<p>Publish the relation between world to robot_1</p> publish static tf<pre><code># new style quaternion\nros2 run tf2_ros static_transform_publisher --x 2 --y 1 --z 0 --qx 0 --qy 0 --qz 0 --qw 1 --frame-id world --child-frame-id robot_1\n\n# new style euler\nros2 run tf2_ros static_transform_publisher --x 2 --y 1 --z 0 --roll 0 --pitch 0 --yaw 0 --frame-id world --child-frame-id robot_1\n\n#\ntranslation: ('2.000000', '1.000000', '0.000000')\nrotation: ('0.000000', '0.000000', '0.000000', '1.000000')\nfrom 'world' to 'robot_1'\n</code></pre> echo topic<pre><code>ros2 topic echo /tf_static\ntransforms:\n- header:\n    stamp:\n      sec: 1742018434\n      nanosec: 760327680\n    frame_id: world\n  child_frame_id: robot_1\n  transform:\n    translation:\n      x: 2.0\n      y: 1.0\n      z: 0.0\n    rotation:\n      x: 0.0\n      y: 0.0\n      z: 0.0\n      w: 1.0\n---\n</code></pre> <p></p> <p></p> <p>coordinate</p> <ul> <li>X: red</li> <li>Y: green</li> <li>Z: blue</li> </ul>","tags":["ros","tf","quaternion","tf2"]},{"location":"ROS/ros_world/ros_tf/#resolve-code","title":"Resolve code","text":"<p>ROS node that resolve the translation and Rotation between two coordinate, in the example is to resolve between robot_1 to world, </p> tf resolve code <pre><code>#!/bin/usr/env python\n\nimport rclpy\nfrom rclpy.node import Node\nimport tf2_ros\nfrom geometry_msgs.msg import TransformStamped\n\nclass TFResolver(Node):\n    def __init__(self):\n        super().__init__('tf_resolver')\n\n        # Create TF buffer and listener\n        self.tf_buffer = tf2_ros.Buffer()\n        self.tf_listener = tf2_ros.TransformListener(self.tf_buffer, self)\n\n        # Timer to check TF every 1 second\n        self.timer = self.create_timer(1.0, self.lookup_transform)\n\n    def lookup_transform(self):\n        from_frame = 'robot_1'\n        to_frame = 'world'\n\n        try:\n            # Lookup transform from 'world' to 'robot_1'\n            transform: TransformStamped = self.tf_buffer.lookup_transform(from_frame, to_frame, rclpy.time.Time())\n\n            # Extract translation\n            translation = transform.transform.translation\n            self.get_logger().info(f\"Translation: x={translation.x}, y={translation.y}, z={translation.z}\")\n\n            # Extract rotation (quaternion)\n            rotation = transform.transform.rotation\n            self.get_logger().info(f\"Rotation (quaternion): x={rotation.x}, y={rotation.y}, z={rotation.z}, w={rotation.w}\")\n\n        except tf2_ros.LookupException:\n            self.get_logger().warn(f\"Transform from {from_frame} to {to_frame} not found!\")\n        except tf2_ros.ConnectivityException:\n            self.get_logger().warn(\"Connectivity issue!\")\n        except tf2_ros.ExtrapolationException:\n            self.get_logger().warn(\"Extrapolation error!\")\n\ndef main():\n    rclpy.init()\n    node = TFResolver()\n    rclpy.spin(node)\n    rclpy.shutdown()\n\nif __name__ == '__main__':\n    main()\n</code></pre> <pre><code>python /home/user/projects/blog/docs/ROS/ros_world/ros_tf/code/demo1_reslove.py\n[INFO] [1742019661.607132099] [tf_resolver]: Translation: x=-2.0, y=-1.0, z=0.0\n[INFO] [1742019661.607396088] [tf_resolver]: Rotation (quaternion): x=0.0, y=0.0, z=0.0, w=1.0\n</code></pre> <p>The <code>robot_1</code> need to move back 2m in X and 1m back in Y to return to the word coordinate frame</p>","tags":["ros","tf","quaternion","tf2"]},{"location":"ROS/ros_world/ros_tf/#demo2-send-static-transformation-from-code","title":"Demo2: Send static transformation from code","text":"<p>Send <code>static tf</code> from code</p> static tf StaticTransformBroadcaster<pre><code>#!/bin/usr/env python\n\nimport rclpy\nfrom rclpy.node import Node\nfrom tf2_ros import StaticTransformBroadcaster\nfrom geometry_msgs.msg import TransformStamped\n\nclass StaticTFPublisher(Node):\n    def __init__(self):\n        super().__init__('static_tf_publisher')\n        self.tf_broadcaster = StaticTransformBroadcaster(self)\n        self.publish_static_transform()\n\n    def publish_static_transform(self):\n        t = TransformStamped()\n        t.header.stamp = self.get_clock().now().to_msg()\n        t.header.frame_id = 'robot_1'\n        t.child_frame_id = 'world'\n        t.transform.translation.x = 2.0\n        t.transform.translation.y = 1.0\n        t.transform.translation.z = 0.0\n\n        # Set Rotation (Quaternion)\n        t.transform.rotation.x = 0.0\n        t.transform.rotation.y = 0.0\n        t.transform.rotation.z = 0.7071  # 90\u00b0 rotation around Z\n        t.transform.rotation.w = 0.7071\n\n        self.tf_broadcaster.sendTransform(t)\n        self.get_logger().info(\"Published static transform\")\n\nrclpy.init()\nnode = StaticTFPublisher()\nrclpy.spin(node)\nrclpy.shutdown()\n</code></pre> <p></p>","tags":["ros","tf","quaternion","tf2"]},{"location":"ROS/ros_world/ros_tf/#dynamic-tf","title":"Dynamic TF","text":"","tags":["ros","tf","quaternion","tf2"]},{"location":"ROS/ros_world/ros_tf/#demo-dynamic-tf","title":"Demo: Dynamic TF","text":"<p>Publish <code>tf</code> in 10 HZ, (change robot orientation)</p> dynamic tf broadcaster <pre><code>#!/bin/usr/env python\n\nimport rclpy\nfrom rclpy.node import Node\nfrom tf2_ros import TransformBroadcaster\nfrom geometry_msgs.msg import TransformStamped\nimport math\n\nHZ = 0.1\n\nclass MovingTFPublisher(Node):\n    def __init__(self):\n        super().__init__('moving_tf_publisher')\n        self.tf_broadcaster = TransformBroadcaster(self)\n        self.timer = self.create_timer(HZ, self.publish_transform)\n        self.t = 0  # Time step\n\n    def publish_transform(self):\n        t = TransformStamped()\n        t.header.stamp = self.get_clock().now().to_msg()\n        t.header.frame_id = 'robot_1'\n        t.child_frame_id = 'world'\n\n        # Simulate movement: circular motion\n        t.transform.translation.x = 2.0 * math.cos(self.t)\n        t.transform.translation.y = 2.0 * math.sin(self.t)\n        t.transform.translation.z = 0.0\n\n        # Quaternion Rotation (yaw only)\n        qz = math.sin(self.t / 2)\n        qw = math.cos(self.t / 2)\n        t.transform.rotation.z = qz\n        t.transform.rotation.w = qw\n\n        self.tf_broadcaster.sendTransform(t)\n        self.t += 0.1  # Increment time step\n        self.get_logger().info(\"Publish tf\")\n\nrclpy.init()\nnode = MovingTFPublisher()\nrclpy.spin(node)\nrclpy.shutdown()\n</code></pre> <p></p> tf resolver <pre><code>#!/bin/usr/env python\n\nimport rclpy\nfrom rclpy.node import Node\nfrom tf2_ros import TransformBroadcaster\nfrom geometry_msgs.msg import TransformStamped\nimport math\n\nHZ = 0.1\n\nclass MovingTFPublisher(Node):\n    def __init__(self):\n        super().__init__('moving_tf_publisher')\n        self.tf_broadcaster = TransformBroadcaster(self)\n        self.timer = self.create_timer(HZ, self.publish_transform)\n        self.t = 0  # Time step\n\n    def publish_transform(self):\n        t = TransformStamped()\n        t.header.stamp = self.get_clock().now().to_msg()\n        t.header.frame_id = 'robot_1'\n        t.child_frame_id = 'world'\n\n        # Simulate movement: circular motion\n        t.transform.translation.x = 2.0 * math.cos(self.t)\n        t.transform.translation.y = 2.0 * math.sin(self.t)\n        t.transform.translation.z = 0.0\n\n        # Quaternion Rotation (yaw only)\n        qz = math.sin(self.t / 2)\n        qw = math.cos(self.t / 2)\n        t.transform.rotation.z = qz\n        t.transform.rotation.w = qw\n\n        self.tf_broadcaster.sendTransform(t)\n        self.t += 0.1  # Increment time step\n        self.get_logger().info(\"Publish tf\")\n\nrclpy.init()\nnode = MovingTFPublisher()\nrclpy.spin(node)\nrclpy.shutdown()\n</code></pre>","tags":["ros","tf","quaternion","tf2"]},{"location":"ROS/ros_world/ros_tf/#tf-performance","title":"TF Performance","text":"<ul> <li>Qos</li> <li>Buffer duration (size)</li> </ul>","tags":["ros","tf","quaternion","tf2"]},{"location":"ROS/ros_world/ros_tf/#qos","title":"QOS","text":"<p>Change listener QOS</p>","tags":["ros","tf","quaternion","tf2"]},{"location":"ROS/ros_world/ros_tf/#listener-qos","title":"Listener QoS","text":"default tf QOS<pre><code>ros2 topic info --verbose /tf\nType: tf2_msgs/msg/TFMessage\n\nPublisher count: 1\n\nNode name: moving_tf_publisher\nNode namespace: /\nTopic type: tf2_msgs/msg/TFMessage\nEndpoint type: PUBLISHER\nGID: 01.10.75.c8.eb.03.e1.a2.15.e9.45.5c.00.00.14.03.00.00.00.00.00.00.00.00\nQoS profile:\n  Reliability: RELIABLE\n  History (Depth): KEEP_LAST (100)\n  Durability: VOLATILE\n  Lifespan: Infinite\n  Deadline: Infinite\n  Liveliness: AUTOMATIC\n  Liveliness lease duration: Infinite\n\nSubscription count: 1\n\nNode name: tf_resolver\nNode namespace: /\nTopic type: tf2_msgs/msg/TFMessage\nEndpoint type: SUBSCRIPTION\nGID: 01.10.e4.9b.73.91.d0.2b.17.52.17.b6.00.00.14.04.00.00.00.00.00.00.00.00\nQoS profile:\n  Reliability: RELIABLE\n  History (Depth): KEEP_LAST (100)\n  Durability: VOLATILE\n  Lifespan: Infinite\n  Deadline: Infinite\n  Liveliness: AUTOMATIC\n  Liveliness lease duration: Infinite\n</code></pre> tf listener with best effort qos <pre><code>#!/bin/usr/env python\n\nimport rclpy\nfrom rclpy.node import Node\nimport tf2_ros\nfrom geometry_msgs.msg import TransformStamped\nfrom rclpy.qos import QoSProfile, QoSReliabilityPolicy, QoSHistoryPolicy, QoSDurabilityPolicy\n\nRESOLVE_HZ = 0.5\n\nclass TFResolver(Node):\n    def __init__(self):\n        super().__init__('tf_resolver')\n\n        qos = QoSProfile(\n            reliability=QoSReliabilityPolicy.BEST_EFFORT,  # RELIABLE is default\n            history=QoSHistoryPolicy.KEEP_LAST,\n            depth=10,                                     # Adjust buffer size\n            durability=QoSDurabilityPolicy.VOLATILE       # TRANSIENT_LOCAL is default for TF\n        )          \n\n        # Create TF buffer and listener\n        self.tf_buffer = tf2_ros.Buffer(cache_time=rclpy.duration.Duration(seconds=0.1))\n        self.tf_listener = tf2_ros.TransformListener(self.tf_buffer, self, qos=qos)\n\n        # Timer to check TF every 1 second\n        self.timer = self.create_timer(RESOLVE_HZ, self.lookup_transform)\n\n    def lookup_transform(self):\n        from_frame = 'robot_1'\n        to_frame = 'world'\n\n        try:\n            # Lookup transform from 'world' to 'robot_1'\n            transform: TransformStamped = self.tf_buffer.lookup_transform(from_frame, to_frame, rclpy.time.Time())\n\n            # Extract translation\n            translation = transform.transform.translation\n            self.get_logger().info(f\"Translation: x={translation.x}, y={translation.y}, z={translation.z}\")\n\n            # Extract rotation (quaternion)\n            rotation = transform.transform.rotation\n            self.get_logger().info(f\"Rotation (quaternion): x={rotation.x}, y={rotation.y}, z={rotation.z}, w={rotation.w}\")\n\n        except tf2_ros.LookupException:\n            self.get_logger().warn(f\"Transform from {from_frame} to {to_frame} not found!\")\n        except tf2_ros.ConnectivityException:\n            self.get_logger().warn(\"Connectivity issue!\")\n        except tf2_ros.ExtrapolationException:\n            self.get_logger().warn(\"Extrapolation error!\")\n\ndef main():\n    rclpy.init()\n    node = TFResolver()\n    rclpy.spin(node)\n    rclpy.shutdown()\n\nif __name__ == '__main__':\n    main()\n</code></pre>","tags":["ros","tf","quaternion","tf2"]},{"location":"ROS/ros_world/ros_tf/#reference","title":"Reference","text":"<ul> <li>Articulated Robotics - The Transform System (tf2)</li> <li>Coordinate Transforms For Robotics</li> </ul>","tags":["ros","tf","quaternion","tf2"]},{"location":"ROS/ros_world/ros_tf/euler/","title":"Euler","text":"","tags":["euler","RPY"]},{"location":"ROS/ros_world/ros_tf/euler/#gimbal-lock","title":"Gimbal lock","text":"<p>Gimbal lock is a loss of one degree of freedom (DOF) in a 3D rotation system due to the alignment of two rotational axes. For example when <code>PITCH</code> is \u00b190\u00b0 the <code>YAW</code> and <code>ROLL</code> axes rotate around the <code>YAW</code> and we loss on degree of freedom</p> <p>Euler Angles Gimbal Visualization</p> <p></p> <p>colors</p> <p>roll (x) - blue pitch (y) - green yaw (z) - green</p> <p>rotate pitch 90 degree make roll and yaw rotation to the same direction</p>","tags":["euler","RPY"]},{"location":"ROS/ros_world/ros_tf/euler/#rotation-order","title":"Rotation Order","text":"","tags":["euler","RPY"]},{"location":"ROS/ros_world/ros_tf/euler/#euler-xyz","title":"Euler (XYZ)","text":"<p>RPY</p>","tags":["euler","RPY"]},{"location":"ROS/ros_world/ros_tf/linear_algebra/","title":"Linear algebra","text":"","tags":["linear algebra"]},{"location":"ROS/ros_world/ros_tf/quaternion/","title":"Quaternion","text":"<p>A quaternion is a way to represent rotation in 3D</p>","tags":["quaternion","tf_transformations"]},{"location":"ROS/ros_world/ros_tf/quaternion/#demo","title":"Demo","text":"<p>Using Pose (PoseStamped) message and rviz to show coordinate rotation. using <code>quaternion_from_euler</code> to convert euler angle to quaternion</p> Figure 1: Show axis. code: Publish pose message node <pre><code>#!/usr/bin/env python3\n\nimport rclpy\nfrom rclpy.node import Node\nfrom geometry_msgs.msg import PoseStamped\nfrom tf_transformations import quaternion_from_euler\nfrom math import pi\n\nclass MyNode(Node):\n    def __init__(self):\n        node_name=\"pose_demo\"\n        super().__init__(node_name)\n        self.pub = self.create_publisher(PoseStamped, \"/my_topic\", 10)\n        self.my_timer = self.create_timer(1.0, self.__timer_handler)\n\n        self.get_logger().info(\"Hello ROS2\")\n\n    def __timer_handler(self):\n        msg = PoseStamped()\n        msg.header.frame_id = \"map\"\n        msg.header.stamp = self.get_clock().now().to_msg()\n        msg.pose.position.x = 0.0\n        msg.pose.position.y = 0.0\n        msg.pose.position.z = 0.0\n\n        q = quaternion_from_euler(0.0, pi/2, pi/2)\n        msg.pose.orientation.x = q[0]\n        msg.pose.orientation.y = q[1]\n        msg.pose.orientation.z = q[2]\n        msg.pose.orientation.w = q[3]\n\n        self.pub.publish(msg)\n\ndef main(args=None):\n    rclpy.init(args=args)\n    node = MyNode()\n    rclpy.spin(node)\n    node.destroy_node()\n    rclpy.shutdown()\n\nif __name__ == '__main__':\n    main()\n</code></pre> <p>PoseStamped</p> <p>For rviz to shown the pose topic it need to be publish as <code>PoseStamped</code> for the frame_id field</p> Figure 2: Add Pose message Figure 3: Show Pose message (my_topic) (r=0,p=0,y=90) <p>The Axis is rotate 90 degree CCW (right hand rule)</p> Figure 4: Show Pose message rotate (r=0,p=90,y=90)","tags":["quaternion","tf_transformations"]},{"location":"ROS/ros_world/zenoh/","title":"Zenoh","text":"<p>ROS Bridge</p> <p>Python bindings</p> <p>Zenoh pico</p> <p>ROS RMW</p> <ul> <li>zenoh json5 configuration schema</li> <li>build zenoh bridge with shm support </li> </ul>","tags":["zenoh"]},{"location":"ROS/ros_world/zenoh/#to-read","title":"To Read","text":"<ul> <li>Zenoh</li> <li>Zenoh ROSCon 2024 Workshop</li> </ul>","tags":["zenoh"]},{"location":"ROS/ros_world/zenoh/python_bindings/","title":"Zenoh Python bindings","text":"<pre><code>pip install eclipse-zenoh\n</code></pre>","tags":["zenoh","python"]},{"location":"ROS/ros_world/zenoh/python_bindings/#examples","title":"Examples","text":"","tags":["zenoh","python"]},{"location":"ROS/ros_world/zenoh/python_bindings/#pubsub","title":"Pub/Sub","text":"<p>Simple pub sub</p> <pre><code>import zenoh\nimport time\nimport multiprocessing\n\nKEY_EXPRESSION = \"demo/example\"\n\ndef publisher():\n    config = zenoh.Config()\n    session = zenoh.open(config)\n    pub = session.declare_publisher(KEY_EXPRESSION)\n    while True:\n        pub.put('Hello, Zenoh!')\n        time.sleep(1)\n\ndef subscriber():\n    config = zenoh.Config()\n    session = zenoh.open(config)\n    sub = session.declare_subscriber(KEY_EXPRESSION, lambda sample: print(f'Received: {sample.payload.to_string()}'))\n    while True:\n        time.sleep(1)\n\nif __name__ == '__main__':\n    pub_process = multiprocessing.Process(target=publisher)\n    sub_process = multiprocessing.Process(target=subscriber)\n\n    pub_process.start()\n    sub_process.start()\n\n    pub_process.join()\n    sub_process.join()\n</code></pre>","tags":["zenoh","python"]},{"location":"ROS/ros_world/zenoh/rmw/","title":"RMW Zenoh","text":"","tags":["ros","zenoh","rmw"]},{"location":"ROS/ros_world/zenoh/rmw/#reference","title":"Reference","text":"<ul> <li>No more broken comms! (ROS 2 + rmw_zenoh) </li> <li>Zenoh ROSCon 2024 Workshop</li> </ul>","tags":["ros","zenoh","rmw"]},{"location":"ROS/ros_world/zenoh/ros_bridge/","title":"Zenoh Bridge and ROS","text":"<p>ROS and zenoh bridge</p> <p>ROS Bridge and python</p> <p>TBD</p>","tags":["zenoh","ros","bridge"]},{"location":"ROS/ros_world/zenoh/ros_bridge/zenoh_bridge_build_with_shm/","title":"Zenoh Bridge with SHM support","text":"","tags":["zenoh","bridge","ros","shm"]},{"location":"ROS/ros_world/zenoh/ros_bridge/zenoh_bridge_build_with_shm/#under-construction","title":"under construction","text":"<ul> <li>zenoh-plugin-ros2dds</li> </ul>","tags":["zenoh","bridge","ros","shm"]},{"location":"ROS/ros_world/zenoh/ros_bridge/zenoh_bridge_build_with_shm/#build-with-shm","title":"build with SHM","text":"<ul> <li>Download source (v 1.2.0) download</li> <li>Extract and run:</li> </ul> <pre><code>cargo build --release --features dds_shm\n</code></pre> <p>binary locate at <code>target/release</code> folder</p>","tags":["zenoh","bridge","ros","shm"]},{"location":"ROS/ros_world/zenoh/ros_bridge/zenoh_bridge_build_with_shm/#usage","title":"Usage","text":"<ul> <li>Run with shm flag</li> <li>Set cyclondds.xml for shm</li> </ul> <pre><code>./zenoh-bridge-ros2dds --dds-enable-shm\n</code></pre> cyclondds.xml<pre><code>\n</code></pre>","tags":["zenoh","bridge","ros","shm"]},{"location":"ROS/ros_world/zenoh/ros_bridge/zenoh_bridge_build_with_shm/#tmux-script","title":"tmux script","text":"","tags":["zenoh","bridge","ros","shm"]},{"location":"ROS/ros_world/zenoh/ros_bridge/zenoh_bridge_build_with_shm/#reference","title":"Reference","text":"<ul> <li>combine zenoh-plugin-dds with cyclone iceoryx shared memory #50</li> </ul>","tags":["zenoh","bridge","ros","shm"]},{"location":"ROS/ros_world/zenoh/ros_bridge/zenoh_bridge_ros_python/","title":"Connect ROS via zenoh bridge with python","text":"<p>Using zenoh bridge to pub/sub and message call from python script to ROS2 and vice versa.</p> <p>versions</p> <ul> <li>ubuntu 22.04</li> <li>ROS humble</li> <li>cycloneDDS</li> <li>zenoh 1.2.0</li> <li>zenoh-plugin-ros2dds 1.2.0</li> <li>pycdr2 1.0.0</li> </ul>","tags":["zenoh","bridge","python"]},{"location":"ROS/ros_world/zenoh/ros_bridge/zenoh_bridge_ros_python/#install-zenoh-plugin-ros2dds","title":"Install zenoh-plugin-ros2dds","text":"<p>Download and extract , bridge standalone executable </p> <p>zenoh-plugin-ros2dds-1.2.0-x86_64-unknown-linux-gnu-standalone.zip </p>","tags":["zenoh","bridge","python"]},{"location":"ROS/ros_world/zenoh/ros_bridge/zenoh_bridge_ros_python/#install","title":"Install","text":"<p>The IDL part of the CycloneDDS package as standalone version, to support packages that need CDR (de)serialisation without the Cyclone DDS API.</p> <pre><code>pip install pycdr2\npip install eclipse-zenoh==1.2.0\n</code></pre>","tags":["zenoh","bridge","python"]},{"location":"ROS/ros_world/zenoh/ros_bridge/zenoh_bridge_ros_python/#sub-demo","title":"Sub Demo","text":"<p>Send ROS2 messages to zenoh and receive it using python script</p> Terminal 1<pre><code>export ROS_DISTRO=humble\n./zenoh-bridge-ros2dds\n</code></pre> Terminal 2<pre><code>ros2 topic pub /my_int32_topic std_msgs/msg/Int32 \"{data: 10}\" --rate 1\n</code></pre> <pre><code>import zenoh\nfrom dataclasses import dataclass\nfrom pycdr2 import IdlStruct \nfrom pycdr2.types import int32\nimport time\n\n@dataclass\nclass Int32(IdlStruct, typename=\"Int32\"):\n    data: int32\n\n\ndef callback(sample):\n    msg = Int32.deserialize(bytes(sample.payload))\n    print(f\"Received: {msg.data}\")\n\n\nconf = zenoh.Config()    \nsession = zenoh.open(conf)\nsub = session.declare_subscriber('my_int32_topic', callback)\n\nwhile True:\n    time.sleep(1)\n</code></pre>","tags":["zenoh","bridge","python"]},{"location":"ROS/ros_world/zenoh/ros_bridge/zenoh_bridge_ros_python/#pub-demo","title":"Pub Demo","text":"<p>Pub ROS2 messages to zenoh and subscribe using ROS</p> <p>subscriber</p> <p>For this demo to work there must be running subscriber ROS node for this topic.</p> Terminal 1<pre><code>export ROS_DISTRO=humble\n./zenoh-bridge-ros2dds\n</code></pre> zenoh pub<pre><code>import zenoh\nfrom dataclasses import dataclass\nfrom pycdr2 import IdlStruct \nfrom pycdr2.types import int32\nimport time\n\n@dataclass\nclass Int32(IdlStruct, typename=\"Int32\"):\n    data: int32\n\nconf = zenoh.Config()    \nsession = zenoh.open(conf)\ncounter = 0\nwhile True:\n    time.sleep(1)\n    session.put('my_int32_topic', Int32(data=counter).serialize())\n    counter += 1\n    print(f\"Published: {counter}\")\n</code></pre> subscriber node<pre><code>import rclpy\nfrom rclpy.node import Node\nfrom std_msgs.msg import Int32\n\nTOPIC = \"my_int32_topic\"\n\nclass MyNode(Node):\n    def __init__(self):\n        node_name=\"minimal\"\n        super().__init__(node_name)\n        self.create_subscription(Int32, TOPIC, self.callback, 10)\n        self.get_logger().info(\"Hello ROS2\")\n\n    def callback(self, msg):\n        self.get_logger().info(f\"Received: {msg.data}\")\n\ndef main(args=None):\n    rclpy.init(args=args)\n    node = MyNode()\n    rclpy.spin(node)\n    node.destroy_node()\n    rclpy.shutdown()\n\nif __name__ == '__main__':\n    main()\n</code></pre>","tags":["zenoh","bridge","python"]},{"location":"ROS/ros_world/zenoh/ros_bridge/zenoh_bridge_ros_python/#service-demo","title":"Service Demo","text":"<p>Call ROS2 service from zenoh python </p>","tags":["zenoh","bridge","python"]},{"location":"ROS/ros_world/zenoh/ros_bridge/zenoh_bridge_ros_python/#demo","title":"Demo","text":"<ul> <li>Service node with message type <code>std_srv.srv.Trigger</code></li> <li>zenoh ros bridge</li> <li>zenoh service client (get)</li> </ul>","tags":["zenoh","bridge","python"]},{"location":"ROS/ros_world/zenoh/ros_bridge/zenoh_bridge_ros_python/#ros-service-node","title":"ROS Service Node","text":"<p>ROS node that run service with nessage <code>std_srv.srv.Trigger</code></p> demo_service.py<pre><code>#!/usr/bin/env python3\n\n\nimport rclpy\nfrom rclpy.node import Node\nfrom std_srvs.srv import Trigger\nfrom rclpy.qos import qos_profile_services_default\n\nTOPIC = \"trigger_srv\"\n\nclass MyNode(Node):\n    def __init__(self):\n        node_name=\"minimal_srv\"\n        super().__init__(node_name)\n        self.srv = self.create_service(Trigger, TOPIC, self.handler, qos_profile=qos_profile_services_default)\n        self.get_logger().info(\"Hello ROS2\")\n\n    def handler(self, request: Trigger.Request, response: Trigger.Response):\n        self.get_logger().info(\"Trigger service called\")\n        response.success = True\n        response.message = \"success\"\n        print(response)\n        return response\n\ndef main(args=None):\n    rclpy.init(args=args)\n    node = MyNode()\n    rclpy.spin(node)\n    node.destroy_node()\n    rclpy.shutdown()\n\nif __name__ == '__main__':\n    main()\n</code></pre>","tags":["zenoh","bridge","python"]},{"location":"ROS/ros_world/zenoh/ros_bridge/zenoh_bridge_ros_python/#zenoh-client","title":"Zenoh client","text":"zenoh get<pre><code>import zenoh\n\nfrom dataclasses import dataclass\nfrom pycdr2 import IdlStruct\nfrom zenoh import Reply\nimport time\n\n# ros2 service call /trigger_srv std_srvs/srv/Trigger\n\nTOPIC = \"trigger_srv\"\n\n@dataclass\nclass TriggerRequest(IdlStruct):\n   pass\n\n\n@dataclass\nclass TriggerResponse(IdlStruct):\n   success: bool\n   message: str\n\n\n\ndef handle_replay(reply: Reply):\n    try:\n        print(reply.ok)\n        message = TriggerResponse.deserialize(reply.ok.payload.to_bytes())\n\n        print(f\"&gt;&gt; Received {message}\")\n    except Exception as e:\n        print(e)\n        print(\"&gt;&gt; Received ERROR\")\n\nconf = zenoh.Config()    \nsession = zenoh.open(conf)\n\nreq = TriggerRequest().serialize()\nreplies = session.get(TOPIC, payload=req, handler=handle_replay)\n\ntime.sleep(2)\nsession.close()\n</code></pre>","tags":["zenoh","bridge","python"]},{"location":"ROS/ros_world/zenoh/ros_bridge/zenoh_bridge_ros_python/#usage","title":"usage","text":"Terminal 1<pre><code>export ROS_DISTRO=humble\n./zenoh-bridge-ros2dds\n</code></pre> terminal 2<pre><code># run ros service\n</code></pre> check service<pre><code># using ros2 cli\n\nros2 service call /trigger_srv std_srvs/srv/Trigger\n</code></pre> zeno client<pre><code># run zeno client\npython3 ros_srv_call.py \n\n\n&gt;&gt; Received TriggerResponse(success=True, message='success')\n</code></pre>","tags":["zenoh","bridge","python"]},{"location":"ROS/ros_world/zenoh/ros_bridge/zenoh_bridge_two_computers/","title":"ROS Zenoh Bridge","text":"<p>Connect two ROS machine via zenoh bridge just read the readme</p> <p>versions</p> <ul> <li>ubuntu 22.04</li> <li>ROS humble</li> <li>cycloneDDS</li> <li>zenoh 1.2.0</li> <li>zenoh-plugin-ros2dds 1.2.0</li> </ul>","tags":["zenoh","ros","bridge","router"]},{"location":"ROS/ros_world/zenoh/ros_bridge/zenoh_bridge_two_computers/#ros-test","title":"ROS test","text":"<p>Run pub/sub without any restriction between the machine</p>","tags":["zenoh","ros","bridge","router"]},{"location":"ROS/ros_world/zenoh/ros_bridge/zenoh_bridge_two_computers/#remote-machine","title":"Remote machine","text":"<pre><code>RMW_IMPLEMENTATION=rmw_cyclonedds_cpp ros2 topic pub /my_int32_topic std_msgs/msg/Int32 \"{ data: 10 }\n</code></pre>","tags":["zenoh","ros","bridge","router"]},{"location":"ROS/ros_world/zenoh/ros_bridge/zenoh_bridge_two_computers/#local-machine","title":"Local machine","text":"<pre><code>ros2 topic echo /my_int32_topic\n</code></pre>","tags":["zenoh","ros","bridge","router"]},{"location":"ROS/ros_world/zenoh/ros_bridge/zenoh_bridge_two_computers/#using-zenoh","title":"Using Zenoh","text":"<p>Close/ restrict the DDS traffic between machine Config remote machine as another domain <code>ROS_DOMAIN_ID=2</code> or set it <code>ROS_LOCALHOST_ONLY=1</code></p> <p>Run zenoh bridge in <code>router</code> mode (default)</p> <p> </p>","tags":["zenoh","ros","bridge","router"]},{"location":"ROS/ros_world/zenoh/ros_bridge/zenoh_bridge_two_computers/#remote-machine_1","title":"Remote machine","text":"publisher<pre><code>ROS_DOMAIN_ID=2 RMW_IMPLEMENTATION=rmw_cyclonedds_cpp ros2 topic pub /my_int32_topic std_msgs/msg/Int32 \"{ data: 10 }\"\n# OR\nROS_LOCALHOST_ONLY=1 RMW_IMPLEMENTATION=rmw_cyclonedds_cpp ros2 topic pub /my_int32_topic std_msgs/msg/Int32 \"{ data: 10 }\"\n</code></pre> zenoh bridge<pre><code>ROS_DOMAIN_ID=2 ROS_DISTRO=humble ./zenoh-bridge-ros2dds\n# OR\nROS_LOCALHOST_ONLY=1  ROS_DISTRO=humble ./zenoh-bridge-ros2dds\n</code></pre>","tags":["zenoh","ros","bridge","router"]},{"location":"ROS/ros_world/zenoh/ros_bridge/zenoh_bridge_two_computers/#local-machine_1","title":"Local machine","text":"zenoh bridge<pre><code>ROS_DISTRO=humble ./zenoh-bridge-ros2dds -e tcp/10.0.0.10:7447\n</code></pre> subscriber<pre><code>ros2 topic echo /my_int32_topic\n</code></pre> <p>client bridge connect to remote bridge</p> <p>The zenoh-bridge-ros2dds is by default started in router mode This means it's listening for incoming TCP connections by remote bridges or any Zenoh application on port 7447 via any network interface.  It does perform discovery via scouting over UDP multicast or gossip protocol, but doesn't auto-connect to anything.</p>","tags":["zenoh","ros","bridge","router"]},{"location":"ROS/ros_world/zenoh/ros_bridge/zenoh_bridge_two_computers/#autoconnect","title":"autoconnect","text":"autoconnect.json5 <p>Warning</p> <p>l.o multicast disabled by default don't work with environment variable <code>ROS_LOCALHOST_ONLY=1</code></p>","tags":["zenoh","ros","bridge","router"]},{"location":"ROS/ros_world/zenoh/ros_bridge/zenoh_bridge_two_computers/#remote-machine_2","title":"Remote machine","text":"publisher<pre><code>ROS_DOMAIN_ID=2 RMW_IMPLEMENTATION=rmw_cyclonedds_cpp ros2 topic pub /my_int32_topic std_msgs/msg/Int32 \"{ data: 10 }\"\n</code></pre> zenoh bridge<pre><code>ROS_DOMAIN_ID=2 ROS_DISTRO=humble ./zenoh-bridge-ros2dds --config autoconnect.json5\n</code></pre>","tags":["zenoh","ros","bridge","router"]},{"location":"ROS/ros_world/zenoh/ros_bridge/zenoh_bridge_two_computers/#local-machine_2","title":"Local machine","text":"zenoh bridge<pre><code>ROS_DISTRO=humble ./zenoh-bridge-ros2dds --config autoconnect.json5\n</code></pre> subscriber<pre><code>ros2 topic echo /my_int32_topic\n</code></pre>","tags":["zenoh","ros","bridge","router"]},{"location":"ROS/ros_world/zenoh/ros_bridge/zenoh_bridge_two_computers/#bridge-admin","title":"Bridge Admin","text":"<p>Running Bridge with <code>--rest-http-port 8000</code> expose web interface to query bridge state</p> Description http://\\&lt;bridge-IP&gt;:8000/@/local/ros2/node/** ROS nodes with their interfaces discovered by the bridge http://\\&lt;bridge-IP&gt;:8000/@//ros2/node/* ROS nodes discovered by all bridges http://\\&lt;bridge-IP&gt;:8000/@/local/ros2/route/** All routes between ROS interfaces and Zenoh established by the bridge more http://localhost:8001/@/*/ros2/node/**<pre><code>@/e25ed72d391828f7b6fbf87c5ea6e947/ros2/node/01102f4fbeea030c1eaab469000001c1/_ros2cli_daemon_0_ee39487b11b244b5b78a51b784d6e0ea\n    {\"action_clients\":[],\"action_servers\":[],\"publishers\":[{\"name\":\"/parameter_events\",\"type\":\"rcl_interfaces/msg/ParameterEvent\"},{\"name\":\"/rosout\",\"type\":\"rcl_interfaces/msg/Log\"}],\"service_clients\":[],\"service_servers\":[],\"subscribers\":[]}\n@/e25ed72d391828f7b6fbf87c5ea6e947/ros2/node/01100c7dd6bcb38d4918646d000001c1/_ros2cli_1340499\n    {\"action_clients\":[],\"action_servers\":[],\"publishers\":[{\"name\":\"/rosout\",\"type\":\"rcl_interfaces/msg/Log\"},{\"name\":\"/parameter_events\",\"type\":\"rcl_interfaces/msg/ParameterEvent\"}],\"service_clients\":[],\"service_servers\":[],\n    \"subscribers\":[{\"name\":\"/my_int32_topic\",\"type\":\"std_msgs/msg/Int32\"}]}\n@/5d61a72ea243edb2653eecef8632fee8/ros2/node/01100e33ce14108eacd1a16c000001c1/_ros2cli_4554\n    {\"action_clients\":[],\"action_servers\":[],\n    \"publishers\":[{\"name\":\"/my_int32_topic\",\"type\":\"std_msgs/msg/Int32\"},\n        {\"name\":\"/rosout\",\"type\":\"rcl_interfaces/msg/Log\"},\n        {\"name\":\"/parameter_events\",\"type\":\"rcl_interfaces/msg/ParameterEvent\"}],\n    \"service_clients\":[],\"service_servers\":[],\"subscribers\":[]} \n</code></pre>","tags":["zenoh","ros","bridge","router"]},{"location":"ROS/ros_world/zenoh/ros_bridge/zenoh_bridge_two_computers/#config","title":"Config","text":"<p>zenoh config from github</p> <ul> <li>Allow/Deny topics</li> <li>MAx rate</li> </ul>","tags":["zenoh","ros","bridge","router"]},{"location":"ROS/ros_world/zenoh/ros_bridge/zenoh_bridge_two_computers/#allow-deny","title":"Allow /Deny","text":"<p>Allow / Deny</p> <p>In the config we set Allow key or Deny key Both of them not work</p> allow.json5 bridge log<pre><code>INFO tokio-runtime-worker ThreadId(04) zenoh_plugin_ros2dds: Node /_ros2cli_5087 declares Publisher /my_int32_topic: std_msgs/msg/Int32 - Allowed\nINFO tokio-runtime-worker ThreadId(04) zenoh_plugin_ros2dds::routes_mgr: Route Publisher (ROS:/my_int32_topic -&gt; Zenoh:my_int32_topic) created\n</code></pre>","tags":["zenoh","ros","bridge","router"]},{"location":"ROS/ros_world/zenoh/ros_bridge/zenoh_bridge_two_computers/#pub_max_frequencies","title":"pub_max_frequencies","text":"<p>Config maximum publish rate for topic </p> allow.json5 <pre><code>ros2 topic hz /my_int32_topic \naverage rate: 0.500\n    min: 2.001s max: 2.001s std dev: 0.00019s window: 2\naverage rate: 0.500\n    min: 2.001s max: 2.001s std dev: 0.00017s window: 3\n</code></pre>","tags":["zenoh","ros","bridge","router"]},{"location":"ROS/ros_world/zenoh/zenoh_pico/","title":"Zenoh pico","text":"","tags":["zenoh","pico","ros"]},{"location":"ROS/ros_world/zenoh/zenoh_pico/#reference","title":"Reference","text":"<ul> <li>ROS 2 and microcontrollers integration via Zenoh-pico</li> </ul>","tags":["zenoh","pico","ros"]},{"location":"Robotics/","title":"Robotics","text":"<p>sensors</p> <p>Math</p> <p>SLAM</p> <p>Ardupilot and Mavlink</p> <p>Block 5 Description</p> <p>Block 6 Description</p>"},{"location":"Robotics/math/","title":"Math","text":"","tags":["robotics","math"]},{"location":"Robotics/math/#good-resources","title":"Good resources","text":"<ul> <li>Mr P , Primarily python coding tutorials with a physics/math focus<ul> <li>How To Interpolate Data In Python</li> </ul> </li> </ul>","tags":["robotics","math"]},{"location":"Robotics/sensors/","title":"Sensors","text":"<p>imu</p> <p>Block 2 Description</p> <p>Block 3 Description</p> <p>Block 4 Description</p> <p>Block 5 Description</p> <p>Block 6 Description</p>"},{"location":"Robotics/sensors/#posts","title":"Posts","text":"<ul> <li>Encoder</li> <li>GPIO - MCP23017</li> </ul>"},{"location":"Robotics/sensors/encoder/","title":"Index","text":"","tags":["sensor","encoder","AS5048"]},{"location":"Robotics/sensors/encoder/#wiring","title":"Wiring","text":"<p> | color  | desc                       | uno pin        | | ------ | -------------------------- | -------------- | | black  | CSN  (chip select)         | D10 (any gpio) | | purple | CLK                        | D13 (SCK)      | | yellow | MOSI (master out slave in) | D11 (COPI)     | | green  | MISO (master in slave out) | D12 (CIPO)     | | red    | 5/3.3                      |                | | white  | GND                        |                |</p> <p>white = purple red = green green = yellow yellow = black purple = red black = white</p> <p></p>","tags":["sensor","encoder","AS5048"]},{"location":"Robotics/sensors/encoder/#code","title":"Code","text":"<pre><code>#include &lt;SPI.h&gt;\n\n// Define the AS5048A SPI settings\nSPISettings AS5048ASettings(1000000, MSBFIRST, SPI_MODE1);\n\n// Define the chip select pin\nconst int CSPin = 10;\n\nvoid setup() {\n  // Set the chip select pin as an output\n  pinMode(CSPin, OUTPUT);\n  // Begin SPI communication\n  SPI.begin();\n  // Pull the chip select pin high to deselect the sensor\n  digitalWrite(CSPin, HIGH);\n}\n\nvoid loop() {\n  // Read the angle from the sensor\n  unsigned int angle = readAS5048A();\n  // Print the angle to the Serial Monitor\n  Serial.println(angle);\n  delay(1000); // Wait for 1 second\n}\n\nunsigned int readAS5048A() {\n  // Variable to store the angle\n  unsigned int angle = 0;\n  // Pull the chip select pin low to select the sensor\n  digitalWrite(CSPin, LOW);\n  // Start SPI transaction with the defined settings\n  SPI.beginTransaction(AS5048ASettings);\n  // Send the command to read the angle\n  SPI.transfer(0xFF);\n  // Read the high byte of the angle\n  angle = SPI.transfer(0x00);\n  // Shift the high byte and read the low byte\n  angle = (angle &lt;&lt; 8) | SPI.transfer(0x00);\n  // End the SPI transaction\n  SPI.endTransaction();\n  // Pull the chip select pin high to deselect the sensor\n  digitalWrite(CSPin, HIGH);\n  // Return the angle\n  return angle;\n}\n</code></pre>","tags":["sensor","encoder","AS5048"]},{"location":"Robotics/sensors/encoder/#reference","title":"Reference","text":"<ul> <li>How to Use AS5048 Magnetic Encoder Position Sensor: Examples, Pinouts, and Specs </li> </ul>","tags":["sensor","encoder","AS5048"]},{"location":"Robotics/sensors/gpio/mcp23017_gpio_i2c_extension_interface/","title":"MCP23017 gpio i2c extension","text":"","tags":["tag"]},{"location":"Robotics/sensors/gpio/mcp23017_gpio_i2c_extension_interface/#connect-to-rpi","title":"Connect to RPi","text":"","tags":["tag"]},{"location":"Robotics/sensors/gpio/mcp23017_gpio_i2c_extension_interface/#pinout","title":"Pinout","text":"","tags":["tag"]},{"location":"Robotics/sensors/gpio/mcp23017_gpio_i2c_extension_interface/#wiring","title":"Wiring","text":"MCP23017 RPi note VCC 1 3.3v GND 6 SDA 3 SCL 5 RESET 1 3.3v","tags":["tag"]},{"location":"Robotics/sensors/gpio/mcp23017_gpio_i2c_extension_interface/#i2c","title":"i2c","text":"install<pre><code>sudo apt install i2c-tools\n</code></pre>","tags":["tag"]},{"location":"Robotics/sensors/gpio/mcp23017_gpio_i2c_extension_interface/#detect","title":"detect","text":"<pre><code>sudo i2cdetect -y 1\n     0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f\n00:                         -- -- -- -- -- -- -- -- \n10: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- \n20: 20 -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- \n30: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- \n40: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- \n50: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- \n60: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- \n</code></pre>","tags":["tag"]},{"location":"Robotics/sensors/gpio/mcp23017_gpio_i2c_extension_interface/#demo","title":"Demo","text":"<p>Connect LED to port PA0</p> <pre><code># set all portA pin as output\nsudo i2cset -y 1 0x20 0x00 0x00 \n\n# set gister 0x0c\nsudo i2cset -y 1 0x20 0x14 0x01\nsudo i2cset -y 1 0x20 0x14 0x00\n</code></pre>","tags":["tag"]},{"location":"Robotics/sensors/gpio/mcp23017_gpio_i2c_extension_interface/#registers","title":"Registers","text":"<p>The MCP23017 supports two register addressing modes:</p> <pre><code>Bank 0 (Sequential Addressing - Default Mode)\nBank 1 (Split Addressing Mode)\n</code></pre> <p></p> <p>demo</p> <p>The demo above use register</p> <ul> <li>register 0x00(IODIRA) as set portA all pin to output</li> <li>register 0x14(OLATA) set as 0x00/0x01 to set port <code>PA0</code> low/high</li> </ul>","tags":["tag"]},{"location":"Robotics/sensors/gpio/mcp23017_gpio_i2c_extension_interface/#datasheet","title":"Datasheet","text":"","tags":["tag"]},{"location":"Robotics/sensors/gpio/mcp23017_gpio_i2c_extension_interface/#351-io-direction-register","title":"3.5.1 I/O DIRECTION REGISTER","text":"<p>Controls the direction of the data I/O. When a bit is set, the corresponding pin becomes an input. When a bit is clear, the corresponding pin becomes an output.</p> <p></p>","tags":["tag"]},{"location":"Robotics/sensors/gpio/mcp23017_gpio_i2c_extension_interface/#3511-output-latch-register-olat","title":"3.5.11 OUTPUT LATCH REGISTER (OLAT)","text":"<p>The OLAT register provides access to the output latches. A read from this register results in a read of the OLAT and not the port itself. A write to this register modifies the output latches that modifies the pins configured as outputs.</p> <p></p> <p>register address</p> <p>The data sheet use bank1 address mode The address is 0x14 for OLATA register in bank0 mode</p>","tags":["tag"]},{"location":"Robotics/sensors/gpio/mcp23017_gpio_i2c_extension_interface/#permission","title":"Permission","text":"<p>Check file owner and add you'r user to file group</p> <pre><code>sudo usermod -aG i2c $USER\n</code></pre>","tags":["tag"]},{"location":"Robotics/sensors/gpio/mcp23017_gpio_i2c_extension_interface/#cpp-demo","title":"CPP Demo","text":"<p>Toggle PA0 on/off</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;fcntl.h&gt;\n#include &lt;unistd.h&gt;\n#include &lt;linux/i2c-dev.h&gt;\n#include &lt;sys/ioctl.h&gt;\n#include &lt;chrono&gt;\n#include &lt;thread&gt;\n#include &lt;cstdint&gt;  // For fixed-width integers\n\nint main() {\n    int file;\n    const char *i2cBus = \"/dev/i2c-1\"; // I2C bus\n    const int deviceAddress = 0x20;    // MCP23017 I2C address\n\n    // Open the I2C bus\n    file = open(i2cBus, O_RDWR);\n    if (file &lt; 0) {\n        std::cerr &lt;&lt; \"Failed to open I2C bus\\n\";\n        return -1;\n    }\n\n    // Connect to the MCP23017 device\n    if (ioctl(file, I2C_SLAVE, deviceAddress) &lt; 0) {\n        std::cerr &lt;&lt; \"Failed to connect to I2C device\\n\";\n        close(file);\n        return -1;\n    }\n\n    // Set IODIRA register (0x00) to 0x00 (all output)\n    uint8_t config[2] = {0x00, 0x00};\n    if (write(file, config, 2) != 2) {\n        std::cerr &lt;&lt; \"Failed to write to I2C device\\n\";\n    }\n\n    // Toggle PA0 port using GPIOA (0x14)\n    for (int i=0; i&lt;10; i++)\n    {\n        uint8_t state = i%2;\n        uint8_t output[2] = {0x14, state};\n        if (write(file, output, 2) != 2) {\n            std::cerr &lt;&lt; \"Failed to write GPIOA\\n\";\n        }\n        std::this_thread::sleep_for(std::chrono::seconds(1));\n    }\n\n    // // Read GPIOA (0x12)\n    // uint8_t reg = 0x12;\n    // if (write(file, &amp;reg, 1) != 1) {\n    //     std::cerr &lt;&lt; \"Failed to set register address\\n\";\n    // }\n\n    // uint8_t data;\n    // if (read(file, &amp;data, 1) != 1) {\n    //     std::cerr &lt;&lt; \"Failed to read from I2C device\\n\";\n    // } else {\n    //     std::cout &lt;&lt; \"GPIOA Data: 0x\" &lt;&lt; std::hex &lt;&lt; (int)data &lt;&lt; std::dec &lt;&lt; std::endl;\n    // }\n\n    close(file);\n    return 0;\n}\n</code></pre>","tags":["tag"]},{"location":"Robotics/sensors/gpio/mcp23017_gpio_i2c_extension_interface/#python-demo","title":"Python Demo","text":"<pre><code>pip3 install smbus2\n</code></pre> <p>Toggle PA0 on/off</p> <pre><code>from smbus2 import SMBus\nimport time\n\nI2C_BUS = 1         # Raspberry Pi uses I2C bus 1\nI2C_ADDR = 0x20     # MCP23017 I2C address\n\n# MCP23017 Register Addresses\nIODIRA = 0x00       # I/O direction register for GPIOA\nGPIOA = 0x12        # Register to read/write GPIOA\nOLATA = 0x14        # Output latch register for GPIOA\n\nwith SMBus(I2C_BUS) as bus:\n    # Set all GPIOA pins as output (0x00 means all pins are outputs)\n    bus.write_byte_data(I2C_ADDR, IODIRA, 0x00)\n\n    while True:\n        # Turn PA0 ON (set bit 0 to 1)\n        bus.write_byte_data(I2C_ADDR, OLATA, 0x01)\n        print(\"PA0 ON\")\n        time.sleep(1)\n\n        # Turn PA0 OFF (set bit 0 to 0)\n        bus.write_byte_data(I2C_ADDR, OLATA, 0x00)\n        print(\"PA0 OFF\")\n        time.sleep(1)\n</code></pre>","tags":["tag"]},{"location":"Robotics/sensors/gpio/mcp23017_gpio_i2c_extension_interface/#reference","title":"Reference","text":"<ul> <li>Datasheet</li> </ul>","tags":["tag"]},{"location":"Robotics/sensors/i2c/","title":"Index","text":"<p>The CP2112 USB-to-I2C Bridge is a device from Silicon Labs designed to facilitate communication between a USB host (like a PC) and I2C devices</p> <p></p>","tags":["i2c","cp2112","usb"]},{"location":"Robotics/sensors/i2c/#i2c-tools","title":"i2c-tools","text":"<pre><code>sudo apt install i2c-tools\n</code></pre> <pre><code>i2cdetect -l\n#\n...\ni2c-16  unknown         CP2112 SMBus Bridge on hidraw5          N/A\n</code></pre>","tags":["i2c","cp2112","usb"]},{"location":"Robotics/sensors/i2c/#connect-i2c-sensor-at-address-0x18","title":"connect i2c sensor at address 0x18","text":"<pre><code>sudo i2cdetect -y -r 16\n[sudo] password for user: \n     0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f\n00:                         -- -- -- -- -- -- -- -- \n10: -- -- -- -- -- -- -- -- 18 -- -- -- -- -- -- -- \n20: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- \n30: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- \n40: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- \n50: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- \n60: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- \n70: -- -- -- -- -- -- -- --                         \n</code></pre>","tags":["i2c","cp2112","usb"]},{"location":"Robotics/sensors/i2c/#udev-rule","title":"udev rule","text":"<p>Add udev rule to add permission <code>rw</code> for all</p> <pre><code>ll /dev/i2c-16\n#\ncrw-rw---- 1 root i2c 89, 16 Nov  1 07:10 /dev/i2c-16\n</code></pre> <pre><code>udevadm info -a -p  $(udevadm info -q path -n /dev/i2c-16)\n#\n\n  looking at device '/devices/pci0000:00/0000:00:14.0/usb3/3-4/3-4.2/3-4.2.4/3-4.2.4:1.0/0003:10C4:EA90.0011/i2c-16/i2c-dev/i2c-16':\n    KERNEL==\"i2c-16\"\n    SUBSYSTEM==\"i2c-dev\"\n    DRIVER==\"\"\n    ATTR{name}==\"CP2112 SMBus Bridge on hidraw5\"\n    ATTR{power/async}==\"disabled\"\n    ATTR{power/control}==\"auto\"\n    ATTR{power/runtime_active_kids}==\"0\"\n    ATTR{power/runtime_active_time}==\"0\"\n    ATTR{power/runtime_enabled}==\"disabled\"\n    ATTR{power/runtime_status}==\"unsupported\"\n    ATTR{power/runtime_suspended_time}==\"0\"\n    ATTR{power/runtime_usage}==\"0\"\n</code></pre> udev rule<pre><code>echo 'SUBSYSTEMS==\"i2c-dev\", ATTRS{name}==\"CP2112 SMBus Bridge on hidraw5\", MODE=\"0666\"' | sudo tee /etc/udev/rules.d/90-i2c-usb.rules\n</code></pre> check rule<pre><code>sudo udevadm control --reload\n# plug out/ in\n# check device permission\nll /dev/i2c-16\ncrw-rw-rw- 1 root i2c 89, 16 Nov  1 08:05 /dev/i2c-16\n#know we can run i2cdetect without sudo\ni2cdetect -y -r 16\n</code></pre>","tags":["i2c","cp2112","usb"]},{"location":"Robotics/sensors/imu/","title":"IMU","text":"","tags":["imu","robotics","sensors"]},{"location":"Robotics/sensors/imu/#to-read-and-watch","title":"To read and watch","text":"<ul> <li>madgwick_py: A Python implementation of Madgwick's IMU and AHRS algorithm.</li> <li>madgwick algorithm</li> <li>Kalman Filter for 6DOF IMU Implementation</li> </ul>","tags":["imu","robotics","sensors"]},{"location":"Robotics/slam/","title":"SLAM (Simultaneous Localization and Mapping)","text":"<p>SLAM (Simultaneous Localization and Mapping) is a technique used in robotics and computer vision to create a map of an unknown environment while simultaneously keeping track of the robot's location within that environment. It is a fundamental problem in robotics, particularly for autonomous vehicles, drones, and mobile robots. SLAM algorithms typically use sensor data (such as LiDAR, cameras, or IMU) to build a map of the environment and estimate the robot's position. The process involves two main components: 1. Mapping: Creating a representation of the environment, which can be a 2D or 3D map, depending on the application. 2. Localization: Determining the robot's position and orientation within the created map.</p>","tags":["robotics","slam","mapping","localization","navigation"]},{"location":"Robotics/slam/#key-concepts-in-slam","title":"Key Concepts in SLAM","text":"<ul> <li>Sensor Fusion: Combining data from multiple sensors to improve the accuracy and robustness of the SLAM system.</li> <li>Feature Extraction: Identifying and extracting key features from the sensor data that can be used for mapping and localization.</li> <li>Data Association: Matching observed features with previously mapped features to maintain consistency in the map and the robot's position.</li> <li>Loop Closure: Recognizing when the robot has returned to a previously visited location, which helps to correct drift in the map and improve accuracy.</li> <li>Graph-Based SLAM: A popular approach that represents the SLAM problem as a graph, where nodes represent poses (robot positions) and edges represent constraints (observations or measurements).</li> <li>Particle Filters: A probabilistic approach to SLAM that uses a set of particles to represent the robot's belief about its position and the map.</li> <li>Kalman Filters: A mathematical approach to estimate the state of a dynamic system, often used in SLAM for linear systems.</li> <li>Extended Kalman Filter (EKF): An extension of the Kalman filter that can handle non-linear systems, commonly used in SLAM.</li> <li>Visual SLAM (V-SLAM): A specific type of SLAM that uses visual data from cameras to perform mapping and localization.</li> <li>LiDAR SLAM: A type of SLAM that uses LiDAR sensors to create high-resolution maps of the environment.</li> </ul>","tags":["robotics","slam","mapping","localization","navigation"]},{"location":"Robotics/slam/#resources","title":"Resources","text":"<ul> <li>Claus Brenner SLAM lectures</li> <li>Overview of SLAM</li> <li>Implement SLAM from scratch</li> </ul>","tags":["robotics","slam","mapping","localization","navigation"]},{"location":"Robotics/uav/","title":"uXv","text":"<p>geometric control</p> <p>---</p> <p>---</p>","tags":["uav","ugv","ardupilot","mavlink"]},{"location":"Robotics/uav/geometric_control/","title":"Geometric Control of a Quadrotor UAV on SE(3)","text":"<ul> <li>geometric controller github</li> <li>uav simulator</li> <li>kv_mav_control</li> </ul>","tags":["geometric","controller","SE3","uav"]},{"location":"Simulation/","title":"Simulation","text":"<p>Gazebo Classic</p> <p>Gazebo Harmonic</p> <p>Gazebo ionic</p>"},{"location":"Simulation/#resources","title":"Resources","text":"<ul> <li>Gazebo meeting</li> </ul>"},{"location":"Simulation/Gazebo/","title":"Gazebo harmonic","text":"<p>VSCode dev</p> <p>SDF Format</p> <p>Custom plugins</p> <ul> <li>Tutorials</li> <li>ROS2 Bridge</li> <li>Sensors</li> <li>Plugins</li> </ul>","tags":["gazebo","gz","harmonic"]},{"location":"Simulation/Gazebo/#environment-variables","title":"Environment Variables","text":"<p>migration from ign</p> <p>IGNITION_GAZEBO -&gt; GZ_SIM</p> Name Description SIM GZ_SIM_RESOURCE_PATH GZ_SIM_SYSTEM_PLUGIN_PATH TRANSPORT GZ_TRANSPORT_IP GZ_DISCOVERY_SERVER GZ_PARTITION <p></p>","tags":["gazebo","gz","harmonic"]},{"location":"Simulation/Gazebo/custom_plugins/","title":"Gazebo harmonic custom plugin","text":"","tags":["harmonic","custom","plugin"]},{"location":"Simulation/Gazebo/plugins/","title":"Gazebo plugins","text":"","tags":["gazebo","harmonic","plugin"]},{"location":"Simulation/Gazebo/plugins/#diff-drive","title":"diff drive","text":"<p>source code</p>","tags":["gazebo","harmonic","plugin"]},{"location":"Simulation/Gazebo/plugins/#simple-gazebo-declaration","title":"simple gazebo declaration","text":"<pre><code>&lt;plugin name=\"gz::sim::systems::DiffDrive\" filename=\"gz-sim-diff-drive-system\"&gt;\n\n    &lt;left_joint&gt;wheel_left_joint&lt;/left_joint&gt;\n    &lt;right_joint&gt;wheel_right_joint&lt;/right_joint&gt;\n    &lt;wheel_separation&gt;${wheel_separation}&lt;/wheel_separation&gt;\n    &lt;wheel_radius&gt;0.033&lt;/wheel_radius&gt;\n\n\n    &lt;max_linear_acceleration&gt;0.33&lt;/max_linear_acceleration&gt;\n\n    &lt;topic&gt;cmd_vel&lt;/topic&gt;\n\n\n    &lt;frame_id&gt;odom&lt;/frame_id&gt;\n    &lt;child_frame_id&gt;base_link&lt;/child_frame_id&gt;\n    &lt;odom_topic&gt;odom&lt;/odom_topic&gt;\n    &lt;odom_publisher_frequency&gt;30&lt;/odom_publisher_frequency&gt;\n\n    &lt;tf_topic&gt;/tf&lt;/tf_topic&gt;\n\n  &lt;/plugin&gt;\n</code></pre> <p>moving robot tutorial</p> gz topic publish<pre><code>gz topic -t \"/cmd_vel\" -m gz.msgs.Twist -p \"linear: {x: 0.5}, angular: {z: 0.0}\"\n</code></pre>","tags":["gazebo","harmonic","plugin"]},{"location":"Simulation/Gazebo/sdf_format/","title":"SDF/ SDFormat","text":"<p>SDFormat (Simulation Description Format), sometimes abbreviated as SDF, is an XML format that describes objects and environments for robot simulators, visualization, and control more. </p>","tags":["sdf","gazebo"]},{"location":"Simulation/Gazebo/sensors/","title":"Sensors","text":"<ul> <li>Gazebo harmonic docs</li> <li>Gazebo sensor list</li> </ul> <ul> <li>Camera</li> <li>IMU</li> </ul>","tags":["gazebo","harmonic","sensors"]},{"location":"Simulation/Gazebo/sensors/camera/","title":"Camera Sensor","text":"<p>Don't forget</p> add sensor plugin to world<pre><code>&lt;plugin\n  filename=\"gz-sim-sensors-system\"\n  name=\"gz::sim::systems::Sensors\"&gt;\n  &lt;render_engine&gt;ogre2&lt;/render_engine&gt;\n&lt;/plugin&gt;\n</code></pre>","tags":["gazebo","harmonic","sensors","camera"]},{"location":"Simulation/Gazebo/sensors/camera/#rgb-camera","title":"RGB Camera","text":"<pre><code>&lt;sensor name=\"camera\" type=\"camera\"&gt;\n    &lt;pose&gt; 0 0 0 0 0 0 &lt;/pose&gt;\n    &lt;visualize&gt;true&lt;/visualize&gt;\n    &lt;update_rate&gt;10&lt;/update_rate&gt;\n    &lt;camera&gt;\n        &lt;camera_info_topic&gt;camera/camera_info&lt;/camera_info_topic&gt;\n        &lt;horizontal_fov&gt;1.089&lt;/horizontal_fov&gt;\n        &lt;image&gt;\n            &lt;format&gt;R8G8B8&lt;/format&gt;\n            &lt;width&gt;640&lt;/width&gt;\n            &lt;height&gt;480&lt;/height&gt;\n        &lt;/image&gt;\n        &lt;clip&gt;\n            &lt;near&gt;0.05&lt;/near&gt;\n            &lt;far&gt;8.0&lt;/far&gt;\n        &lt;/clip&gt;\n    &lt;/camera&gt;\n    &lt;topic&gt;camera/image_raw&lt;/topic&gt;\n    &lt;gz_frame_id&gt;camera_link_optical&lt;/gz_frame_id&gt;\n&lt;/sensor&gt;\n</code></pre>","tags":["gazebo","harmonic","sensors","camera"]},{"location":"Simulation/Gazebo/sensors/imu/","title":"IMU","text":"<ul> <li>Add imu plugin in to world scope</li> <li>Add Sensor to link</li> </ul> imu plugin<pre><code>&lt;plugin\n    filename=\"gz-sim-imu-system\"\n    name=\"gz::sim::systems::Imu\"&gt;\n&lt;/plugin&gt;\n</code></pre> imu sensor<pre><code>&lt;link&gt;\n    ...\n    &lt;sensor name=\"imu\" type=\"imu\"&gt;\n        &lt;always_on&gt;1&lt;/always_on&gt;\n        &lt;update_rate&gt;50&lt;/update_rate&gt;\n        &lt;visualize&gt;true&lt;/visualize&gt;\n        &lt;topic&gt;imu&lt;/topic&gt;\n    &lt;/sensor&gt;\n&lt;/link&gt;\n</code></pre>","tags":["gazebo","harmonic","sensors","imu"]},{"location":"Simulation/Gazebo/sensors/imu/#imu-sensor","title":"imu sensor","text":"<p>imu sensor</p> world with imu <pre><code>&lt;?xml version=\"1.0\"?&gt;\n&lt;sdf version=\"1.6\"&gt;\n  &lt;world name=\"default\"&gt;\n    &lt;physics name=\"1ms\" type=\"ignored\"&gt;\n      &lt;max_step_size&gt;0.001&lt;/max_step_size&gt;\n      &lt;real_time_factor&gt;1.0&lt;/real_time_factor&gt;\n    &lt;/physics&gt;\n    &lt;plugin\n      filename=\"gz-sim-physics-system\"\n      name=\"gz::sim::systems::Physics\"&gt;\n    &lt;/plugin&gt;\n    &lt;plugin\n      filename=\"gz-sim-user-commands-system\"\n      name=\"gz::sim::systems::UserCommands\"&gt;\n    &lt;/plugin&gt;\n    &lt;plugin\n      filename=\"gz-sim-scene-broadcaster-system\"\n      name=\"gz::sim::systems::SceneBroadcaster\"&gt;\n    &lt;/plugin&gt;\n    &lt;plugin\n      filename=\"gz-sim-contact-system\"\n      name=\"gz::sim::systems::Contact\"&gt;\n    &lt;/plugin&gt;\n    &lt;plugin\n      filename=\"gz-sim-imu-system\"\n      name=\"gz::sim::systems::Imu\"&gt;\n    &lt;/plugin&gt;\n\n    &lt;light type=\"directional\" name=\"sun\"&gt;\n      &lt;cast_shadows&gt;true&lt;/cast_shadows&gt;\n      &lt;pose&gt;0 0 10 0 0 0&lt;/pose&gt;\n      &lt;diffuse&gt;1 1 1 1&lt;/diffuse&gt;\n      &lt;specular&gt;0.5 0.5 0.5 1&lt;/specular&gt;\n      &lt;attenuation&gt;\n        &lt;range&gt;1000&lt;/range&gt;\n        &lt;constant&gt;0.9&lt;/constant&gt;\n        &lt;linear&gt;0.01&lt;/linear&gt;\n        &lt;quadratic&gt;0.001&lt;/quadratic&gt;\n      &lt;/attenuation&gt;\n      &lt;direction&gt;-0.5 0.1 -0.9&lt;/direction&gt;\n    &lt;/light&gt;\n\n    &lt;model name=\"ground_plane\"&gt;\n      &lt;static&gt;true&lt;/static&gt;\n      &lt;link name=\"link\"&gt;\n        &lt;collision name=\"collision\"&gt;\n          &lt;geometry&gt;\n            &lt;plane&gt;\n              &lt;normal&gt;0 0 1&lt;/normal&gt;\n              &lt;size&gt;100 100&lt;/size&gt;\n            &lt;/plane&gt;\n          &lt;/geometry&gt;\n        &lt;/collision&gt;\n        &lt;visual name=\"visual\"&gt;\n          &lt;geometry&gt;\n            &lt;plane&gt;\n              &lt;normal&gt;0 0 1&lt;/normal&gt;\n              &lt;size&gt;100 100&lt;/size&gt;\n            &lt;/plane&gt;\n          &lt;/geometry&gt;\n          &lt;material&gt;\n            &lt;ambient&gt;0.8 0.8 0.8 1&lt;/ambient&gt;\n            &lt;diffuse&gt;0.8 0.8 0.8 1&lt;/diffuse&gt;\n            &lt;specular&gt;0.8 0.8 0.8 1&lt;/specular&gt;\n          &lt;/material&gt;\n        &lt;/visual&gt;\n      &lt;/link&gt;\n    &lt;/model&gt;\n\n    &lt;model name=\"my_box\"&gt;\n      &lt;pose&gt;1 2 0.5 0 0 0&lt;/pose&gt; &lt;!-- x y z roll pitch yaw --&gt;\n      &lt;static&gt;false&lt;/static&gt;\n\n      &lt;link name=\"box_link\"&gt;\n        &lt;collision name=\"box_collision\"&gt;\n          &lt;geometry&gt;\n            &lt;box&gt;\n              &lt;size&gt;1 1 1&lt;/size&gt; &lt;!-- x y z dimensions --&gt;\n            &lt;/box&gt;\n          &lt;/geometry&gt;\n        &lt;/collision&gt;\n\n        &lt;visual name=\"box_visual\"&gt;\n          &lt;geometry&gt;\n            &lt;box&gt;\n              &lt;size&gt;1 1 1&lt;/size&gt;\n            &lt;/box&gt;\n          &lt;/geometry&gt;\n          &lt;material&gt;\n            &lt;ambient&gt;0.1 0.3 0.8 1&lt;/ambient&gt;\n            &lt;diffuse&gt;0.1 0.3 0.8 1&lt;/diffuse&gt;\n          &lt;/material&gt;\n        &lt;/visual&gt;\n\n        &lt;sensor name=\"imu\" type=\"imu\"&gt;\n          &lt;always_on&gt;1&lt;/always_on&gt;\n          &lt;update_rate&gt;50&lt;/update_rate&gt;\n          &lt;visualize&gt;true&lt;/visualize&gt;\n          &lt;topic&gt;imu&lt;/topic&gt;\n          &lt;enable_metrics&gt;true&lt;/enable_metrics&gt;\n        &lt;/sensor&gt;\n      &lt;/link&gt;\n\n    &lt;/model&gt;\n  &lt;/world&gt;\n&lt;/sdf&gt;\n</code></pre>","tags":["gazebo","harmonic","sensors","imu"]},{"location":"Simulation/Gazebo/tutorials/","title":"Gazebo Harmonic Tutorials","text":"<ul> <li>empty world</li> <li>joint controllers</li> <li>read IMU data</li> </ul>","tags":["gazebo","simulation","tutorials"]},{"location":"Simulation/Gazebo/tutorials/control_entity_position/","title":"Control element position using set_pose service","text":"<pre><code> gz topic -e -t /world/my_world/pose/info\n</code></pre> <pre><code>gz service --timeout 10000 -s /world/my_world/set_pose \\\n--reptype gz.msgs.Boolean \\\n--reqtype gz.msgs.Pose \\\n--req 'name: \"green_simple_box\" position {\n  x: 5\n  y: 0\n  z: 0.5\n}'\n</code></pre> <pre><code>ros2 interface show ros_gz_interfaces/srv/SetEntityPose \n</code></pre> run bridge for service<pre><code># gz name: /world/my_world/set_pose\n# ros2 service: ros_gz_interfaces/srv/SetEntityPose\nros2 run ros_gz_bridge parameter_bridge /world/my_world/set_pose@ros_gz_interfaces/srv/SetEntityPose\n</code></pre> call service from ROS<pre><code>ros2 service call /world/my_world/set_pose ros_gz_interfaces/srv/SetEntityPose \\\n\"{entity: {name: 'green_simple_box'}, \\\npose: {position: {x: 10.0, y: 0.0, z: 0.5}, \norientation: {x: 0.0, y: 0.0, z: 0.0, w: 1.0}}}\"\n</code></pre> call service from ROS<pre><code>ros2 service call /world/my_world/set_pose ros_gz_interfaces/srv/SetEntityPose \\\n\"{entity: {name: 'green_simple_box'}, \\\npose: {position: {x: 5.0} \n}}\"\n</code></pre>","tags":["gazebo","service","topics","position","set_pose","ros_gz_interfaces"]},{"location":"Simulation/Gazebo/tutorials/empty_world/","title":"Gazebo empty world in details","text":"empty_world.sdf <pre><code>&lt;?xml version=\"1.0\"?&gt;\n&lt;sdf version=\"1.6\"&gt;\n  &lt;world name=\"default\"&gt;\n    &lt;physics name=\"1ms\" type=\"ignored\"&gt;\n      &lt;max_step_size&gt;0.001&lt;/max_step_size&gt;\n      &lt;real_time_factor&gt;1.0&lt;/real_time_factor&gt;\n    &lt;/physics&gt;\n    &lt;plugin\n      filename=\"gz-sim-physics-system\"\n      name=\"gz::sim::systems::Physics\"&gt;\n    &lt;/plugin&gt;\n    &lt;plugin\n      filename=\"gz-sim-user-commands-system\"\n      name=\"gz::sim::systems::UserCommands\"&gt;\n    &lt;/plugin&gt;\n    &lt;plugin\n      filename=\"gz-sim-scene-broadcaster-system\"\n      name=\"gz::sim::systems::SceneBroadcaster\"&gt;\n    &lt;/plugin&gt;\n    &lt;plugin\n      filename=\"gz-sim-contact-system\"\n      name=\"gz::sim::systems::Contact\"&gt;\n    &lt;/plugin&gt;\n\n    &lt;light type=\"directional\" name=\"sun\"&gt;\n      &lt;cast_shadows&gt;true&lt;/cast_shadows&gt;\n      &lt;pose&gt;0 0 10 0 0 0&lt;/pose&gt;\n      &lt;diffuse&gt;1 1 1 1&lt;/diffuse&gt;\n      &lt;specular&gt;0.5 0.5 0.5 1&lt;/specular&gt;\n      &lt;attenuation&gt;\n        &lt;range&gt;1000&lt;/range&gt;\n        &lt;constant&gt;0.9&lt;/constant&gt;\n        &lt;linear&gt;0.01&lt;/linear&gt;\n        &lt;quadratic&gt;0.001&lt;/quadratic&gt;\n      &lt;/attenuation&gt;\n      &lt;direction&gt;-0.5 0.1 -0.9&lt;/direction&gt;\n    &lt;/light&gt;\n\n    &lt;model name=\"ground_plane\"&gt;\n      &lt;static&gt;true&lt;/static&gt;\n      &lt;link name=\"link\"&gt;\n        &lt;collision name=\"collision\"&gt;\n          &lt;geometry&gt;\n            &lt;plane&gt;\n              &lt;normal&gt;0 0 1&lt;/normal&gt;\n              &lt;size&gt;100 100&lt;/size&gt;\n            &lt;/plane&gt;\n          &lt;/geometry&gt;\n        &lt;/collision&gt;\n        &lt;visual name=\"visual\"&gt;\n          &lt;geometry&gt;\n            &lt;plane&gt;\n              &lt;normal&gt;0 0 1&lt;/normal&gt;\n              &lt;size&gt;100 100&lt;/size&gt;\n            &lt;/plane&gt;\n          &lt;/geometry&gt;\n          &lt;material&gt;\n            &lt;ambient&gt;0.8 0.8 0.8 1&lt;/ambient&gt;\n            &lt;diffuse&gt;0.8 0.8 0.8 1&lt;/diffuse&gt;\n            &lt;specular&gt;0.8 0.8 0.8 1&lt;/specular&gt;\n          &lt;/material&gt;\n        &lt;/visual&gt;\n      &lt;/link&gt;\n    &lt;/model&gt;\n\n  &lt;/world&gt;\n&lt;/sdf&gt;\n</code></pre>","tags":["gazebo","harmonic","worlds","empty"]},{"location":"Simulation/Gazebo/tutorials/joint_control/","title":"Gazebo Joint Control","text":"<p>joint controllers from gazebo sim  api reference tutorials</p> <p>Gazebo provides three joint controller plugins which are JointController, JointPositionController, and JointTrajectoryController.</p>","tags":["gazebo","joint","control"]},{"location":"Simulation/Gazebo/tutorials/joint_control/#jointcontroller","title":"JointController","text":"<ul> <li>Velocity mode: This mode lets the user control the desired joint velocity directly.</li> <li>Force mode: A user who wants to control joint velocity using a PID controller can use this mode.</li> </ul> <p>All the parameters related to this controller can be found here.</p>","tags":["gazebo","joint","control"]},{"location":"Simulation/Gazebo/tutorials/joint_control/#velocity-mode","title":"Velocity mode","text":"joint velocity with initial velocity and topic<pre><code>&lt;plugin\n filename=\"gz-sim-joint-controller-system\"\n name=\"gz::sim::systems::JointController\"&gt;\n &lt;joint_name&gt;j1&lt;/joint_name&gt;\n &lt;initial_velocity&gt;1.0&lt;/initial_velocity&gt;\n &lt;topic&gt;velocity_topic&lt;/topic&gt;\n&lt;/plugin&gt;\n</code></pre> control velocity speed<pre><code>gz topic -t \"/topic_name\" -m gz.msgs.Double -p \"data: 10.0\"\n</code></pre>","tags":["gazebo","joint","control"]},{"location":"Simulation/Gazebo/tutorials/joint_control/#force-mode","title":"Force mode","text":"joint force mode<pre><code>&lt;plugin\n filename=\"gz-sim-joint-controller-system\"\n name=\"gz::sim::systems::JointController\"&gt;\n &lt;joint_name&gt;j1&lt;/joint_name&gt;\n &lt;use_force_commands&gt;true&lt;/use_force_commands&gt;\n &lt;p_gain&gt;0.2&lt;/p_gain&gt;\n &lt;i_gain&gt;0.01&lt;/i_gain&gt;\n&lt;/plugin&gt;\n</code></pre> <p>joint state</p> <pre><code>&lt;plugin\n    filename=\"gz-sim-joint-state-publisher-system\"\n    name=\"gz::sim::systems::JointStatePublisher\"&gt;\n    &lt;joint_name&gt;j1&lt;/joint_name&gt;\n    &lt;topic&gt;force_topic&lt;/topic&gt;\n&lt;/plugin&gt;\n</code></pre> echo joint state<pre><code>gz topic -e -t /world/default/model/joint_controller_demo/joint_state\n</code></pre>","tags":["gazebo","joint","control"]},{"location":"Simulation/Gazebo/tutorials/joint_control/#demo","title":"Demo","text":"world demo <pre><code>&lt;?xml version=\"1.0\"?&gt;\n&lt;sdf version=\"1.6\"&gt;\n    &lt;world name=\"default\"&gt;\n        &lt;light type=\"directional\" name=\"sun\"&gt;\n            &lt;cast_shadows&gt;true&lt;/cast_shadows&gt;\n            &lt;pose&gt;0 0 10 0 0 0&lt;/pose&gt;\n            &lt;diffuse&gt;1 1 1 1&lt;/diffuse&gt;\n            &lt;specular&gt;0.5 0.5 0.5 1&lt;/specular&gt;\n            &lt;attenuation&gt;\n                &lt;range&gt;1000&lt;/range&gt;\n                &lt;constant&gt;0.9&lt;/constant&gt;\n                &lt;linear&gt;0.01&lt;/linear&gt;\n                &lt;quadratic&gt;0.001&lt;/quadratic&gt;\n            &lt;/attenuation&gt;\n            &lt;direction&gt;-0.5 0.1 -0.9&lt;/direction&gt;\n        &lt;/light&gt;\n        &lt;model name=\"joint_controller_velocity\"&gt;\n            &lt;pose&gt;0 1 0 0 0 0&lt;/pose&gt;\n            &lt;link name=\"base_link\"&gt;\n                &lt;pose&gt;0.0 0.0 0.0 0 0 0&lt;/pose&gt;\n                &lt;inertial&gt;\n                    &lt;inertia&gt;\n                        &lt;ixx&gt;2.501&lt;/ixx&gt;\n                        &lt;ixy&gt;0&lt;/ixy&gt;\n                        &lt;ixz&gt;0&lt;/ixz&gt;\n                        &lt;iyy&gt;2.501&lt;/iyy&gt;\n                        &lt;iyz&gt;0&lt;/iyz&gt;\n                        &lt;izz&gt;5&lt;/izz&gt;\n                    &lt;/inertia&gt;\n                    &lt;mass&gt;120.0&lt;/mass&gt;\n                &lt;/inertial&gt;\n                &lt;visual name=\"base_visual\"&gt;\n                    &lt;pose&gt;0.0 0.0 0.0 0 0 0&lt;/pose&gt;\n                    &lt;geometry&gt;\n                        &lt;box&gt;\n                            &lt;size&gt;0.5 0.5 0.01&lt;/size&gt;\n                        &lt;/box&gt;\n                    &lt;/geometry&gt;\n                &lt;/visual&gt;\n                &lt;collision name=\"base_collision\"&gt;\n                    &lt;pose&gt;0.0 0.0 0.0 0 0 0&lt;/pose&gt;\n                    &lt;geometry&gt;\n                        &lt;box&gt;\n                            &lt;size&gt;0.5 0.5 0.01&lt;/size&gt;\n                        &lt;/box&gt;\n                    &lt;/geometry&gt;\n                &lt;/collision&gt;\n            &lt;/link&gt;\n            &lt;link name=\"rotor\"&gt;\n                &lt;pose&gt;0.0 0.0 0.1 0 0 0&lt;/pose&gt;\n                &lt;inertial&gt;\n                    &lt;inertia&gt;\n                        &lt;ixx&gt;0.032&lt;/ixx&gt;\n                        &lt;ixy&gt;0&lt;/ixy&gt;\n                        &lt;ixz&gt;0&lt;/ixz&gt;\n                        &lt;iyy&gt;0.032&lt;/iyy&gt;\n                        &lt;iyz&gt;0&lt;/iyz&gt;\n                        &lt;izz&gt;0.00012&lt;/izz&gt;\n                    &lt;/inertia&gt;\n                    &lt;mass&gt;0.6&lt;/mass&gt;\n                &lt;/inertial&gt;\n                &lt;visual name=\"visual\"&gt;\n                    &lt;geometry&gt;\n                        &lt;box&gt;\n                            &lt;size&gt;0.25 0.1 0.05&lt;/size&gt;\n                        &lt;/box&gt;\n                    &lt;/geometry&gt;\n                    &lt;material&gt;\n                        &lt;ambient&gt;0.2 0.8 0.2 1&lt;/ambient&gt;\n                        &lt;diffuse&gt;0.8 0 0 1&lt;/diffuse&gt;\n                    &lt;/material&gt;\n                &lt;/visual&gt;\n                &lt;collision name=\"collision\"&gt;\n                    &lt;geometry&gt;\n                        &lt;box&gt;\n                            &lt;size&gt;0.25 0.1 0.05&lt;/size&gt;\n                        &lt;/box&gt;\n                    &lt;/geometry&gt;\n                &lt;/collision&gt;\n            &lt;/link&gt;\n\n            &lt;joint name=\"world_fixed\" type=\"fixed\"&gt;\n                &lt;parent&gt;world&lt;/parent&gt;\n                &lt;child&gt;base_link&lt;/child&gt;\n            &lt;/joint&gt;\n\n            &lt;joint name=\"j1\" type=\"revolute\"&gt;\n                &lt;pose&gt;0 0 -0.5 0 0 0&lt;/pose&gt;\n                &lt;parent&gt;base_link&lt;/parent&gt;\n                &lt;child&gt;rotor&lt;/child&gt;\n                &lt;axis&gt;\n                    &lt;xyz&gt;0 0 1&lt;/xyz&gt;\n                &lt;/axis&gt;\n            &lt;/joint&gt;\n\n            &lt;plugin\n                filename=\"gz-sim-joint-controller-system\"\n                name=\"gz::sim::systems::JointController\"&gt;\n                &lt;joint_name&gt;j1&lt;/joint_name&gt;\n                &lt;initial_velocity&gt;1.0&lt;/initial_velocity&gt;\n                &lt;topic&gt;velocity_topic&lt;/topic&gt;\n            &lt;/plugin&gt;\n            &lt;plugin\n                filename=\"gz-sim-joint-state-publisher-system\"\n                name=\"gz::sim::systems::JointStatePublisher\"&gt;\n                &lt;joint_name&gt;j1&lt;/joint_name&gt;\n                &lt;topic&gt;velocity_j1_state&lt;/topic&gt;\n            &lt;/plugin&gt;\n        &lt;/model&gt;\n\n        &lt;model name=\"joint_controller_force\"&gt;\n            &lt;pose&gt;0 0 0 0 0 0&lt;/pose&gt;\n            &lt;link name=\"base_link\"&gt;\n                &lt;pose&gt;0.0 0.0 0.0 0 0 0&lt;/pose&gt;\n                &lt;inertial&gt;\n                    &lt;inertia&gt;\n                        &lt;ixx&gt;2.501&lt;/ixx&gt;\n                        &lt;ixy&gt;0&lt;/ixy&gt;\n                        &lt;ixz&gt;0&lt;/ixz&gt;\n                        &lt;iyy&gt;2.501&lt;/iyy&gt;\n                        &lt;iyz&gt;0&lt;/iyz&gt;\n                        &lt;izz&gt;5&lt;/izz&gt;\n                    &lt;/inertia&gt;\n                    &lt;mass&gt;120.0&lt;/mass&gt;\n                &lt;/inertial&gt;\n                &lt;visual name=\"base_visual\"&gt;\n                    &lt;pose&gt;0.0 0.0 0.0 0 0 0&lt;/pose&gt;\n                    &lt;geometry&gt;\n                        &lt;box&gt;\n                            &lt;size&gt;0.5 0.5 0.01&lt;/size&gt;\n                        &lt;/box&gt;\n                    &lt;/geometry&gt;\n                &lt;/visual&gt;\n                &lt;collision name=\"base_collision\"&gt;\n                    &lt;pose&gt;0.0 0.0 0.0 0 0 0&lt;/pose&gt;\n                    &lt;geometry&gt;\n                        &lt;box&gt;\n                            &lt;size&gt;0.5 0.5 0.01&lt;/size&gt;\n                        &lt;/box&gt;\n                    &lt;/geometry&gt;\n                &lt;/collision&gt;\n            &lt;/link&gt;\n            &lt;link name=\"rotor\"&gt;\n                &lt;pose&gt;0.0 0.0 0.1 0 0 0&lt;/pose&gt;\n                &lt;inertial&gt;\n                    &lt;inertia&gt;\n                        &lt;ixx&gt;0.032&lt;/ixx&gt;\n                        &lt;ixy&gt;0&lt;/ixy&gt;\n                        &lt;ixz&gt;0&lt;/ixz&gt;\n                        &lt;iyy&gt;0.032&lt;/iyy&gt;\n                        &lt;iyz&gt;0&lt;/iyz&gt;\n                        &lt;izz&gt;0.00012&lt;/izz&gt;\n                    &lt;/inertia&gt;\n                    &lt;mass&gt;0.6&lt;/mass&gt;\n                &lt;/inertial&gt;\n                &lt;visual name=\"visual\"&gt;\n                    &lt;geometry&gt;\n                        &lt;box&gt;\n                            &lt;size&gt;0.25 0.1 0.05&lt;/size&gt;\n                        &lt;/box&gt;\n                    &lt;/geometry&gt;\n                    &lt;material&gt;\n                        &lt;ambient&gt;0.2 0.8 0.2 1&lt;/ambient&gt;\n                        &lt;diffuse&gt;0.8 0 0 1&lt;/diffuse&gt;\n                    &lt;/material&gt;\n                &lt;/visual&gt;\n                &lt;collision name=\"collision\"&gt;\n                    &lt;geometry&gt;\n                        &lt;box&gt;\n                            &lt;size&gt;0.25 0.1 0.05&lt;/size&gt;\n                        &lt;/box&gt;\n                    &lt;/geometry&gt;\n                &lt;/collision&gt;\n            &lt;/link&gt;\n\n            &lt;joint name=\"world_fixed\" type=\"fixed\"&gt;\n                &lt;parent&gt;world&lt;/parent&gt;\n                &lt;child&gt;base_link&lt;/child&gt;\n            &lt;/joint&gt;\n\n            &lt;joint name=\"j1\" type=\"revolute\"&gt;\n                &lt;pose&gt;0 0 -0.5 0 0 0&lt;/pose&gt;\n                &lt;parent&gt;base_link&lt;/parent&gt;\n                &lt;child&gt;rotor&lt;/child&gt;\n                &lt;axis&gt;\n                    &lt;xyz&gt;0 0 1&lt;/xyz&gt;\n                &lt;/axis&gt;\n            &lt;/joint&gt;\n\n            &lt;plugin\n                filename=\"gz-sim-joint-controller-system\"\n                name=\"gz::sim::systems::JointController\"&gt;\n                &lt;joint_name&gt;j1&lt;/joint_name&gt;\n                &lt;use_force_commands&gt;true&lt;/use_force_commands&gt;\n                &lt;topic&gt;force_topic&lt;/topic&gt;\n                &lt;p_gain&gt;0.2&lt;/p_gain&gt;\n                &lt;i_gain&gt;0.01&lt;/i_gain&gt;\n            &lt;/plugin&gt;\n            &lt;plugin\n                filename=\"gz-sim-joint-state-publisher-system\"\n                name=\"gz::sim::systems::JointStatePublisher\"&gt;\n                &lt;joint_name&gt;j1&lt;/joint_name&gt;\n                &lt;topic&gt;force_j1_state&lt;/topic&gt;\n            &lt;/plugin&gt;\n        &lt;/model&gt;\n    &lt;/world&gt;\n&lt;/sdf&gt;\n</code></pre> command and state topics<pre><code>gz topic --list\n#\n/clock\n/force_j1_state\n/gazebo/resource_paths\n/gui/camera/pose\n/gui/currently_tracked\n/gui/track\n/stats\n/velocity_j1_state\n...\n/force_topic\n/velocity_topic\n</code></pre> publish velocity to force controller<pre><code>gz topic -t \"/force_topic\" -m gz.msgs.Double -p \"data: 10.0\"\n</code></pre>","tags":["gazebo","joint","control"]},{"location":"Simulation/Gazebo/tutorials/read_imu_data/","title":"Read IMU Data from Gazebo harmonic","text":"","tags":["gazebo","gz_transport","gz_msgs","harmonic"]},{"location":"Simulation/Gazebo/tutorials/read_imu_data/#prerequisites","title":"prerequisites","text":"<pre><code>sudo apt install build-essential\nsudo apt install \\\n    libgz-transport12-dev\n    libgz-msgs10-dev\n    libgz-tools-dev\n    libgz-common5-dev\n    libgz-math7-dev\n</code></pre> world with IMU <pre><code>&lt;?xml version=\"1.0\"?&gt;\n&lt;sdf version=\"1.6\"&gt;\n  &lt;world name=\"default\"&gt;\n    &lt;physics name=\"1ms\" type=\"ignored\"&gt;\n      &lt;max_step_size&gt;0.001&lt;/max_step_size&gt;\n      &lt;real_time_factor&gt;1.0&lt;/real_time_factor&gt;\n    &lt;/physics&gt;\n    &lt;plugin\n      filename=\"gz-sim-physics-system\"\n      name=\"gz::sim::systems::Physics\"&gt;\n    &lt;/plugin&gt;\n    &lt;plugin\n      filename=\"gz-sim-user-commands-system\"\n      name=\"gz::sim::systems::UserCommands\"&gt;\n    &lt;/plugin&gt;\n    &lt;plugin\n      filename=\"gz-sim-scene-broadcaster-system\"\n      name=\"gz::sim::systems::SceneBroadcaster\"&gt;\n    &lt;/plugin&gt;\n    &lt;plugin\n      filename=\"gz-sim-contact-system\"\n      name=\"gz::sim::systems::Contact\"&gt;\n    &lt;/plugin&gt;\n    &lt;plugin\n      filename=\"gz-sim-imu-system\"\n      name=\"gz::sim::systems::Imu\"&gt;\n    &lt;/plugin&gt;\n\n    &lt;light type=\"directional\" name=\"sun\"&gt;\n      &lt;cast_shadows&gt;true&lt;/cast_shadows&gt;\n      &lt;pose&gt;0 0 10 0 0 0&lt;/pose&gt;\n      &lt;diffuse&gt;1 1 1 1&lt;/diffuse&gt;\n      &lt;specular&gt;0.5 0.5 0.5 1&lt;/specular&gt;\n      &lt;attenuation&gt;\n        &lt;range&gt;1000&lt;/range&gt;\n        &lt;constant&gt;0.9&lt;/constant&gt;\n        &lt;linear&gt;0.01&lt;/linear&gt;\n        &lt;quadratic&gt;0.001&lt;/quadratic&gt;\n      &lt;/attenuation&gt;\n      &lt;direction&gt;-0.5 0.1 -0.9&lt;/direction&gt;\n    &lt;/light&gt;\n\n    &lt;model name=\"ground_plane\"&gt;\n      &lt;static&gt;true&lt;/static&gt;\n      &lt;link name=\"link\"&gt;\n        &lt;collision name=\"collision\"&gt;\n          &lt;geometry&gt;\n            &lt;plane&gt;\n              &lt;normal&gt;0 0 1&lt;/normal&gt;\n              &lt;size&gt;100 100&lt;/size&gt;\n            &lt;/plane&gt;\n          &lt;/geometry&gt;\n        &lt;/collision&gt;\n        &lt;visual name=\"visual\"&gt;\n          &lt;geometry&gt;\n            &lt;plane&gt;\n              &lt;normal&gt;0 0 1&lt;/normal&gt;\n              &lt;size&gt;100 100&lt;/size&gt;\n            &lt;/plane&gt;\n          &lt;/geometry&gt;\n          &lt;material&gt;\n            &lt;ambient&gt;0.8 0.8 0.8 1&lt;/ambient&gt;\n            &lt;diffuse&gt;0.8 0.8 0.8 1&lt;/diffuse&gt;\n            &lt;specular&gt;0.8 0.8 0.8 1&lt;/specular&gt;\n          &lt;/material&gt;\n        &lt;/visual&gt;\n      &lt;/link&gt;\n    &lt;/model&gt;\n\n    &lt;model name=\"my_box\"&gt;\n      &lt;pose&gt;1 2 0.5 0 0 0&lt;/pose&gt; &lt;!-- x y z roll pitch yaw --&gt;\n      &lt;static&gt;false&lt;/static&gt;\n\n      &lt;link name=\"box_link\"&gt;\n        &lt;collision name=\"box_collision\"&gt;\n          &lt;geometry&gt;\n            &lt;box&gt;\n              &lt;size&gt;1 1 1&lt;/size&gt; &lt;!-- x y z dimensions --&gt;\n            &lt;/box&gt;\n          &lt;/geometry&gt;\n        &lt;/collision&gt;\n\n        &lt;visual name=\"box_visual\"&gt;\n          &lt;geometry&gt;\n            &lt;box&gt;\n              &lt;size&gt;1 1 1&lt;/size&gt;\n            &lt;/box&gt;\n          &lt;/geometry&gt;\n          &lt;material&gt;\n            &lt;ambient&gt;0.1 0.3 0.8 1&lt;/ambient&gt;\n            &lt;diffuse&gt;0.1 0.3 0.8 1&lt;/diffuse&gt;\n          &lt;/material&gt;\n        &lt;/visual&gt;\n\n        &lt;sensor name=\"imu\" type=\"imu\"&gt;\n          &lt;always_on&gt;1&lt;/always_on&gt;\n          &lt;update_rate&gt;50&lt;/update_rate&gt;\n          &lt;visualize&gt;true&lt;/visualize&gt;\n          &lt;topic&gt;imu&lt;/topic&gt;\n          &lt;enable_metrics&gt;true&lt;/enable_metrics&gt;\n        &lt;/sensor&gt;\n      &lt;/link&gt;\n\n    &lt;/model&gt;\n  &lt;/world&gt;\n&lt;/sdf&gt;\n</code></pre> read_imu.cpp<pre><code>#include &lt;gz/transport.hh&gt;\n#include &lt;gz/msgs.hh&gt;\n#include &lt;iostream&gt;\n\nvoid imuCallback(const gz::msgs::IMU &amp;msg)\n{\n  std::cout &lt;&lt; \"IMU Data:\" &lt;&lt; std::endl;\n  std::cout &lt;&lt; \"  Linear Accel: \"\n            &lt;&lt; msg.linear_acceleration().x() &lt;&lt; \", \"\n            &lt;&lt; msg.linear_acceleration().y() &lt;&lt; \", \"\n            &lt;&lt; msg.linear_acceleration().z() &lt;&lt; std::endl;\n\n  // std::cout &lt;&lt; \"  Angular Vel: \"\n  //           &lt;&lt; msg.angular_velocity().x() &lt;&lt; \", \"\n  //           &lt;&lt; msg.angular_velocity().y() &lt;&lt; \", \"\n  //           &lt;&lt; msg.angular_velocity().z() &lt;&lt; std::endl;\n}\n\nint main()\n{\n  gz::transport::Node node;\n\n  std::string topic = \"/imu\";\n  if (!node.Subscribe(topic, imuCallback))\n  {\n    std::cerr &lt;&lt; \"Failed to subscribe to topic: \" &lt;&lt; topic &lt;&lt; std::endl;\n    return -1;\n  }\n\n  std::cout &lt;&lt; \"Listening to IMU data on: \" &lt;&lt; topic &lt;&lt; std::endl;\n  gz::transport::waitForShutdown();\n  return 0;\n}\n</code></pre> CMakeLists.txt<pre><code>cmake_minimum_required(VERSION 3.22)\nproject(imu_subscriber)\n\n# Find Gazebo dependencies\nfind_package(gz-transport12 REQUIRED)\nfind_package(gz-msgs10 REQUIRED)\n\n\n# Add executable\nadd_executable(read_imu read_imu.cpp)\ntarget_link_libraries(read_imu\n    gz-transport12::gz-transport12\n    ${GZ-MSGS_LIBRARIES}\n)\n</code></pre>","tags":["gazebo","gz_transport","gz_msgs","harmonic"]},{"location":"Simulation/Gazebo/vscode/","title":"Run gazebo harmonic on docker","text":"<p>Build a docker container base on cuda runtime and ubuntu 22.04 to run Gazebo harmonic simulation. The dockerfile base on Allison Thackston</p> <p>Use vscode devcontainer to run the docker image. using docker compose. vscode devcontainer</p>","tags":["gazebo","gz","harmonic","docker","vscode"]},{"location":"Simulation/Gazebo/vscode/#prerequisites","title":"Prerequisites","text":"<ul> <li>Check nvidia version using <code>nvidia-smi</code></li> <li>Pull the cuda runtime</li> <li>Install nvidia-container-toolkit more</li> </ul> pull cuda runtime<pre><code># my current cuda version is 12.4\ndocker pull nvidia/cuda:12.4.0-runtime-ubuntu22.04\ndocker run --gps all -it --rm  nvidia/cuda:12.4.0-runtime-ubuntu22.04 /bin/bash\n# from docker \nnvida-smi\n</code></pre>","tags":["gazebo","gz","harmonic","docker","vscode"]},{"location":"Simulation/Gazebo/vscode/#dockerfile","title":"Dockerfile","text":"Docker file <pre><code>FROM nvidia/cuda:12.4.0-runtime-ubuntu22.04 AS base\n\n# Avoid warnings by switching to noninteractive\nENV DEBIAN_FRONTEND=noninteractive\n\n# Install language\nRUN apt-get update &amp;&amp; apt-get install -y --no-install-recommends \\\n  locales \\\n  &amp;&amp; locale-gen en_US.UTF-8 \\\n  &amp;&amp; update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8 \\\n  &amp;&amp; rm -rf /var/lib/apt/lists/*\nENV LANG=en_US.UTF-8\n\n# Install timezone\nRUN ln -fs /usr/share/zoneinfo/UTC /etc/localtime \\\n  &amp;&amp; export DEBIAN_FRONTEND=noninteractive \\\n  &amp;&amp; apt-get update \\\n  &amp;&amp; apt-get install -y --no-install-recommends tzdata \\\n  &amp;&amp; dpkg-reconfigure --frontend noninteractive tzdata \\\n  &amp;&amp; rm -rf /var/lib/apt/lists/*\n\n# install packages\nRUN apt-get update &amp;&amp; apt-get install -q -y \\\n    curl \\\n    gnupg \\\n    lsb-release \\\n    python3-argcomplete \\\n    sudo \\\n    wget \\\n  &amp;&amp; wget https://packages.osrfoundation.org/gazebo.gpg -O /usr/share/keyrings/pkgs-osrf-archive-keyring.gpg \\\n  &amp;&amp; echo \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/pkgs-osrf-archive-keyring.gpg] http://packages.osrfoundation.org/gazebo/ubuntu-stable $(lsb_release -cs) main\" | tee /etc/apt/sources.list.d/gazebo-stable.list &gt; /dev/null \\\n  &amp;&amp; apt-get update &amp;&amp; apt-get install -y -q \\\n    gz-harmonic \\\n  &amp;&amp; rm -rf /var/lib/apt/lists/*\n\n################\n# Expose the nvidia driver to allow opengl\n# Dependencies for glvnd and X11.\n################\nRUN apt-get update \\\n &amp;&amp; apt-get install -y -qq --no-install-recommends \\\n  libglvnd0 \\\n  libgl1 \\\n  libglx0 \\\n  libegl1 \\\n  libxext6 \\\n  libx11-6\n\n# Env vars for the nvidia-container-runtime.\nENV NVIDIA_VISIBLE_DEVICES=all\nENV NVIDIA_DRIVER_CAPABILITIES=graphics,utility,compute\nENV QT_X11_NO_MITSHM=1\n\nARG USERNAME=user\nARG USER_UID=1000\nARG USER_GID=$USER_UID\n\n# Check if \"ubuntu\" user exists, delete it if it does, then create the desired user\nRUN if getent passwd ubuntu &gt; /dev/null 2&gt;&amp;1; then \\\n        userdel -r ubuntu &amp;&amp; \\\n        echo \"Deleted existing ubuntu user\"; \\\n    fi &amp;&amp; \\\n    groupadd --gid $USER_GID $USERNAME &amp;&amp; \\\n    useradd -s /bin/bash --uid $USER_UID --gid $USER_GID -m $USERNAME &amp;&amp; \\\n    echo \"Created new user $USERNAME\"\n\n# Add sudo support for the non-root user\nRUN apt-get update &amp;&amp; apt-get install -y sudo \\\n  &amp;&amp; echo $USERNAME ALL=\\(root\\) NOPASSWD:ALL &gt; /etc/sudoers.d/$USERNAME\\\n  &amp;&amp; chmod 0440 /etc/sudoers.d/$USERNAME \\\n  &amp;&amp; rm -rf /var/lib/apt/lists/*\n\nCMD [\"bash\"]\n</code></pre> <p>Docker environment variables</p> <ul> <li>QT_X11_NO_MITSHM=1 is used to disable the MIT-SHM extension for X11, which can cause issues with some applications running in Docker containers.</li> <li>NVIDIA_DRIVER_CAPABILITIES=graphics,utility,compute is used to specify the capabilities of the NVIDIA driver that should be exposed to the container. This is important for GPU-accelerated applications.</li> <li>NVIDIA_VISIBLE_DEVICES=all is used to make all NVIDIA GPUs visible to the container. This is important for GPU-accelerated applications that need access to the GPU.</li> </ul>","tags":["gazebo","gz","harmonic","docker","vscode"]},{"location":"Simulation/Gazebo/vscode/#build-the-image","title":"Build the image","text":"<pre><code>docker build -t gz:harmonic .\n</code></pre>","tags":["gazebo","gz","harmonic","docker","vscode"]},{"location":"Simulation/Gazebo/vscode/#run-the-image","title":"Run the image","text":"<pre><code>xhost +local:docker\n\ndocker run --gpus all -it --rm \\\n--name gz \\\n--hostname gz \\\n--user user \\\n--network host \\\n--env=\"QT_X11_NO_MITSHM=1\"  \\\n--env=\"DISPLAY\"  \\\n-v /tmp/.X11-unix:/tmp/.X11-unix:rw \\\n-v /dev/dri:/dev/dri \\\n-v /dev/nvidia0:/dev/nvidia0 \\\n-v /dev/nvidiactl:/dev/nvidiactl \\\n-v /dev/nvidia-modeset:/dev/nvidia-modeset \\\ngz:harmonic\n</code></pre>","tags":["gazebo","gz","harmonic","docker","vscode"]},{"location":"Simulation/Gazebo/vscode/#use-vscode-and-docker","title":"Use VSCode and docker","text":"<ul> <li>Using docker-compose</li> <li>Using devcontainer to run the docker compose</li> </ul> <pre><code>\u251c\u2500\u2500 .devcontainer\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 devcontainer.json\n\u251c\u2500\u2500 docker-compose.yaml\n\u251c\u2500\u2500 .gitignore\n\u2514\u2500\u2500 gz_tutorial\n    \u2514\u2500\u2500 worlds\n        \u2514\u2500\u2500 empty.world\n</code></pre> docker-compose.yaml<pre><code>services:\n  gazebo:\n    image: gz:harmonic\n    network_mode: host\n    user: user\n    stdin_open: true\n    tty: true\n    hostname: gz\n    environment:\n      - DISPLAY=${DISPLAY}\n      - QT_X11_NO_MITSHM=1\n      - NVIDIA_VISIBLE_DEVICES=all\n      - NVIDIA_DRIVER_CAPABILITIES=all\n      - GZ_TRANSPORT_IP=gazebo\n      - GZ_DISCOVERY_SERVER=gazebo\n      - GZ_PARTITION=my_simulation\n    volumes:\n      - .:/workspace:cached\n      - ./.gz:/home/user/.gz:cached\n      - /tmp/.X11-unix:/tmp/.X11-unix:rw \n      - /dev/dri:/dev/dri \n      - /dev/nvidia0:/dev/nvidia0 \n      - /dev/nvidiactl:/dev/nvidiactl \n      - /dev/nvidia-modeset:/dev/nvidia-modeset \n    deploy:\n      resources:\n        reservations:\n          devices:\n            - capabilities: [gpu]\n</code></pre> .devcontainer/devcontainer.json<pre><code>{\n    \"name\": \"gz_tutorial\",\n    \"dockerComposeFile\": \"../docker-compose.yaml\",\n    \"service\": \"gazebo\",\n    \"shutdownAction\": \"stopCompose\",\n    \"workspaceFolder\": \"/workspace\",\n    \"remoteUser\": \"user\",\n    \"customizations\": {\n      \"vscode\": {\n        \"extensions\": [\n            \"ms-python.python\",\n            \"ms-vscode.cpptools\",\n            \"twxs.cmake\",\n            \"redhat.vscode-xml\",\n            \"redhat.vscode-yaml\",\n            \"albert.tabout\",\n            \"actboy168.tasks\",\n            \"streetsidesoftware.code-spell-checker\"\n        ],\n        \"settings\": {}\n      }\n    }\n  }\n</code></pre>","tags":["gazebo","gz","harmonic","docker","vscode"]},{"location":"Simulation/Gazebo/vscode/#run-the-simulation","title":"Run the simulation","text":"minimal world <pre><code>&lt;!-- https://github.com/gazebosim/docs/blob/master/harmonic/tutorials/sdf_worlds/world_demo.sdf --&gt;\n&lt;!-- https://gazebosim.org/docs/harmonic/sdf_worlds/ --&gt;\n&lt;?xml version=\"1.0\" ?&gt;\n&lt;sdf version=\"1.8\"&gt;\n  &lt;world name=\"world_demo\"&gt;\n    &lt;physics name=\"1ms\" type=\"ignored\"&gt;\n      &lt;max_step_size&gt;0.001&lt;/max_step_size&gt;\n      &lt;real_time_factor&gt;1.0&lt;/real_time_factor&gt;\n    &lt;/physics&gt;\n    &lt;plugin\n      filename=\"gz-sim-physics-system\"\n      name=\"gz::sim::systems::Physics\"&gt;\n    &lt;/plugin&gt;\n    &lt;plugin\n      filename=\"gz-sim-user-commands-system\"\n      name=\"gz::sim::systems::UserCommands\"&gt;\n    &lt;/plugin&gt;\n    &lt;plugin\n      filename=\"gz-sim-scene-broadcaster-system\"\n      name=\"gz::sim::systems::SceneBroadcaster\"&gt;\n    &lt;/plugin&gt;\n\n    &lt;!--light--&gt;\n    &lt;light type=\"directional\" name=\"sun\"&gt;\n      &lt;cast_shadows&gt;true&lt;/cast_shadows&gt;\n      &lt;pose&gt;0 0 10 0 0 0&lt;/pose&gt;\n      &lt;diffuse&gt;0.8 0.8 0.8 1&lt;/diffuse&gt;\n      &lt;specular&gt;0.2 0.2 0.2 1&lt;/specular&gt;\n      &lt;attenuation&gt;\n        &lt;range&gt;1000&lt;/range&gt;\n        &lt;constant&gt;0.9&lt;/constant&gt;\n        &lt;linear&gt;0.01&lt;/linear&gt;\n        &lt;quadratic&gt;0.001&lt;/quadratic&gt;\n      &lt;/attenuation&gt;\n      &lt;direction&gt;-0.5 0.1 -0.9&lt;/direction&gt;\n    &lt;/light&gt;\n    &lt;include&gt;\n        &lt;name&gt;Coke0&lt;/name&gt;\n        &lt;pose&gt;0 0 0 0 0 0&lt;/pose&gt;\n        &lt;uri&gt;https://fuel.gazebosim.org/1.0/OpenRobotics/models/Coke&lt;/uri&gt;\n    &lt;/include&gt;\n    &lt;include&gt;\n        &lt;name&gt;Coke1&lt;/name&gt;\n        &lt;pose&gt;0 0.1 0 0 0 0&lt;/pose&gt;\n        &lt;uri&gt;https://fuel.gazebosim.org/1.0/OpenRobotics/models/Coke&lt;/uri&gt;\n    &lt;/include&gt;\n  &lt;/world&gt;\n&lt;/sdf&gt;\n</code></pre> <pre><code># run the simulation\ngz sim -r v4 gz_tutorial/worlds/empty.world \n</code></pre> gz topic<pre><code>gz topic --list\ngz topic -e -t /clock\n#\n\nsim {\n  sec: 326\n  nsec: 476000000\n}\n</code></pre>","tags":["gazebo","gz","harmonic","docker","vscode"]},{"location":"Simulation/Gazebo/vscode/#gz-transport","title":"Gz Transport","text":"<p>gz_transport is Gazebo's communication middleware, used for inter-process communication (IPC) between different Gazebo components \u2014 like sensors, plugins, UI, and even ROS bridges.</p> <ul> <li>GZ_PARTITION: Isolates topic namespaces between different simulations</li> <li>GZ_DISCOVERY_SERVER:  IP address of the main discovery server (usually the Gazebo server machine)</li> <li>GZ_TRANSPORT_IP:  IP address the local process uses to advertise itself to others</li> </ul>","tags":["gazebo","gz","harmonic","docker","vscode"]},{"location":"Simulation/Gazebo/vscode/#resource","title":"Resource","text":"<ul> <li>Gazebo Simulator : 5 Ways to Speedup Simulations</li> </ul>","tags":["gazebo","gz","harmonic","docker","vscode"]},{"location":"Simulation/Gazebo_Classic/","title":"Gazebo Classic","text":"<p>Tips / Settings</p> <p>Plugin and Sensors</p> <p>Custom plugin</p>","tags":["gazebo"]},{"location":"Simulation/Gazebo_Classic/custom_plugins/","title":"Gazebo classic custom plugin","text":"","tags":["gazebo","classic","plugin","custom"]},{"location":"Simulation/Gazebo_Classic/sensors/","title":"Gazebo Classic Sensors and plugin","text":"","tags":["gazebo","classic","sensors"]},{"location":"Simulation/Gazebo_Classic/tips_settings/","title":"Index","text":"","tags":["gazebo","classic","tips"]},{"location":"Simulation/Gazebo_Classic/tips_settings/#send-message-to-subscriber","title":"Send message to subscriber","text":"<pre><code># gz topic -p topic msg_type -m message_data\ngz topic -p \"/gazebo/default/iris_demo/gimbal_tilt_cmd\"  \"gazebo.msgs.GzString\" -m 'data: \"1.0\"'\n</code></pre>","tags":["gazebo","classic","tips"]},{"location":"Simulation/gazebo_ionic/","title":"Gazebo IONIC","text":"<p>VSCode dev</p> <p>gz transport</p> <p>Custom plugins</p>","tags":["gazebo","gz","ionic"]},{"location":"Simulation/gazebo_ionic/gz_transport/","title":"GZ Transport","text":"<p>gz_transport is Gazebo's communication middleware, used for inter-process communication (IPC) between different Gazebo components \u2014 like sensors, plugins, UI, and even ROS bridges. for ionic the gz_transport is version 14</p>","tags":["gazebo","ionic","gz_transport"]},{"location":"Simulation/gazebo_ionic/gz_transport/#gz_transport-python-bindings","title":"gz_transport python bindings","text":"<p>Python bindings for gz_transport read more Python support</p> <pre><code>sudo apt install python3-gz-transport14\n# gazebo messages\nsudo apt install python3-gz-msgs11\n</code></pre>","tags":["gazebo","ionic","gz_transport"]},{"location":"Simulation/gazebo_ionic/gz_transport/#references","title":"References","text":"<ul> <li>Gazebo Release Features (gz-* versions)</li> </ul>","tags":["gazebo","ionic","gz_transport"]},{"location":"Simulation/gazebo_ionic/vscode/","title":"Run gazebo ionic on docker","text":"","tags":["gazebo","gz","ionic","docker","vscode"]},{"location":"Simulation/gazebo_ionic/vscode/#dockerfile","title":"Dockerfile","text":"Docker file","tags":["gazebo","gz","ionic","docker","vscode"]},{"location":"Simulation/gazebo_ionic/vscode/#run-the-image","title":"Run the image","text":"<pre><code>xhost +local:docker\n\ndocker run --gpus all -it --rm \\\n--name ionic \\\n--hostname gz \\\n--user user \\\n--network host \\\n--env=\"QT_X11_NO_MITSHM=1\"  \\\n--env=\"DISPLAY\"  \\\n-v /tmp/.X11-unix:/tmp/.X11-unix:rw \\\n-v /dev/dri:/dev/dri \\\n-v /dev/nvidia0:/dev/nvidia0 \\\n-v /dev/nvidiactl:/dev/nvidiactl \\\n-v /dev/nvidia-modeset:/dev/nvidia-modeset \\\ngz:ionic\n</code></pre>","tags":["gazebo","gz","ionic","docker","vscode"]},{"location":"Simulation/gazebo_ionic/vscode/#use-vscode-and-docker","title":"Use VSCode and docker","text":"<ul> <li>Using docker-compose</li> <li>Using devcontainer to run the docker compose</li> </ul> <pre><code>\u251c\u2500\u2500 .devcontainer\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 devcontainer.json\n\u251c\u2500\u2500 docker-compose.yaml\n\u251c\u2500\u2500 .gitignore\n\u2514\u2500\u2500 gz_tutorial\n    \u2514\u2500\u2500 worlds\n        \u2514\u2500\u2500 empty.world\n</code></pre> docker-compose.yaml<pre><code>services:\n  gazebo:\n    image: gz:harmonic\n    network_mode: host\n    user: user\n    stdin_open: true\n    tty: true\n    hostname: gz\n    environment:\n      - DISPLAY=${DISPLAY}\n      - QT_X11_NO_MITSHM=1\n      - NVIDIA_VISIBLE_DEVICES=all\n      - NVIDIA_DRIVER_CAPABILITIES=all\n      - GZ_TRANSPORT_IP=gazebo\n      - GZ_DISCOVERY_SERVER=gazebo\n      - GZ_PARTITION=my_simulation\n    volumes:\n      - .:/workspace:cached\n      - ./.gz:/home/user/.gz:cached\n      - /tmp/.X11-unix:/tmp/.X11-unix:rw \n      - /dev/dri:/dev/dri \n      - /dev/nvidia0:/dev/nvidia0 \n      - /dev/nvidiactl:/dev/nvidiactl \n      - /dev/nvidia-modeset:/dev/nvidia-modeset \n    deploy:\n      resources:\n        reservations:\n          devices:\n            - capabilities: [gpu]\n</code></pre> .devcontainer/devcontainer.json<pre><code>{\n    \"name\": \"gz_tutorial\",\n    \"dockerComposeFile\": \"../docker-compose.yaml\",\n    \"service\": \"gazebo\",\n    \"shutdownAction\": \"stopCompose\",\n    \"workspaceFolder\": \"/workspace\",\n    \"remoteUser\": \"user\",\n    \"customizations\": {\n      \"vscode\": {\n        \"extensions\": [\n            \"ms-python.python\",\n            \"ms-vscode.cpptools\",\n            \"twxs.cmake\",\n            \"redhat.vscode-xml\",\n            \"redhat.vscode-yaml\",\n            \"albert.tabout\",\n            \"actboy168.tasks\",\n            \"streetsidesoftware.code-spell-checker\"\n        ],\n        \"settings\": {}\n      }\n    }\n  }\n</code></pre>","tags":["gazebo","gz","ionic","docker","vscode"]},{"location":"Simulation/nvidia_issac/","title":"NVidia isaac","text":"<ul> <li> <p>Isaac SDK: A development kit for creating AI-based robotics applications.</p> </li> <li> <p>Isaac ROS: A set of ROS 2-compatible packages optimized for NVIDIA hardware (Jetson).</p> </li> <li> <p>Isaac Sim: A simulation tool built on Omniverse for training and testing robotics algorithms in a virtual environment.</p> </li> </ul> <p>Isaac vs Isaac Lab</p> <p>NVIDIA Isaac is a broad robotics software platform designed for AI-powered autonomous robots. Isaac Lab is an extension of Isaac Sim, specifically focused on reinforcement learning (RL) and AI training for robotics.</p>","tags":["nvidia","isaac","simulation"]},{"location":"Simulation/nvidia_issac/#isaac-automator","title":"Isaac Automator","text":"<p>Running Isaac Lab in the Cloud <pre><code>git clone https://github.com/isaac-sim/IsaacAutomator.git\n</code></pre></p>","tags":["nvidia","isaac","simulation"]},{"location":"Simulation/nvidia_issac/#ngc-api-key","title":"NGC API key","text":"<p>Generate NGC API Key</p>","tags":["nvidia","isaac","simulation"]},{"location":"Simulation/nvidia_issac/#login","title":"login","text":"<pre><code>docker login nvcr.io\n</code></pre> <pre><code>Username: $oauthtoken\nPassword: &lt;Your NGC API Key&gt;\n</code></pre>","tags":["nvidia","isaac","simulation"]},{"location":"Simulation/nvidia_issac/#run","title":"Run","text":"<pre><code>./build\n</code></pre> <pre><code>./run\n</code></pre> <pre><code>./deploy-gcp\n</code></pre> <p>ngc api</p> <p>paste the key without prefix</p> end of installation  ****************************************** * Isaac Sim is deployed at 34.134.62.169 * ******************************************  * To connect to Isaac Sim via SSH:  ssh -i state/dense-onion/key.pem -o StrictHostKeyChecking=no ubuntu@34.134.62.169  * To connect to Isaac Sim via noVNC:  1. Open http://34.134.62.169:6080/vnc.html?host=34.134.62.169&amp;port=6080 in your browser. 2. Click \"Connect\" and use password \"msUc4xpLXb\"  * To connect to Isaac Sim via NoMachine:  0. Download NoMachine client at https://downloads.nomachine.com/, install and launch it. 1. Click \"Add\" button. 2. Enter Host: \"34.134.62.169\". 3. In \"Configuration\" &gt; \"Use key-based authentication with a key you provide\",    select file \"state/dense-onion/key.pem\". 4. Click \"Connect\" button. 5. Enter \"ubuntu\" as a username when prompted.   !!! note \"key.pem\"      The key exists in automator docker `/state` folder","tags":["nvidia","isaac","simulation"]},{"location":"projects/","title":"Projects","text":"","tags":["projects"]},{"location":"projects/#parameters_utils","title":"parameters_utils","text":"<p>Helper python module that manage external parameter The module expose service that save parameter changes back to original file</p>","tags":["projects"]},{"location":"projects/#g_stream","title":"g_stream","text":"<p>Use gstreamer framework with python gst binding to stream ROS image message into H264/H265 UDP Stream</p>","tags":["projects"]},{"location":"projects/#termilog","title":"Termilog","text":"<p>ROS2 node use TUI to show and filter <code>/rosout</code> topic by:</p> <ul> <li>log level</li> <li>node names</li> <li>text in message         - fuzzy search         - regex search</li> </ul>","tags":["projects"]}]}