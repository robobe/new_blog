{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>ROS</p> <p>Simulation</p> <p>Robotics</p> <p>Programming</p> <p>Embedded</p> <p>DevOps</p>"},{"location":"DevOps/","title":"Devops","text":"<p>Docker</p> <p>Linux</p> <p>Networking</p> <p>VSCode</p> <p>GIT</p> <p>Aptly</p>"},{"location":"DevOps/aptly/","title":"Aptly","text":"<p>Aptly is a swiss army knife for Debian repository management.</p> <pre><code>sudo apt install aptly\n</code></pre> <ul> <li>Create custom repository</li> </ul>","tags":["aptly","debian"]},{"location":"DevOps/aptly/custom_repo/","title":"TO REVIEW AND TEST","text":"","tags":["aptly","repo","local"]},{"location":"DevOps/aptly/custom_repo/#aptly-repo","title":"aptly repo","text":"<p>Local repository is a collection of packages (most usually custom packages created internally).  Multiple versions of the same package could be added to the repository. In order to capture current repository state we use snapshot</p>","tags":["aptly","repo","local"]},{"location":"DevOps/aptly/custom_repo/#repo","title":"repo","text":"","tags":["aptly","repo","local"]},{"location":"DevOps/aptly/custom_repo/#create","title":"Create","text":"<p>Create local package repository. Repository would be empty when created, packages could be added to the repository from local files, copied or moved from another local repository or imported from the mirror. more</p> <pre><code>aptly -distribution=\"jammy\" -architectures=\"amd64\" \\\nrepo \\\ncreate \\\nmy_repo\n</code></pre>","tags":["aptly","repo","local"]},{"location":"DevOps/aptly/custom_repo/#list","title":"List","text":"<p>Commands list displays list of all local package repositories. more</p> <pre><code>aptly repo list\n</code></pre>","tags":["aptly","repo","local"]},{"location":"DevOps/aptly/custom_repo/#add","title":"Add","text":"<p>Command adds packages to local repository from .deb more</p> <p>From <code>deb</code> folder location</p> <pre><code>aptly repo add my_repo *deb\n</code></pre>","tags":["aptly","repo","local"]},{"location":"DevOps/aptly/custom_repo/#snapshot","title":"Snapshot","text":"<p>Snapshot is a fixed state of remote repository mirror or local repository. Internally snapshot is list of references to packages. </p> <p>more</p> <p>Creates snapshot from current state of local package repository. </p> <p><pre><code>aptly snapshot create &lt;name&gt; from repo &lt;repo-name&gt;\n</code></pre> - name: snapshot name - repo-name: local repository name</p> <pre><code>aptly snapshot create \\\nsnap_my_repo \\\nfrom repo my_repo\n</code></pre>","tags":["aptly","repo","local"]},{"location":"DevOps/aptly/custom_repo/#publish","title":"Publish","text":"<p>Publishes snapshot as repository to be consumed by apt.  more</p> <pre><code>aptly publish snapshot &lt;name&gt; [&lt;prefix&gt;]\n</code></pre> <ul> <li>prefix: Add prefix to repo url</li> <li>architectures: publish only selected arc from snapshot</li> <li>distribution: distribution name to publish</li> <li>skip-signing: don\u2019t sign Release files with GPG</li> </ul> publish with prefix<pre><code>aptly -architectures=\"amd64\" -skip-signing=true \\\npublish snapshot -architectures=\"amd64\" \\\nsnap_my_repo local\n</code></pre>","tags":["aptly","repo","local"]},{"location":"DevOps/aptly/custom_repo/#serve","title":"Serve","text":"<p>aptly can serve published repositories using its own embedded webserver. more</p> <pre><code>aptly server\n</code></pre>","tags":["aptly","repo","local"]},{"location":"DevOps/aptly/custom_repo/#sourcelist","title":"source.list","text":"<ul> <li>Add this line to use by apt</li> </ul> line in source.list<pre><code>deb http://lap2:8080/local/ jammy main\n</code></pre>","tags":["aptly","repo","local"]},{"location":"DevOps/aptly/custom_repo/#reference","title":"Reference","text":"<ul> <li>Introducing \u2018Aptly\u2019, A Debian Repository Management Tool</li> </ul>","tags":["aptly","repo","local"]},{"location":"DevOps/docker/","title":"Docker","text":"<p>Tips / Settings</p> <p>Docker Compose</p> <p>Nvidia</p>"},{"location":"DevOps/docker/#posts","title":"Posts","text":"<ul> <li>Running and Building ARM Docker Containers on x86</li> </ul>"},{"location":"DevOps/docker/docker_build_arm/","title":"Running and Building ARM Docker Containers on x86","text":"","tags":["docker","arm","qemu"]},{"location":"DevOps/docker/docker_build_arm/#install","title":"Install","text":"<pre><code>sudo apt-get install qemu binfmt-support qemu-user-static\n</code></pre> <pre><code>docker run --rm --privileged multiarch/qemu-user-static --reset -p yes\n</code></pre> <p>The purpose of this command is to enable the host system to run binaries compiled for different architectures (such as ARM) using QEMU. This is particularly useful for building and running ARM Docker containers on an x86 host.</p>","tags":["docker","arm","qemu"]},{"location":"DevOps/docker/docker_build_arm/#usage","title":"Usage","text":"test<pre><code>docker run --platform=linux/arm64/v8 --rm -t arm64v8/ubuntu uname -m # Testing the emulation environment\n</code></pre> <p>buildx</p> <p>Check what is docker buildx and if preferred use it instead of qemu</p>","tags":["docker","arm","qemu"]},{"location":"DevOps/docker/docker_build_arm/#references","title":"References","text":"<ul> <li>Running and Building ARM Docker Containers on x86</li> </ul>","tags":["docker","arm","qemu"]},{"location":"DevOps/docker/docker_compose/","title":"Docker Compose","text":"<p><code>docker-compose</code> vs <code>docker compose</code></p> <p><code>docker-compose</code> is the original command, <code>docker compose</code> is the new command.  The new command is available in Docker 1.29 and later.</p>","tags":["docker","compose"]},{"location":"DevOps/docker/docker_compose/#usage","title":"Usage","text":"<pre><code>docker compose -f docker-compose.yml up\ndocker compose -f docker-compose.yml run &lt;service_name&gt; &lt;command&gt;\n</code></pre>","tags":["docker","compose"]},{"location":"DevOps/docker/docker_compose/#references","title":"References","text":"<ul> <li>Ultimate Docker Compose Tutorial</li> </ul>","tags":["docker","compose"]},{"location":"DevOps/docker/tips_settings/","title":"Docker tips","text":"","tags":["docker","tips"]},{"location":"DevOps/docker/tips_settings/#images","title":"images","text":"","tags":["docker","tips"]},{"location":"DevOps/docker/tips_settings/#remove-all-dangling-images","title":"Remove all dangling images","text":"<pre><code>docker image prune\n</code></pre>","tags":["docker","tips"]},{"location":"DevOps/git/","title":"Git","text":"<p>Tips / Settings</p> <p>Git branching</p> <p>Github Actions</p> <ul> <li>Git submodule</li> <li>Git hooks</li> </ul>","tags":["git"]},{"location":"DevOps/git/git_hooks/","title":"git pre-commit","text":"<p>All Git hooks are ordinary scripts that Git executes when certain events occur in the repository like: - pre-commit - post-commit - update - post-merge - pre-push - full list and more</p> <p>git hooks locate in <code>.git/hooks</code> folder</p>","tags":["git","hooks","pre-commit"]},{"location":"DevOps/git/git_hooks/#pre-commit","title":"pre-commit","text":"<p><code>pre-commit</code> A framework for managing and maintaining multi-language pre-commit hooks.</p>","tags":["git","hooks","pre-commit"]},{"location":"DevOps/git/git_hooks/#install","title":"Install","text":"<pre><code>python -m pip install pre-commit\n#or from pyz\n# Download from release\npython pre-commit-#.#.#.pyz\n</code></pre>","tags":["git","hooks","pre-commit"]},{"location":"DevOps/git/git_hooks/#usage","title":"usage","text":"<ul> <li>Create config file at project root folder</li> <li>Add hooks</li> <li>Install hooks</li> <li>Test / Run hooks</li> </ul>","tags":["git","hooks","pre-commit"]},{"location":"DevOps/git/git_hooks/#config-hooks","title":"config hooks","text":"<pre><code>touch .pre-commit-config.yaml\n</code></pre> <pre><code>repos:\n-   repo: https://github.com/psf/black\n    rev: 23.3.0\n    hooks:\n    -   id: black\n</code></pre> <p>supported hooks</p> <p><code>rev</code> can take from github project releases page</p> <p>supported hooks</p> <p>Get hooks list from pre-commit</p>","tags":["git","hooks","pre-commit"]},{"location":"DevOps/git/git_hooks/#install-hook","title":"install hook","text":"<pre><code>pre-commit install\n</code></pre>","tags":["git","hooks","pre-commit"]},{"location":"DevOps/git/git_hooks/#test-run","title":"Test/ run","text":"<pre><code>#-a all-files\npre-commit run -a\n</code></pre>","tags":["git","hooks","pre-commit"]},{"location":"DevOps/git/git_hooks/#custom-script-demo","title":"Custom script demo","text":"<p>run shell script</p> <pre><code>repos:\n- repo: local\n  hooks:\n    - id: shell_script\n      name: shell_script\n      entry: path_to_shell_script.sh\n      language: script\n</code></pre>","tags":["git","hooks","pre-commit"]},{"location":"DevOps/git/git_hooks/#references","title":"References","text":"<ul> <li>pre-commit</li> <li>4 Tools to Format &amp; Check your Code with Pre-Commit</li> </ul>","tags":["git","hooks","pre-commit"]},{"location":"DevOps/git/git_submodule/","title":"Git Submodule","text":"<p>Submodules are repositories inside other Git repositories.</p> <pre><code># Add a submodule to current repository at specified path\ngit submodule add -b master [URL to Git repo] [path]\n</code></pre> <pre><code># update all project submodules\ngit submodule update --init --recursive\n</code></pre>","tags":["git","submodule"]},{"location":"DevOps/git/git_submodule/#remove-a-submodule","title":"Remove a submodule","text":"<p>bash Script to remove a submodule from a git repository</p> <pre><code>submodule_path=$1\n\n[ -d \"$submodule_path\" ] || (echo 'Specify valid submodule path as first parameter' &amp;&amp; exit 1)\n\n# Remove the submodule entry from .git/config\necho \"Deinitializing submodule $submodule_path\"\ngit submodule deinit -f $submodule_path\n\n# Remove the submodule directory from the superproject's .git/modules directory\necho \"Removing .git/modules for $submodule_path\"\nrm -rf .git/modules/$submodule_path\n\n# Remove the entry in .gitmodules and remove the submodule directory located at path/to/submodule\necho \"Removing files for $submodule_path\"\ngit rm -rf $submodule_path\n</code></pre>","tags":["git","submodule"]},{"location":"DevOps/git/branching/","title":"Git branching strategy","text":"","tags":["git","branching"]},{"location":"DevOps/git/branching/#gitflow","title":"Gitflow","text":"Branch main/master stores the currently released version of code and should match the code that is in production. develop stores a copy of the main branch with all additional changes that have been added since the last release feature is the branch where a new feature is developed. release is the branch where the code is prepared for the next release. its merge from develop and ready for test when it done it merge to main and back into develop if any change done, in main it's tag as release (with version) hotfix is the branch where the code is fixed for a bug in the main branch. it's merge to main and back into develop if any change done, in main it's tag as release (with version)","tags":["git","branching"]},{"location":"DevOps/git/branching/#github-flow","title":"Github flow","text":"<p>Github flow is a lightweight, branch-based workflow. It revolves around branching from main and pull requests. </p> <p>A Pull Request (PR) is a request to merge a branch into another branch. It is a way to discuss changes before they are merged into the main branch.</p> <p></p> Branch main stores the last working codebase change/feature Temporary branch for the new feature or bug fix , the branch well be base for pull request and well delete after merging into main branch <p>nameing</p> <p>Name change/feature branch with prefix like:</p> <ul> <li>feature/</li> <li>bugfix/</li> <li>hotfix/</li> </ul>","tags":["git","branching"]},{"location":"DevOps/git/branching/#pull-request","title":"Pull Request","text":"<ul> <li>Unit/Integration test</li> <li>Code review</li> <li>Reference to issue</li> <li>Has a comprehensive description</li> <li>Squashed into single commit</li> </ul> <p>more</p>","tags":["git","branching"]},{"location":"DevOps/git/github_action/","title":"Github Actions","text":"<p>GitHub Actions is a powerful feature of GitHub that allows you to automate, customize, and execute software development workflows directly in your GitHub repository. With GitHub Actions, you can build, test, and deploy your code right from GitHub.</p> <ul> <li>Run github action locally using act</li> </ul>","tags":["git","github","action"]},{"location":"DevOps/git/github_action/github_action_run_local/","title":"Run github action locally","text":"<p>GitHub Actions help automate tasks like building, testing, and deploying in your GitHub repository.  With <code>act</code> CLI tool we can write and test the GitHub action locally.</p> <pre><code>curl https://raw.githubusercontent.com/nektos/act/master/install.sh | sudo bash\n</code></pre>","tags":["github","actions","act","git","devops"]},{"location":"DevOps/git/github_action/github_action_run_local/#config-github-action","title":"config github action","text":"<ul> <li>Add <code>.github/workflows</code> folder to project root</li> <li>Add yaml file and declare jobs</li> </ul>","tags":["github","actions","act","git","devops"]},{"location":"DevOps/git/github_action/github_action_run_local/#view","title":"view","text":"<p>from project root</p> <pre><code>act -l\n</code></pre>","tags":["github","actions","act","git","devops"]},{"location":"DevOps/git/github_action/github_action_run_local/#example","title":"example","text":"<p>Run job on local docker</p> <pre><code>act -j build -P rome_arm=rome/arm:build --pull=false\n</code></pre>","tags":["github","actions","act","git","devops"]},{"location":"DevOps/git/github_action/github_action_run_local/#reference","title":"Reference","text":"<ul> <li>How to Run GitHub Actions Locally Using the act CLI Tool</li> </ul>","tags":["github","actions","act","git","devops"]},{"location":"DevOps/git/tips_settings/","title":"Git Tips and Settings","text":"","tags":["git","tips"]},{"location":"DevOps/git/tips_settings/#git-branching","title":"Git branching","text":"","tags":["git","tips"]},{"location":"DevOps/git/tips_settings/#sync-remote-branch-with-local-branch","title":"Sync remote branch with local branch","text":"<p>Remove all remote branches that no longer exist on the remote repository. <pre><code>git fetch --prune\n</code></pre></p>","tags":["git","tips"]},{"location":"DevOps/linux/","title":"Index","text":"<ul> <li>tmux / tmuxp config and usage</li> </ul>","tags":["linux"]},{"location":"DevOps/linux/linux_tmux_tmuxp/","title":"tmuxp","text":"<p>Tmuxp is a session manager for tmux, allowing you to define tmux sessions using a YAML configuration</p>","tags":["linux","tmux","tmuxp"]},{"location":"DevOps/linux/linux_tmux_tmuxp/#install","title":"install","text":"<pre><code>pip install tmuxp\n</code></pre>","tags":["linux","tmux","tmuxp"]},{"location":"DevOps/linux/linux_tmux_tmuxp/#config","title":"config","text":"my_session.yaml<pre><code>session_name: my_session\nwindows:\n  - window_name: my_window\n    panes:\n      - shell_command: \n          - printf '\\033]2;%s\\033\\\\' 'pane1'\n          - ./script1.sh  # Runs script1 in the first pane\n        focus: true\n      - shell_command:\n          - printf '\\033]2;%s\\033\\\\' 'pane2'\n          - ./script2.sh  # Runs script2 in the second pane\n</code></pre>","tags":["linux","tmux","tmuxp"]},{"location":"DevOps/linux/linux_tmux_tmuxp/#usage","title":"usage","text":"<pre><code>tmuxp load my_session.yaml\n</code></pre>","tags":["linux","tmux","tmuxp"]},{"location":"DevOps/linux/linux_tmux_tmuxp/#tmux","title":"tmux","text":"","tags":["linux","tmux","tmuxp"]},{"location":"DevOps/linux/linux_tmux_tmuxp/#config_1","title":"Config","text":"tmux.conf <pre><code># unbind\nunbind C-b\nunbind '\"'\nunbind %\n\n# base1 numbering\nset -g base-index 1\nsetw -g pane-base-index 1\n\n#bind ctrl-a as a prefix\nset-option -g prefix C-a\nbind-key C-a send-prefix\n# kill session\nbind C-c kill-session\n\nbind C-a run \"tmux save-buffer - | xclip -i -sel clipboard\"\n\n# mouse\nset -g mouse on\n\n\n # do like terminator\nbind -n C-E split-window -h\nbind -n C-S-Left resize-pane -L 3\nbind -n C-S-Right resize-pane -R 3\nbind -n C-S-Up resize-pane -U 3\nbind -n C-S-Down resize-pane -D 3\nbind -n C-O split-window -v\n\n# switch panes using Alt-arrow without prefix (not working)\nbind -n M-Left select-pane -L\nbind -n M-Right select-pane -R\nbind -n M-Up select-pane -U\nbind -n M-Down select-pane -D\n\n# Shift arrow to switch windows\n\nbind n next-window\nbind p previous-window\n\nbind c new-window -c \"#{pane_current_path}\"\n\nbind r source-file ~/.tmux.conf\n\n# settings\n</code></pre>","tags":["linux","tmux","tmuxp"]},{"location":"DevOps/networking/","title":"Networking","text":"<p>Tips / Settings</p> <p>tools</p> <p>TBD</p>","tags":["networking"]},{"location":"DevOps/networking/tips_settings/","title":"Networking Tips and Settings","text":"<ul> <li>checking mtu</li> </ul>","tags":["networking","tips"]},{"location":"DevOps/networking/tips_settings/checking_mtu/","title":"Checking MTU","text":"<p>Check the MTU (Maximum Transmission Unit) of a network interface using the ping command with the Don't Fragment (DF) flag.</p> <pre><code>ping -M do -s 1472 &lt;destination&gt;\n</code></pre> <ul> <li><code>-M do</code> \u2192 Enables the Don't Fragment (DF) flag, preventing packet fragmentation.</li> <li><code>-s 1472</code> \u2192 Specifies the payload size (1472 bytes is used for standard Ethernet with an MTU of 1500).</li> </ul> <p>1472</p> <p>The payload size of 1472 is used because the ICMP header is 8 bytes, and IP header 20 which makes the total packet size 1500 bytes.</p> <p></p>","tags":["networking","tips","mtu"]},{"location":"DevOps/networking/tips_settings/checking_mtu/#usage","title":"usage","text":"<p>To find the actual MTU, decrease the -s value in steps until you get a successful response.</p>","tags":["networking","tips","mtu"]},{"location":"DevOps/networking/tips_settings/tcpdump_tips/","title":"Tcpdump tips and cheat sheet","text":"","tags":["tcpdump","tips"]},{"location":"DevOps/networking/tips_settings/tcpdump_tips/#sniffer-ethernet-frame","title":"sniffer ethernet frame","text":"<pre><code>tcpdump -e\n</code></pre>","tags":["tcpdump","tips"]},{"location":"DevOps/networking/tools/","title":"Tools","text":"","tags":["networking","tools"]},{"location":"DevOps/networking/tools/#bmon","title":"bmon","text":"<p>bmon is a monitoring and debugging tool to capture networking related statistics and prepare them visually in a human friendly way</p> <pre><code>sudo apt-get install bmon\n</code></pre>","tags":["networking","tools"]},{"location":"DevOps/networking/tools/#iftop","title":"iftop","text":"<p>iftop is a network monitoring tool that shows a list of network connections in real-time</p> <pre><code>sudo apt-get install iftop\n</code></pre>","tags":["networking","tools"]},{"location":"DevOps/networking/tools/#example","title":"example","text":"<pre><code>sudo iftop -f \"udp port &lt;port_number&gt;\"\n</code></pre>","tags":["networking","tools"]},{"location":"DevOps/vscode/","title":"VSCode","text":"<p>Tips / Settings</p> <p>DevContainer</p> <p>Remote ssh</p>","tags":["vscode"]},{"location":"DevOps/vscode/#video-and-posts","title":"Video and posts","text":"","tags":["vscode"]},{"location":"DevOps/vscode/#copilot","title":"copilot","text":"<ul> <li> Get to know GitHub Copilot in VS Code and be productive IMMEDIATELY </li> <li> What's new with Copilot Chat and VS Code - v1.84 </li> </ul>","tags":["vscode"]},{"location":"DevOps/vscode/dev_container/","title":"VSCode Dev Container","text":"<ul> <li>Run DevContainer on remote host</li> </ul>"},{"location":"DevOps/vscode/dev_container/vscode_devcontainer_remote_host/","title":"Run dev container on remote host","text":"","tags":["vscode","devcontainer","remote"]},{"location":"DevOps/vscode/dev_container/vscode_devcontainer_remote_host/#prepared-host","title":"Prepared host","text":"","tags":["vscode","devcontainer","remote"]},{"location":"DevOps/vscode/dev_container/vscode_devcontainer_remote_host/#ssh-key","title":"SSH key","text":"<pre><code>ssh-keygen -t ed25519 -C \"dev@gmail.com\"\n</code></pre> <pre><code>ssh-copy-id &lt;user&gt;r@&lt;host&gt;\n</code></pre>","tags":["vscode","devcontainer","remote"]},{"location":"DevOps/vscode/dev_container/vscode_devcontainer_remote_host/#prepared-vscode","title":"Prepared VSCode","text":"<ul> <li>install <code>Remote - SSH</code> (ms-vscode-remote.remote-ssh) extension</li> <li>install <code>Dev Containers</code> (ms-vscode-remote.remote-containers) extension</li> </ul> <p>Set docker environment <code>.vscode/setting.json</code></p> <pre><code>{\n    \"docker.environment\": {\n        \"DOCKER_HOST\": \"ssh://user@10.0.0.4\"\n    }\n}\n</code></pre>","tags":["vscode","devcontainer","remote"]},{"location":"DevOps/vscode/dev_container/vscode_devcontainer_remote_host/#devcontainer","title":"Devcontainer","text":"<p>Note</p> <p>Create project folder on the remote machine in the same location like the local machine</p> <p>for example <pre><code>/home/user/projects/vscode_remote_devcontainer\n</code></pre></p> devcontainer.json<pre><code>{\n  \"name\": \"Remote DevContainer\",\n  \"workspaceFolder\": \"/workspaces/vscode_remote_devcontainer\",\n  \"build\": {\n    \"dockerfile\": \"Dockerfile\"\n  },\n  \"remoteUser\": \"user\",\n  \"runArgs\": [\"--network=host\"],\n  \"postCreateCommand\": \"echo 'DevContainer is ready!'\"\n}\n</code></pre>","tags":["vscode","devcontainer","remote"]},{"location":"DevOps/vscode/dev_container/vscode_devcontainer_remote_host/#dockerfile","title":"Dockerfile","text":"<p>Base on ubuntu 22.04 add none root user and install and config <code>sudo</code></p> <pre><code>FROM ubuntu:22.04\n\nARG DEBIAN_FRONTEND=noninteractive\n\nARG USERNAME=user\nARG USER_UID=1000\nARG USER_GID=$USER_UID\n\n# Check if \"ubuntu\" user exists, delete it if it does, then create the desired user\nRUN if getent passwd ubuntu &gt; /dev/null 2&gt;&amp;1; then \\\n        userdel -r ubuntu &amp;&amp; \\\n        echo \"Deleted existing ubuntu user\"; \\\n    fi &amp;&amp; \\\n    groupadd --gid $USER_GID $USERNAME &amp;&amp; \\\n    useradd -s /bin/bash --uid $USER_UID --gid $USER_GID -m $USERNAME &amp;&amp; \\\n    echo \"Created new user $USERNAME\"\n\n# Add sudo support for the non-root user\nRUN apt-get update &amp;&amp; apt-get install -y sudo \\\n  &amp;&amp; echo $USERNAME ALL=\\(root\\) NOPASSWD:ALL &gt; /etc/sudoers.d/$USERNAME\\\n  &amp;&amp; chmod 0440 /etc/sudoers.d/$USERNAME \\\n  &amp;&amp; rm -rf /var/lib/apt/lists/*\n\n\n  ARG DEBIAN_FRONTEND=\n</code></pre>","tags":["vscode","devcontainer","remote"]},{"location":"DevOps/vscode/dev_container/vscode_devcontainer_remote_host/#run","title":"Run","text":"<p>Warning</p> <p>How to sync files from remote to local machine</p>","tags":["vscode","devcontainer","remote"]},{"location":"DevOps/vscode/remote_ssh/","title":"Remote ssh","text":"","tags":["vscode","remote","ssh"]},{"location":"DevOps/vscode/remote_ssh/#tips","title":"Tips","text":"","tags":["vscode","remote","ssh"]},{"location":"DevOps/vscode/remote_ssh/#add-x11-support","title":"Add x11 support","text":"<p>Add ForwardX11 and ForwardX11Trusted to user <code>.ssh/config</code> file</p> <pre><code>Host 10.0.0.4\n  HostName 10.0.0.4\n  User user\n  ForwardX11 yes\n  ForwardX11Trusted yes\n</code></pre>","tags":["vscode","remote","ssh"]},{"location":"DevOps/vscode/tips_settings/","title":"VSCode tips and settings","text":"","tags":["vscode","tips","settings"]},{"location":"DevOps/vscode/tips_settings/#keyboard-shortcuts","title":"keyboard shortcuts","text":"","tags":["vscode","tips","settings"]},{"location":"DevOps/vscode/tips_settings/#vscode-explorer","title":"VSCode explorer","text":"<p>Add <code>new file</code> and <code>new folder</code> keyboard shortcut in file explorer</p> <p>Add <code>key</code> to <code>keybindings.json</code> file <pre><code>{\n    \"key\": \"ctrl+n\",\n    \"command\": \"explorer.newFile\",\n    \"when\": \"explorerViewletFocus\"\n},\n{\n    \"key\": \"ctrl+shift+n\",\n    \"command\": \"explorer.newFolder\",\n    \"when\": \"explorerViewletFocus\"\n},\n</code></pre></p>","tags":["vscode","tips","settings"]},{"location":"DevOps/vscode/tips_settings/#terminal","title":"Terminal","text":"","tags":["vscode","tips","settings"]},{"location":"DevOps/vscode/tips_settings/#run-script-when-terminal-open","title":"run script when terminal open","text":"<pre><code>\"terminal.integrated.profiles.linux\": {\n      \"bash\": {\n          \"path\": \"bash\",\n          \"icon\": \"terminal-bash\",\n          \"args\": [\"--rcfile\", \"&lt;project&gt;/env.sh\"]\n      }\n  }\n</code></pre> <ul> <li>rcfile: specify an alternative initialization file (RC file) to source when starting a new bash session</li> </ul>","tags":["vscode","tips","settings"]},{"location":"DevOps/vscode/tips_settings/#editor","title":"Editor","text":"","tags":["vscode","tips","settings"]},{"location":"DevOps/vscode/tips_settings/#tab-key-function","title":"Tab key function","text":"<p>I accidentally pressed some key combonition and the \"Tab\" switch the focus mode between pans' using command pallette to change tab function</p> <p></p>","tags":["vscode","tips","settings"]},{"location":"DevOps/vscode/tips_settings/#add-custom-color-to-active-tab","title":"Add custom color to active tab","text":"<p>```json \"workbench.colorCustomizations\": {         \"tab.activeBorder\": \"#ff0000\",         \"tab.activeBackground\": \"#373737\"     },</p>","tags":["vscode","tips","settings"]},{"location":"Embedded/","title":"Embedded","text":"<p>Arduino</p> <p>ESP32</p> <p>Jetson</p> <p>RPi</p> <p>TBD</p> <p>TBD</p>"},{"location":"Other/","title":"Other","text":"<p>GStreamer</p> <p>Block 2 Description</p> <p>Block 3 Description</p> <p>Block 4 Description</p> <p>Block 5 Description</p> <p>Presentation</p>"},{"location":"Other/Gstreamer/","title":"GStreamer","text":"<ul> <li>Video stream pipes</li> </ul>"},{"location":"Other/Gstreamer/gst_stream_pipes/","title":"GStreamer video stream pipe","text":"","tags":["gst","gstreamer","streaming"]},{"location":"Other/Gstreamer/gst_stream_pipes/#h265-cpu-encoder","title":"H265 cpu encoder","text":"<pre><code>gst-launch-1.0 videotestsrc \\\n! video/x-raw, width=640, height=480, framerate=30/1, format=I420 \\\n! videoconvert \\\n! x265enc tune=zerolatency speed-preset=ultrafast key-int-max=30 bitrate=500 \\\n! rtph265pay config-interval=1 mtu=1400 \\\n! udpsink host=127.0.0.1 port=5000 sync=true\n</code></pre> property description more ... config-interval Send VPS, SPS and PPS Insertion Interval in seconds (default 0) help decoder to interpret video stream <pre><code>## receive\ngst-launch-1.0 udpsrc port=5000 \\\n! application/x-rtp, encoding-name=H265, payload=96 \\\n! rtpjitterbuffer latency=10 \\\n! rtph265depay \\\n! decodebin \\\n! fpsdisplaysink sync=true\n</code></pre>","tags":["gst","gstreamer","streaming"]},{"location":"Other/Gstreamer/gst_stream_pipes/#h265-nvidia-jetson","title":"H265 nvidia jetson","text":"<pre><code>gst-launch-1.0 videotestsrc ! video/x-raw, width=640, height=480, framerate=30/1, format=I420 \\\n! nvvidconv ! 'video/x-raw(memory:NVMM)' \\\n! nvv4l2h265enc preset-level=UltraFastPreset \\\nbitrate=500000 vbv-size=500000 control-rate=GST_V4L2_VIDENC_CONSTANT_BITRATE \\\n! rtph265pay config-interval=1 \\\n! udpsink host=10.0.0.1 port=5000 sync=true\n</code></pre> property description more ... vbv-size Control the encoder buffer size, affecting bitrate variability Smaller values = Stable bitrate (good for live streaming) <pre><code>## receive\ngst-launch-1.0 udpsrc port=5000 \\\n! application/x-rtp, encoding-name=H265, payload=96 \\\n! rtpjitterbuffer latency=10 \\\n! rtph265depay \\\n! decodebin \\\n! fpsdisplaysink sync=true\n</code></pre>","tags":["gst","gstreamer","streaming"]},{"location":"Other/Presentation/","title":"Presentaions","text":"<p>ROS Application from development to deploy using docker and vscode</p> <p>Block 2 Description</p> <p>Block 3 Description</p>"},{"location":"Other/Presentation/presentation_source/ros2_dev_2_deploy/","title":"ROS2 from dev to deploy","text":""},{"location":"Other/Presentation/presentation_source/ros2_dev_2_deploy/#on-nvidia-jetson","title":"on nvidia jetson","text":""},{"location":"Other/Presentation/presentation_source/ros2_dev_2_deploy/#agenda","title":"Agenda","text":"<ul> <li>Dev</li> <li>Build and test</li> <li>Deploy</li> <li>Source control (??)</li> <li>Version control</li> </ul>"},{"location":"Other/Presentation/presentation_source/ros2_dev_2_deploy/#today","title":"Today","text":"<ul> <li>Dev on linux machine as python project (no ROS)</li> <li>Deploy: copy python files to remote system </li> <li>Deploy as ZIP</li> <li>Deploy: Burn pre cocked jetson image</li> </ul>"},{"location":"Other/Presentation/presentation_source/ros2_dev_2_deploy/#docker-as-a-way-of-life","title":"Docker as a way of life","text":"<ul> <li>Dev: using vscode devcontainer</li> <li>Build: using docker to build for different architecture</li> <li>Test: using docker as test environment (allow clean system)</li> <li>Deploy: Deploy the application as cocked docker image </li> </ul>"},{"location":"Other/Presentation/presentation_source/ros2_dev_2_deploy/#dev","title":"Dev","text":"<ul> <li>Using VSCode devcontainer</li> <li>support remote development (run on jetson)</li> <li>Docker hierarchy</li> <li>OS with Chosen ROS version + simulator + common dev tools</li> <li>Project runtime dependencies (runtime/test)</li> <li>Project dev dependencies (dev)</li> <li>Project cycle (forget package and python pip) </li> </ul>"},{"location":"Other/Presentation/presentation_source/ros2_dev_2_deploy/#build","title":"Build","text":"<ul> <li>Cross Compiler</li> <li>Using docker as cross compiler environment</li> <li>using dev docker that build for the jetson arm architecture</li> </ul>"},{"location":"Other/Presentation/presentation_source/ros2_dev_2_deploy/#test","title":"Test","text":"<ul> <li>Using docker as consistent and repetitive environment for testing</li> <li>Use it to test package install tests</li> </ul>"},{"location":"Other/Presentation/presentation_source/ros2_dev_2_deploy/#deploy-find-your-way","title":"Deploy - Find your way","text":"<ul> <li>deb packages</li> <li>docker image</li> <li>jetson image </li> </ul>"},{"location":"Other/Presentation/presentation_source/ros2_dev_2_deploy/#deploy-debian-package","title":"Deploy - debian package","text":"<ul> <li>Standard</li> <li>The linux/debian way </li> <li>every package are installable has version and metadata</li> <li>easy to deploy from remote</li> </ul>"},{"location":"Other/Presentation/presentation_source/ros2_dev_2_deploy/#deploy-jetson-image","title":"Deploy - jetson image","text":"<ul> <li>pre install jetson image with all project dependencies and code</li> <li>Code install as debian package</li> <li>easy to copy</li> <li></li> </ul>"},{"location":"Other/Presentation/presentation_source/ros2_dev_2_deploy/#deploy-with-docker","title":"Deploy - with docker","text":"<ul> <li>Build application docker with all dependencies</li> <li>Easy deploy</li> </ul>"},{"location":"Other/Presentation/presentation_source/ros2_dev_2_deploy/#deploy-with-docker-when","title":"Deploy - with docker - when","text":"<ul> <li>legacy</li> <li>test's</li> <li>mixing system</li> <li>when is no other way</li> </ul>"},{"location":"Other/Presentation/presentation_source/ros2_dev_2_deploy/#deploy-with-docker-why-not","title":"Deploy - with docker - why not","text":"<ul> <li>Hardware issue</li> <li>Hard to deploy from remote</li> </ul>"},{"location":"Other/Presentation/presentation_source/ros2_dev_2_deploy/#version","title":"Version","text":"<ul> <li>Every thing has a version</li> <li>package</li> <li>OS image</li> <li>docker image</li> <li>Every project / application has version page</li> </ul>"},{"location":"Other/Presentation/presentation_source/ros2_dev_2_deploy/#control-after-release","title":"Control after release","text":"<ul> <li>Dev days: yes, we know ourself</li> <li>From release and on:</li> <li>Source control</li> <li>Ticket and issue</li> <li>Code review and test</li> </ul>"},{"location":"Other/Presentation/presentation_source/ros2_dev_2_deploy/#all-fit-together","title":"All fit together","text":"<ul> <li>Build Debian packages</li> <li>Install Packages on the docker image</li> <li>Backup jetson image with docker include </li> </ul>"},{"location":"Other/Presentation/presentation_source/ros2_dev_2_deploy/#final-thought","title":"Final thought","text":"<p> Docker for dev using devcontainer  Docker for build  Docker for test  Docker for production</p>"},{"location":"Programming/","title":"Programing","text":"<p>Python</p> <p>C/CPP</p> <p>Web</p> <p>AI</p> <p>Vision</p> <p>QML</p>"},{"location":"Programming/ai/","title":"AI ML and what inside","text":"<p>Math</p>"},{"location":"Programming/ai/math/","title":"AI Math","text":"<ul> <li>Linear Algebra for Machine Learning</li> </ul>"},{"location":"Programming/python/","title":"Python","text":"<p>VSCode dev env.</p> <p>TBD</p> <p>TBD</p>","tags":["python"]},{"location":"Programming/python/dev_env/","title":"VSCode python dev env.","text":"<p>Using vscode and <code>uv</code> to setup a python development environment.</p>","tags":["python","vscode","dev_env"]},{"location":"Programming/python/dev_env/#create-project-using-uv","title":"create project using uv","text":"<pre><code>uv init\n# create venv install pytest and update pyproject.toml\n</code></pre>","tags":["python","vscode","dev_env"]},{"location":"Programming/python/dev_env/#pytest","title":"pytest","text":"<pre><code>uv add --dev pytest\n</code></pre>","tags":["python","vscode","dev_env"]},{"location":"Programming/python/dev_env/#pyprojecttoml","title":"pyproject.toml","text":"<p>Add pytest settings</p> <pre><code>[tool.pytest.ini_options]\npythonpath = [\n  \".\"\n]\n</code></pre>","tags":["python","vscode","dev_env"]},{"location":"Programming/python/dev_env/#vscode","title":"VSCode","text":"","tags":["python","vscode","dev_env"]},{"location":"Programming/python/dev_env/#extensions","title":"Extensions","text":"<ul> <li>ruff</li> </ul>","tags":["python","vscode","dev_env"]},{"location":"Programming/python/dev_env/#settings","title":"Settings","text":"","tags":["python","vscode","dev_env"]},{"location":"Programming/python/dev_env/#vscode-python-autocomplete","title":"VSCode python autocomplete","text":"<pre><code>\"python.analysis.extraPaths\": [\n    \"${workspaceFolder}/src\"\n]\n</code></pre>","tags":["python","vscode","dev_env"]},{"location":"Programming/python/dev_env/#ruff","title":"ruff","text":"<pre><code>\"ruff.importStrategy\": \"useBundled\",\n\"editor.defaultFormatter\": \"charliermarsh.ruff\",\n\"editor.formatOnPaste\": true,\n\"editor.formatOnSave\": true,\n\"editor.formatOnSaveMode\": \"file\",\n\"editor.codeActionsOnSave\": {\n    \"source.organizeImports\": \"always\",\n    \"source.fixAll\": \"always\"\n},\n</code></pre>","tags":["python","vscode","dev_env"]},{"location":"Programming/python/dev_env/#ruff-settings","title":"ruff settings","text":"ruff.toml<pre><code>line-length = 88\nindent-width = 4\n\n[format]\nquote-style = \"double\"\nindent-style = \"space\"\nskip-magic-trailing-comma = false\nline-ending = \"auto\"\ndocstring-code-format = true\ndocstring-code-line-length = \"dynamic\"\n</code></pre>","tags":["python","vscode","dev_env"]},{"location":"Programming/qml/","title":"QML","text":"","tags":["qt","qml"]},{"location":"Programming/qml/#hello-world","title":"Hello World","text":"<p>uv</p> <p>Using uv package manager</p> <pre><code>pip install uv\n</code></pre> <pre><code># create virtual env.\nuv venv\n\n# source\nsource .venv/bin/activate\n\n# install qml\nuv install PySide6\n</code></pre>","tags":["qt","qml"]},{"location":"Programming/qml/#projects","title":"Projects","text":"<pre><code>\u2514\u2500\u2500 qml_tutorial\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 main.py\n    \u2514\u2500\u2500 main.qml\n</code></pre> main.py<pre><code>import sys\nfrom PySide6.QtWidgets import QApplication\nfrom PySide6.QtQml import QQmlApplicationEngine\n\n# Create the application instance\napp = QApplication(sys.argv)\n\n# Load the QML file\nengine = QQmlApplicationEngine()\nengine.load(\"main.qml\")\n\n# Exit if QML fails to load\nif not engine.rootObjects():\n    sys.exit(-1)\n\n# Run the application\nsys.exit(app.exec())\n</code></pre> main.qml<pre><code>import QtQuick 6.5\nimport QtQuick.Controls 6.5\n\nApplicationWindow {\n    visible: true\n    width: 400\n    height: 300\n    title: \"Hello QML with Python\"\n\n    Rectangle {\n        anchors.fill: parent\n        color: \"lightblue\"\n\n        Text {\n            text: \"Hello, World!\"\n            anchors.centerIn: parent\n            font.pixelSize: 24\n        }\n    }\n}\n</code></pre>","tags":["qt","qml"]},{"location":"Programming/vision/","title":"Computer Vision","text":"","tags":["vision"]},{"location":"ROS/","title":"ROS","text":"<p>Python</p> <p>C/CPP</p> <p>ROS Eco</p> <p>Dev Environment</p> <p>ROS world</p> <p>Zenoh</p>"},{"location":"ROS/dev_environment/","title":"ROS2 Dev Build Test Environment","text":"<p>Development</p> <p>Build</p> <p>TBD</p>"},{"location":"ROS/dev_environment/build/","title":"ROS2 Build Environment","text":"<ul> <li>Build ROS2 debian package using CPack</li> <li>Build ARM ROS2 packages using docker</li> </ul>","tags":["ros","build","docker"]},{"location":"ROS/dev_environment/build/ros_build_using_cpack/","title":"Using CPack to build ROS2 debian package","text":"<ul> <li>Read metadata from package.xml</li> <li>Support multiple architecture</li> </ul> <p>TBD</p> <p>Why not <code>bloom</code></p>","tags":["ros","build","cpack"]},{"location":"ROS/dev_environment/build/ros_build_using_cpack/#prerequisite","title":"Prerequisite","text":"<ul> <li><code>xmllint</code> is required to read package.xml file</li> </ul>","tags":["ros","build","cpack"]},{"location":"ROS/dev_environment/build/ros_build_using_cpack/#issue","title":"Issue","text":"<ul> <li>handle python packages automatically</li> <li>edit postinst file to install python package</li> <li>use rosdep to reslove python package reference automatically</li> </ul>","tags":["ros","build","cpack"]},{"location":"ROS/dev_environment/build/ros_build_using_cpack/#usage","title":"Usage","text":"<ul> <li>Include <code>Packing.cmake</code> in your <code>CMakeLists.txt</code> file</li> </ul> <pre><code>set(CMAKE_MODULE_PATH \"${CMAKE_SOURCE_DIR}/cmake\" ${CMAKE_MODULE_PATH})\ninclude(Packing)\n</code></pre> Packing.cmake<pre><code>option(OUTPUT_FOLDER \"OUTOUT_FOLDER\" \"\")\n\nexecute_process (\n    COMMAND bash -c \"echo 'cat //package/name/text()' | xmllint --shell ${CMAKE_CURRENT_SOURCE_DIR}/package.xml | sed '/^\\\\/ &gt;/d' | sed -z 's/\\\\n//g'\"\n    OUTPUT_VARIABLE ROS_PROJECT_NAME\n)\n\nexecute_process (\n    COMMAND bash -c \"echo 'cat //package/description/text()' | xmllint --shell ${CMAKE_CURRENT_SOURCE_DIR}/package.xml | sed '/^\\\\/ &gt;/d' | sed -z 's/\\\\n//g'\"\n    OUTPUT_VARIABLE ROS_PROJECT_DESCRIPTION\n)\n\nexecute_process (\n    COMMAND bash -c \"echo 'cat //package/maintainer/text()' | xmllint --shell ${CMAKE_CURRENT_SOURCE_DIR}/package.xml | sed '/^\\\\/ &gt;/d' | sed -z 's/\\\\n//g'\"\n    OUTPUT_VARIABLE ROS_PROJECT_MAINTAINER\n)\nexecute_process (\n    COMMAND bash -c \"echo 'cat //package/version/text()' | xmllint --shell ${CMAKE_CURRENT_SOURCE_DIR}/package.xml | sed '/^\\\\/ &gt;/d' | sed 's/&lt;[^&gt;]*&gt;//g' | sed -z 's/\\\\n//g'\"\n    OUTPUT_VARIABLE ROS_PACKAGE_VERSION\n)\n\nexecute_process (\n    COMMAND bash -c \"xmllint --xpath '//depend/text()' ${CMAKE_CURRENT_SOURCE_DIR}/package.xml | awk '{printf \\\"%s%s\\\", sep, $0; sep = \\\",\\\"}'\"\n    OUTPUT_VARIABLE DEPENDS\n)\n\nexecute_process( COMMAND uname -m COMMAND tr -d '\\n' OUTPUT_VARIABLE ARCHITECTURE )\n\nset(CPACK_PACKAGE_NAME ${ROS_PROJECT_NAME})\nset(CPACK_PACKAGE_DESCRIPTION_SUMMARY ${ROS_PROJECT_DESCRIPTION})\nset(CPACK_PACKAGE_VENDOR \"ROBOBE Company\")\nset(CPACK_PACKAGE_CONTACT \"${ROS_PROJECT_MAINTAINER}@dev.com\")\nset(CPACK_DEBIAN_PACKAGE_MAINTAINER \"${ROS_PROJECT_MAINTAINER}\")\nif (NOT DEFINED DEPENDS)\n    message(ERROR \"no depend tag in package.xml\")\nelse()\n    set(CPACK_DEBIAN_PACKAGE_DEPENDS ${DEPENDS})\nendif()\n\nset(CPACK_VERBATIM_VARIABLES YES)\n\nset(CPACK_PACKAGE_INSTALL_DIRECTORY ${CPACK_PACKAGE_NAME})\nif(${OUTPUT_FOLDER} STREQUAL \"\")\n    SET(CPACK_OUTPUT_FILE_PREFIX \"_packages\")\nelse()\n    SET(CPACK_OUTPUT_FILE_PREFIX \"${OUTPUT_FOLDER}\")\nendif()\n\n\nstring(REPLACE \".\" \";\" VERSION ${ROS_PACKAGE_VERSION})\nlist (GET VERSION 0 PROJECT_VERSION_MAJOR)\nlist (GET VERSION 1 PROJECT_VERSION_MINOR)\nlist (GET VERSION 2 PROJECT_VERSION_PATCH)\n\nset(CPACK_PACKAGE_VERSION_MAJOR ${PROJECT_VERSION_MAJOR})\nset(CPACK_PACKAGE_VERSION_MINOR ${PROJECT_VERSION_MINOR})\nset(CPACK_PACKAGE_VERSION_PATCH ${PROJECT_VERSION_PATCH})\n\nset (CPACK_PACKAGE_VERSION ${CPACK_PACKAGE_VERSION_MAJOR}.${CPACK_PACKAGE_VERSION_MINOR}.${CPACK_PACKAGE_VERSION_PATCH})\n\nset(CPACK_PACKAGING_INSTALL_PREFIX \"/opt/ros/humble\")\nset(CPACK_RESOURCE_FILE_README \"${CMAKE_CURRENT_SOURCE_DIR}/README.md\")\nSET(CMAKE_SYSTEM_NAME Linux)\n\n\nset(CPACK_OUTPUT_FILE_PREFIX \"${CMAKE_CURRENT_SOURCE_DIR}/deb\")\nset(ROS_VER $ENV{ROS_DISTRO})\nset(CPACK_PACKAGE_FILE_NAME \"ros-${ROS_VER}-${CMAKE_PROJECT_NAME}-${CPACK_PACKAGE_VERSION}-${ARCHITECTURE}\")\n# set(CPACK_DEBIAN_FILE_NAME DEB-DEFAULT)\nset(CPACK_GENERATOR \"DEB\")\n\ninclude(CPack)\n</code></pre>","tags":["ros","build","cpack"]},{"location":"ROS/dev_environment/build/ros_build_using_docker_cross_compile/","title":"ROS2 Build Environment","text":"","tags":["ros","build","docker"]},{"location":"ROS/dev_environment/build/ros_build_using_docker_cross_compile/#using-docker-to-build-ros2-packages-for-arm","title":"Using docker to build ROS2 packages for ARM","text":"<p>Using docker compose to run docker container , using compose it more struct and easy to track actions and versions.</p>","tags":["ros","build","docker"]},{"location":"ROS/dev_environment/build/ros_build_using_docker_cross_compile/#prerequisite","title":"Prerequisite","text":"<ul> <li>Build docker image for ARM</li> </ul>","tags":["ros","build","docker"]},{"location":"ROS/dev_environment/build/ros_build_using_docker_cross_compile/#usage","title":"Usage","text":"<ul> <li>Clean the build install folders</li> <li>From project workspace run</li> </ul> <pre><code>docker compose -f .devcontainer/arm_compose.yaml run my_service /bin/bash\n</code></pre> arm_compose.yaml<pre><code>version: '3.8'\n\nservices:\n  my_service:\n    image: humble/arm:dev\n    container_name: arm_build\n    volumes:\n      - ..:/workspace\n    hostname: arm\n    user: \"user:user\"\n    networks:\n      - my_network\n\nnetworks:\n  my_network:\n    driver: bridge\n</code></pre>","tags":["ros","build","docker"]},{"location":"ROS/dev_environment/build/ros_build_using_docker_cross_compile/#cpack","title":"CPack","text":"","tags":["ros","build","docker"]},{"location":"ROS/dev_environment/build/ros_build_using_docker_cross_compile/#manual","title":"Manual","text":"<ul> <li>Run <code>colcon build</code></li> <li>Change directory to <code>build/my_package</code></li> <li>Run cpack</li> </ul>","tags":["ros","build","docker"]},{"location":"ROS/dev_environment/build/ros_build_using_docker_cross_compile/#cpack-file","title":"CPack file","text":"CPack file <pre><code>option(OUTPUT_FOLDER \"OUTOUT_FOLDER\" \"\")\n\nexecute_process (\n    COMMAND bash -c \"echo 'cat //package/name/text()' | xmllint --shell ${CMAKE_CURRENT_SOURCE_DIR}/package.xml | sed '/^\\\\/ &gt;/d' | sed -z 's/\\\\n//g'\"\n    OUTPUT_VARIABLE ROS_PROJECT_NAME\n)\n\nexecute_process (\n    COMMAND bash -c \"echo 'cat //package/description/text()' | xmllint --shell ${CMAKE_CURRENT_SOURCE_DIR}/package.xml | sed '/^\\\\/ &gt;/d' | sed -z 's/\\\\n//g'\"\n    OUTPUT_VARIABLE ROS_PROJECT_DESCRIPTION\n)\n\nexecute_process (\n    COMMAND bash -c \"echo 'cat //package/maintainer/text()' | xmllint --shell ${CMAKE_CURRENT_SOURCE_DIR}/package.xml | sed '/^\\\\/ &gt;/d' | sed -z 's/\\\\n//g'\"\n    OUTPUT_VARIABLE ROS_PROJECT_MAINTAINER\n)\nexecute_process (\n    COMMAND bash -c \"echo 'cat //package/version/text()' | xmllint --shell ${CMAKE_CURRENT_SOURCE_DIR}/package.xml | sed '/^\\\\/ &gt;/d' | sed 's/&lt;[^&gt;]*&gt;//g' | sed -z 's/\\\\n//g'\"\n    OUTPUT_VARIABLE ROS_PACKAGE_VERSION\n)\n\nexecute_process (\n    COMMAND bash -c \"xmllint --xpath '//depend/text()' ${CMAKE_CURRENT_SOURCE_DIR}/package.xml | awk '{printf \\\"%s%s\\\", sep, $0; sep = \\\",\\\"}'\"\n    OUTPUT_VARIABLE DEPENDS\n)\n\nexecute_process( COMMAND uname -m COMMAND tr -d '\\n' OUTPUT_VARIABLE ARCHITECTURE )\n\nset(CPACK_PACKAGE_NAME ${ROS_PROJECT_NAME})\nset(CPACK_PACKAGE_DESCRIPTION_SUMMARY ${ROS_PROJECT_DESCRIPTION})\nset(CPACK_PACKAGE_VENDOR \"ROBOBE Company\")\nset(CPACK_PACKAGE_CONTACT \"${ROS_PROJECT_MAINTAINER}@dev.com\")\nset(CPACK_DEBIAN_PACKAGE_MAINTAINER \"${ROS_PROJECT_MAINTAINER}\")\nif (NOT DEFINED DEPENDS)\n    message(ERROR \"no depend tag in package.xml\")\nelse()\n    set(CPACK_DEBIAN_PACKAGE_DEPENDS ${DEPENDS})\nendif()\n\nset(CPACK_VERBATIM_VARIABLES YES)\n\nset(CPACK_PACKAGE_INSTALL_DIRECTORY ${CPACK_PACKAGE_NAME})\nif(${OUTPUT_FOLDER} STREQUAL \"\")\n    SET(CPACK_OUTPUT_FILE_PREFIX \"_packages\")\nelse()\n    SET(CPACK_OUTPUT_FILE_PREFIX \"${OUTPUT_FOLDER}\")\nendif()\n\n\nstring(REPLACE \".\" \";\" VERSION ${ROS_PACKAGE_VERSION})\nlist (GET VERSION 0 PROJECT_VERSION_MAJOR)\nlist (GET VERSION 1 PROJECT_VERSION_MINOR)\nlist (GET VERSION 2 PROJECT_VERSION_PATCH)\n\nset(CPACK_PACKAGE_VERSION_MAJOR ${PROJECT_VERSION_MAJOR})\nset(CPACK_PACKAGE_VERSION_MINOR ${PROJECT_VERSION_MINOR})\nset(CPACK_PACKAGE_VERSION_PATCH ${PROJECT_VERSION_PATCH})\n\nset (CPACK_PACKAGE_VERSION ${CPACK_PACKAGE_VERSION_MAJOR}.${CPACK_PACKAGE_VERSION_MINOR}.${CPACK_PACKAGE_VERSION_PATCH})\n\nset(CPACK_PACKAGING_INSTALL_PREFIX \"/opt/ros/humble\")\nset(CPACK_RESOURCE_FILE_README \"${CMAKE_CURRENT_SOURCE_DIR}/README.md\")\nSET(CMAKE_SYSTEM_NAME Linux)\n\n\nset(CPACK_OUTPUT_FILE_PREFIX \"${CMAKE_CURRENT_SOURCE_DIR}/deb\")\nset(ROS_VER $ENV{ROS_DISTRO})\nset(CPACK_PACKAGE_FILE_NAME \"ros-${ROS_VER}-${CMAKE_PROJECT_NAME}-${CPACK_PACKAGE_VERSION}-${ARCHITECTURE}\")\n# set(CPACK_DEBIAN_FILE_NAME DEB-DEFAULT)\nset(CPACK_GENERATOR \"DEB\")\n\ninclude(CPack)\n</code></pre>","tags":["ros","build","docker"]},{"location":"ROS/dev_environment/dev/","title":"Using VSCode devcontainer and docker as dev environment","text":"","tags":["ros","vscode","docker","devcontainer","dev environment"]},{"location":"ROS/dev_environment/dev/#project-docker-images","title":"Project Docker images","text":"","tags":["ros","vscode","docker","devcontainer","dev environment"]},{"location":"ROS/dev_environment/dev/#common-ros-image","title":"Common ROS image","text":"<p>Docker file base on <code>ubuntu</code> base image version depend on ROS version.  It can be base on <code>nvidia</code> cuda image.</p> <p>The image include <code>ros core</code> installation and common dev tools , it add none root user name <code>user</code> (id 1000)</p> <p>TBD: include gazebo in the image (current version include it)</p>","tags":["ros","vscode","docker","devcontainer","dev environment"]},{"location":"ROS/dev_environment/dev/#project-runtime","title":"Project runtime","text":"<p>Docker file base on <code>common_ros</code> image, it include all project dependencies <code>deb</code>,<code>python</code> and others. It use for check project debian (deb) package installation. The main propose it to be the docker image for Application/project production deployment. TBD: use this image for CI/CD</p>","tags":["ros","vscode","docker","devcontainer","dev environment"]},{"location":"ROS/dev_environment/dev/#project-devbuild","title":"Project Dev/Build","text":"<p>Docker file base on <code>runtime</code> image, it include all other tool for development, test and build. Include ROS dev tools and other helper tools for day to day development.</p>","tags":["ros","vscode","docker","devcontainer","dev environment"]},{"location":"ROS/dev_environment/dev/#ongoing","title":"Ongoing","text":"<p>Dockerfile That use by <code>devcontainer</code> it lite Dockerfile for all things and ongoing installation. The idea is to move the ongoing installation and settings to the project runtime and dev images. Keep the <code>devcontainer</code> Dockerfile lite and fast to build.</p> <p>TBD</p> <p>Separate the <code>ros common</code> image to <code>OS</code> and <code>ROS Core</code> images.</p>","tags":["ros","vscode","docker","devcontainer","dev environment"]},{"location":"ROS/python/","title":"ROS Python","text":"<p>pytest</p> <p>TBD</p> <p>TBD</p> <ul> <li>using ament_cmake to create python package</li> </ul>"},{"location":"ROS/python/python_ament_cmake/","title":"python ament cmake","text":"<p>Use ament_cmake to create python package</p> <ul> <li>Create ament package</li> <li>Add folder <code>my_cmake_py_pkg</code> </li> <li>Add <code>__init__.py</code> in <code>my_cmake_py_pkg</code> to mark as python module</li> <li>Add node python file <code>my_node.py</code></li> <li>Set <code>my_node.py</code> as executable</li> <li>Add shabang <code>#!/usr/bin/env python3</code> in <code>my_node.py</code></li> <li>Edit to <code>CMakeLists.txt</code></li> <li>Edit <code>package.xml</code></li> </ul>","tags":["ros","python","cmake"]},{"location":"ROS/python/python_ament_cmake/#create-package","title":"Create package","text":"<pre><code>ros2 pkg create my_cmake_py_pkg --build-type ament_cmake\n</code></pre>","tags":["ros","python","cmake"]},{"location":"ROS/python/python_ament_cmake/#cmakeliststxt","title":"CMakeLists.txt","text":"CMakeLists.txt<pre><code>cmake_minimum_required(VERSION 3.8)\nproject(my_cmake_py_pkg)\n\nif(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES \"Clang\")\n  add_compile_options(-Wall -Wextra -Wpedantic)\nendif()\n\n# find dependencies\nfind_package(ament_cmake REQUIRED)\nfind_package(ament_cmake_python REQUIRED)\n\n# install python package\nament_python_install_package(${PROJECT_NAME})\n\nset(NODES\n  my_cmake_py_pkg/my_node.py\n)\n\n\ninstall(PROGRAMS\n    ${NODES}\nDESTINATION lib/${PROJECT_NAME}\n)\n\n\nament_package()\n</code></pre>","tags":["ros","python","cmake"]},{"location":"ROS/python/python_ament_cmake/#packagexml","title":"package.xml","text":"<p>Add <code>ament_cmake_python</code> in <code>buildtool_depend</code></p> <pre><code>&lt;buildtool_depend&gt;ament_cmake_python&lt;/buildtool_depend&gt;\n</code></pre>","tags":["ros","python","cmake"]},{"location":"ROS/python/python_ament_cmake/#usage","title":"usage","text":"<pre><code>ros2 run my_cmake_py_pkg my_node.py\n</code></pre>","tags":["ros","python","cmake"]},{"location":"ROS/python/python_ament_cmake/#vscode-tips","title":"VScode tips","text":"<p>Install <code>chmod</code> extension to set handle executable bit on file</p> <p>chmod extension</p>","tags":["ros","python","cmake"]},{"location":"ROS/python/ros_unit_test/","title":"ROS2 Python Unit Test","text":"","tags":["ros2","python","test","pytest"]},{"location":"ROS/python/ros_unit_test/#simple-very-simple-demo","title":"Simple very simple demo","text":"<p>Show how to use pytest in ros2 python package using ament_cmake </p>","tags":["ros2","python","test","pytest"]},{"location":"ROS/python/ros_unit_test/#package","title":"package","text":"<p>Using <code>ament_cmake</code> to create a python package</p> <pre><code>\u251c\u2500\u2500 CMakeLists.txt\n\u251c\u2500\u2500 package.xml\n\u251c\u2500\u2500 ros_py\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2514\u2500\u2500 simple_node.py\n\u2514\u2500\u2500 test\n    \u2514\u2500\u2500 test_simple.py\n</code></pre>","tags":["ros2","python","test","pytest"]},{"location":"ROS/python/ros_unit_test/#pytest-test","title":"pytest test","text":"simple_node.py<pre><code>def test_math():\n    assert 2 + 2 == 4\n</code></pre>","tags":["ros2","python","test","pytest"]},{"location":"ROS/python/ros_unit_test/#cmakeliststxt","title":"CMakeLists.txt","text":"<ul> <li>Add <code>ament_add_pytest_test</code> to the CMakeLists.txt file to run the test</li> </ul> <pre><code>if(BUILD_TESTING)\n  find_package(ament_cmake_pytest REQUIRED)\n  ament_add_pytest_test(test_math test/test_simple.py)\nendif()\n</code></pre>","tags":["ros2","python","test","pytest"]},{"location":"ROS/python/ros_unit_test/#using-colcon","title":"using colcon","text":"<pre><code># run package test\ncolcon test --packages-select ros_py  --event-handlers console_direct+\n\n# run specific test\ncolcon test --packages-select ros_py --pytest-args -k test_math --event-handlers console_direct+\n</code></pre>","tags":["ros2","python","test","pytest"]},{"location":"ROS/ros_eco/","title":"ROS Eco system","text":"<p>Ros packages and tools that are used in the ROS eco system.</p> <p>ROS2 launch</p> <p>ROS2 Control</p> <p>ROS2 Packages</p> <p>URDF and XACRO</p> <p>Colcon</p>"},{"location":"ROS/ros_eco/colcon/","title":"Colcon","text":"<p>Tips / Settings</p> <p>TBD</p> <p>TBD</p>","tags":["ros","colcon"]},{"location":"ROS/ros_eco/colcon/#colcon-clean","title":"colcon-clean","text":"<p>Extension for colcon to clean package workspaces</p> <pre><code>sudo apt install python3-colcon-clean\n</code></pre> Usage<pre><code>colcon clean workspace\n\ncolcon clean packages \n</code></pre>","tags":["ros","colcon"]},{"location":"ROS/ros_eco/colcon/tips_settings/","title":"Tips / Settings","text":"","tags":["ros","colcon","tips","settings"]},{"location":"ROS/ros_eco/colcon/tips_settings/#colcon-auto-completion","title":"Colcon auto completion","text":"<p>colcon site</p> <p>source <code>colcon_argcomplete</code> in your <code>.bashrc</code> file</p> <pre><code># debian install location\nsource /usr/share/colcon_argcomplete/hook/colcon-argcomplete.bash\n</code></pre>","tags":["ros","colcon","tips","settings"]},{"location":"ROS/ros_eco/launch/","title":"ROS launch","text":"<pre><code>from launch import LaunchDescription\nfrom launch_ros.actions import Node\n\ndef generate_launch_description():\n    ld = LaunchDescription()\n\n    node = Node(\n        package='your_package_name',\n        executable='your_node_executable',\n        name='your_node_name',\n        output='screen'\n    )\n\n    ld.add_action(node)\n\n    return ld\n</code></pre> <pre><code>install(DIRECTORY launch/\n  DESTINATION share/${PROJECT_NAME}/launch\n)\n</code></pre>","tags":["ros","launch"]},{"location":"ROS/ros_eco/packages/","title":"ROS Eco system","text":"<p>Ros packages and tools that are used in the ROS eco system.</p> <p>Diagnostics</p> <p>TBD</p> <p>TBD</p> <p>TBD</p> <p>TBD</p> <p>TBD</p>"},{"location":"ROS/ros_eco/packages/#message_filters","title":"Message_filters","text":"<p>Message_filters is a collection of message \"filters\" which take messages in. and may or may not output the message at some time in the future, depending on a policy defined for that filter. more</p>"},{"location":"ROS/ros_eco/packages/ros_package_message_filter/","title":"Message Filters","text":"<p>Message_filters is a collection of message \"filters\" which take messages in. and may or may not output the message at some time in the future, depending on a policy defined for that filter. more</p> <p>Tutorials</p>","tags":["ros","packages","message_filters"]},{"location":"ROS/ros_eco/packages/ros_package_message_filter/#timesynchronizer-demo","title":"TimeSynchronizer demo","text":"<p>TimeSynchronizer listens on multiple input message and invokes the callback when it has a collection of messages with matching timestamps.</p> TimeSynchronizer <pre><code>#!/usr/bin/env python3\n\nimport rclpy\nfrom rclpy.node import Node\nfrom rclpy.time import Time\n\nimport message_filters\nfrom geometry_msgs.msg import PointStamped\n\nclass MyNode(Node):\n    def __init__(self):\n        node_name=\"TimeSynchronizer_demo\"\n        super().__init__(node_name)\n        self.get_logger().info(\"Hello ROS2\")\n        self.pub1 = self.create_publisher(PointStamped, \"topic1\", 10)\n        self.pub2 = self.create_publisher(PointStamped, \"topic2\", 10)\n\n        sub1 = message_filters.Subscriber(self, PointStamped, \"topic1\")\n        sub2 = message_filters.Subscriber(self, PointStamped, \"topic2\")\n\n        ts = message_filters.TimeSynchronizer([sub1, sub2], 10)\n        ts.registerCallback(self.cb)\n        self.counter = 0\n        self.t1 = self.create_timer(1.0, self.timer_cb)\n\n    def cb(self, point1: PointStamped, point2: PointStamped):\n        self.get_logger().info(f\"----{Time.from_msg(point1.header.stamp)}\")\n\n    def timer_cb(self):\n        self.counter += 1\n        point = PointStamped()\n        sync_time = self.get_clock().now().to_msg()\n        point.header.stamp = sync_time\n        point.point.x = 1.0\n        self.pub1.publish(point)\n        if not (self.counter % 2 == 0):\n            point2 = PointStamped()\n            point2.header.stamp = sync_time\n            point2.point.x = 2.0\n            self.pub2.publish(point2)\n\n\ndef main(args=None):\n    rclpy.init(args=args)\n    node = MyNode()\n    rclpy.spin(node)\n    node.destroy_node()\n    rclpy.shutdown()\n\nif __name__ == '__main__':\n    main()\n</code></pre> <p>The demo publish two PointStamped messages with the same timestamp  - one message is published every second  - other every two seconds. The TimeSynchronizer will invoke the callback when it has both in the same time , meaning it publish every two seconds.</p>","tags":["ros","packages","message_filters"]},{"location":"ROS/ros_eco/packages/ros_package_message_filter/#approximatetimesynchronizer-demo","title":"ApproximateTimeSynchronizer demo","text":"<p>Like the TimeSynchronizer demo, but with a time window. The callback will be invoked when the timestamps of the messages are within the time window. the slop argument is the time window in seconds.</p> ApproximateTimeSynchronizer <pre><code>#!/usr/bin/env python3\n\nimport rclpy\nfrom rclpy.node import Node\nfrom rclpy.time import Time\nimport time\nimport message_filters\nfrom geometry_msgs.msg import PointStamped\n\nclass MyNode(Node):\n    def __init__(self):\n        node_name=\"ApproximateTimeSynchronizer_demo\"\n        super().__init__(node_name)\n        self.get_logger().info(\"Hello ROS2\")\n        self.pub1 = self.create_publisher(PointStamped, \"topic1\", 10)\n        self.pub2 = self.create_publisher(PointStamped, \"topic2\", 10)\n\n        sub1 = message_filters.Subscriber(self, PointStamped, \"topic1\")\n        sub2 = message_filters.Subscriber(self, PointStamped, \"topic2\")\n\n        ts = message_filters.ApproximateTimeSynchronizer([sub1, sub2], 10, slop=0.2)\n        ts.registerCallback(self.cb)\n        self.counter = 0\n        self.t1 = self.create_timer(1.0, self.timer_cb)\n\n    def cb(self, point1: PointStamped, point2: PointStamped):\n        self.get_logger().info(f\"----{Time.from_msg(point1.header.stamp)}\")\n\n    def timer_cb(self):\n        self.counter += 1\n        point = PointStamped()\n        point.header.stamp = self.get_clock().now().to_msg()\n        point.point.x = 1.0\n        self.pub1.publish(point)\n        time.sleep(0.1)\n        point2 = PointStamped()\n        point2.header.stamp = self.get_clock().now().to_msg()\n        point2.point.x = 2.0\n        self.pub2.publish(point2)\n\n\ndef main(args=None):\n    rclpy.init(args=args)\n    node = MyNode()\n    rclpy.spin(node)\n    node.destroy_node()\n    rclpy.shutdown()\n\nif __name__ == '__main__':\n    main()\n</code></pre> <p>The demo publish two PointStamped messages with timestamps that are within 0.1 seconds of each other</p> <p>The ApproximateTimeSynchronizer will invoke the callback when it has both in the same time window, meaning it publish every second.</p>","tags":["ros","packages","message_filters"]},{"location":"ROS/ros_eco/packages/diagnostics/","title":"ROS diagnostics","text":"<p>ROS diagnostics gives you the ability to monitor your system. There are two components in its architecture:</p> <ul> <li>updater</li> <li>aggregator</li> </ul> <p>The updater publishes diagnostic status messages on the <code>/diagnostics</code> topic, and the aggregator listens to these statuses, aggregates them, and publishes the results on the <code>/diagnostics_agg</code> topic.</p> <p>A system can have multiple updaters. They are meant to communicate with devices such as motors, sensors, computers, batteries, etc, in order to retrieve and publish relevant status data. The information being published on the /diagnostics topic is flat  </p> <p>The aggregator collects, categorizes, and groups the statuses from all the system components. You can take a look at what is being published on the /diagnostics and /diagnostics_agg topics with the rqt_runtime_monitor and rqt_robot_monitor tools</p>","tags":["ros","diagnostics"]},{"location":"ROS/ros_eco/packages/diagnostics/#diagnostictask","title":"DiagnosticTask","text":"<p>DiagnosticTask is an abstract base class for collecting diagnostic data. </p> <p>A DiagnosticTask has a name, and a function that is called to create a DiagnosticStatusWrapper. </p> <p>DiagnosticsTask subclass by</p> <ul> <li>CompositeDiagnosticTask</li> <li>FrequencyStatus</li> <li>GenericFunctionDiagnosticTask</li> <li>Heartbeat</li> <li>TimeStampStatus</li> </ul>","tags":["ros","diagnostics"]},{"location":"ROS/ros_eco/packages/diagnostics/#diagnostics_msg","title":"diagnostics_msg","text":"<ul> <li>DiagnosticStatus.msg</li> <li>DiagnosticArray</li> </ul> <pre><code>octet OK=0\noctet WARN=1\noctet ERROR=2\noctet STALE=3\noctet level\nstring name\nstring message\nstring hardware_id\ndiagnostic_msgs/msg/KeyValue[] values\n</code></pre>","tags":["ros","diagnostics"]},{"location":"ROS/ros_eco/packages/diagnostics/#diagnostic_aggregator","title":"diagnostic_aggregator","text":"<p>Aggregator is a node that subscribes to <code>/diagnostics</code>, processes it and republishes aggregated data on <code>/diagnostics_agg</code>.</p> <p>The aggregator creates a series of analyzers to handle incoming <code>DiagnosticStatus</code></p> <p>API</p> <p></p>","tags":["ros","diagnostics"]},{"location":"ROS/ros_eco/packages/diagnostics/#diagnostics-viewers","title":"diagnostics viewers","text":"install<pre><code>sudo apt install ros-humble-rqt-robot-monitor\nsudo apt install ros-humble-rqt-runtime-monitor\n</code></pre>","tags":["ros","diagnostics"]},{"location":"ROS/ros_eco/packages/diagnostics/#demos","title":"Demos","text":"<ul> <li>Diagnostic status function - - minimal implementation as diagnostic function</li> <li>DiagnosticTask class - minimal implementation as diagnostic task class</li> <li>Builtin tasks (FrequencyStatus)</li> <li>Remove task</li> <li>Composite task</li> </ul>","tags":["ros","diagnostics"]},{"location":"ROS/ros_eco/packages/diagnostics/#reference","title":"Reference","text":"<ul> <li>REP-107 Diagnostic System for Robots Running ROS</li> <li>ros diagnostic</li> <li>wiki</li> <li>python example</li> </ul>","tags":["ros","diagnostics"]},{"location":"ROS/ros_eco/packages/diagnostics/#projects-to-check","title":"projects to check","text":"<ul> <li>rviz_2d_overlay_plugins)</li> </ul>","tags":["ros","diagnostics"]},{"location":"ROS/ros_eco/urdf_xacro/","title":"URDF and XACRO","text":"","tags":["xacro","urdf"]},{"location":"ROS/ros_world/","title":"ROS World","text":"<p>Navigation and Localization</p> <p>Perception</p> <p>DDS</p>"},{"location":"ROS/ros_world/dds/","title":"DDS","text":"<ul> <li>[]</li> </ul>","tags":["dds"]},{"location":"ROS/ros_world/dds/cyclone_large_message_drop/","title":"Send image message across ROS using cyclonedds","text":"<ul> <li>Ubuntu 22.04</li> <li>Humble</li> <li>Cyclonedds</li> </ul>","tags":["ros","dds","cyclonedds","image","large message"]},{"location":"ROS/ros_world/dds/cyclone_large_message_drop/#demo","title":"Demo","text":"<p>publish Image </p> cyclonedds.xml<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;\n&lt;CycloneDDS xmlns=\"https://cdds.io/config\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"https://cdds.io/config https://raw.githubusercontent.com/eclipse-cyclonedds/cyclonedds/master/etc/cyclonedds.xsd\"&gt;\n    &lt;Domain Id=\"any\"&gt;\n        &lt;Internal&gt;\n            &lt;SocketReceiveBufferSize min=\"20MB\"&gt;&lt;/SocketReceiveBufferSize&gt;\n        &lt;/Internal&gt;\n    &lt;/Domain&gt;\n&lt;/CycloneDDS&gt;\n</code></pre> <p>Increased my <code>/proc/sys/net/core/rmem_max</code> to 30MB</p> <pre><code>echo 30000000 | sudo tee /proc/sys/net/core/rmem_max\n</code></pre>","tags":["ros","dds","cyclonedds","image","large message"]},{"location":"ROS/ros_world/dds/cyclone_large_message_drop/#use-cycloneddsxml","title":"use cyclonedds.xml","text":"<pre><code>export CYCLONEDDS_URI=file://$PWD/cyclonedds.xml\n</code></pre> publisher<pre><code>RMW_IMPLEMENTATION=rmw_cyclonedds_cpp ros2 run cpp_demos simple_img_pub\n</code></pre> subscriber<pre><code>RMW_IMPLEMENTATION=rmw_cyclonedds_cpp  ros2 run cpp_demos simple_img_sub \n</code></pre> simple_img_pub.cpp<pre><code>#include &lt;chrono&gt;\n#include &lt;functional&gt;\n#include &lt;memory&gt;\n#include &lt;string&gt;\n#include &lt;thread&gt;\n#include &lt;rclcpp/rclcpp.hpp&gt;\n#include &lt;rclcpp/clock.hpp&gt;\n#include &lt;opencv2/opencv.hpp&gt;\n#include &lt;rmw/qos_profiles.h&gt;\n#include &lt;rclcpp/qos.hpp&gt;\n#include &lt;rclcpp/time.hpp&gt;\n// #include &lt;std_msgs/msg/string.hpp&gt;\n// #include &lt;sensor_msgs/msg/image.hpp&gt;\n// #include &lt;cv_bridge/cv_bridge.h&gt;\n// #include &lt;std_msgs/msg/header.hpp&gt;\n#include \"custom_msg/msg/image.hpp\"\n\nusing namespace std::chrono_literals;\n\nvoid fill_loaned_message(\n  rclcpp::LoanedMessage&lt;custom_msg::msg::Image&gt; &amp; loanedMsg,\n  const cv::Mat &amp; frame, uint64_t timestamp,\n  uint64_t count)\n{\n  auto &amp;msg = loanedMsg.get();\n  auto size = frame.elemSize() * frame.total();\n  if (size &gt; custom_msg::msg::Image::MAX_SIZE) {\n    std::stringstream s;\n    s &lt;&lt; \"MAX_SIZE exceeded - message requires \" &lt;&lt; size &lt;&lt; \"bytes\\n\";\n    throw std::runtime_error(s.str());\n  }\n\n  msg.rows = frame.rows;\n  msg.cols = frame.cols;\n  msg.size = size;\n  msg.channels = frame.channels();\n  msg.type = frame.type();\n  msg.offset = 0;  // TODO(matthiaskillat) alignment?\n  msg.count = count;\n  msg.timestamp = timestamp;\n\n  // TODO(matthiaskillat): avoid if possible\n  std::memcpy(msg.data.data(), frame.data, size);\n}\n\nclass MinimalPublisher : public rclcpp::Node\n{\npublic:\n  MinimalPublisher()\n      : Node(\"minimal_publisher\")\n  {\n    // auto qos = rclcpp::SensorDataQoS();\n    auto qos = rclcpp::QoS(rclcpp::KeepLast(1), rmw_qos_profile_sensor_data);\n    // auto qos = rclcpp::QoS(rclcpp::KeepLast(1));\n    // publisher_ = this-&gt;create_publisher&lt;sensor_msgs::msg::Image&gt;(\"topic\", qos);\n    publisher_ = this-&gt;create_publisher&lt;custom_msg::msg::Image&gt;(\"topic\", qos);\n    timer_ = this-&gt;create_wall_timer(\n        1000ms, std::bind(&amp;MinimalPublisher::timer_callback, this));\n  }\n\nprivate:\n  void timer_callback()\n  {\n    cv::Mat img(cv::Size(640, 480), CV_8UC3);\n    auto size = img.elemSize()*img.total();\n    RCLCPP_INFO_STREAM(this-&gt;get_logger(), size);\n    cv::randu(img, cv::Scalar(0, 0, 0), cv::Scalar(255, 255, 255));\n    rclcpp::Time now = this-&gt;get_clock()-&gt;now();\n    // auto message = sensor_msgs::msg::Image();\n    // auto my_header = std_msgs::msg::Header();\n    // my_header.stamp = now;\n    auto sec_as_tin64 = static_cast&lt;int64&gt;(now.seconds() * 1e9);\n    RCLCPP_INFO_STREAM(this-&gt;get_logger(), sec_as_tin64);\n    auto msg = this-&gt;publisher_-&gt;borrow_loaned_message();\n    fill_loaned_message(msg,\n      img,\n      sec_as_tin64,\n      fid_++);\n    // auto msg = cv_bridge::CvImage(my_header, \"bgr8\", img).toImageMsg();\n    this-&gt;publisher_-&gt;publish(std::move(msg));\n\n    // RCLCPP_INFO_STREAM(this-&gt;get_logger(), \"\"&lt;&lt;(c-message.header.stamp).seconds());\n  }\n  rclcpp::TimerBase::SharedPtr timer_;\n  rclcpp::Publisher&lt;custom_msg::msg::Image&gt;::SharedPtr publisher_;\n  int fid_ = 0;\n};\n\nint main(int argc, char *argv[])\n{\n  rclcpp::init(argc, argv);\n  auto node = std::make_shared&lt;MinimalPublisher&gt;();\n  rclcpp::spin(node);\n  rclcpp::shutdown();\n  return 0;\n}\n</code></pre> simple_img_sub.cpp<pre><code>#include &lt;memory&gt;\n#include &lt;rclcpp/rclcpp.hpp&gt;\n// #include &lt;sensor_msgs/msg/image.hpp&gt;\n#include &lt;rclcpp/qos.hpp&gt;\n#include &lt;rclcpp/time.hpp&gt;\n#include &lt;rmw/qos_profiles.h&gt;\n// #include &lt;cv_bridge/cv_bridge.h&gt;\n#include &lt;opencv2/opencv.hpp&gt;\n#include \"custom_msg/msg/image.hpp\"\n\nvoid from_message(const custom_msg::msg::Image::SharedPtr &amp;msg, cv::Mat &amp;frame)\n{\n    void *buffer = msg-&gt;data.data();\n    frame = cv::Mat(msg-&gt;rows, msg-&gt;cols, msg-&gt;type, buffer);\n}\n\nclass MinimalSub : public rclcpp::Node\n{\npublic:\n    MinimalSub() : Node(\"minimal_img_sub\")\n    {\n        RCLCPP_INFO_STREAM(this-&gt;get_logger(), \"hello sub\");\n        // auto qos = rclcpp::QoS(rclcpp::KeepLast(1));\n        auto qos = rclcpp::QoS(rclcpp::KeepLast(1), rmw_qos_profile_sensor_data);\n        sub_ = this-&gt;create_subscription&lt;custom_msg::msg::Image&gt;(\"topic\", qos, std::bind(&amp;MinimalSub::img_handler, this, std::placeholders::_1));\n    }\n\nprivate:\n    void img_handler(custom_msg::msg::Image::SharedPtr msg)\n    {\n        cv::Mat frame;\n        from_message(msg, frame);\n\n        auto now = this-&gt;get_clock()-&gt;now();\n        auto sec_as_tin64 = static_cast&lt;int64&gt;(now.seconds() * 1e9);\n\n        // auto msg_time = rclcpp::Duration::from_seconds(msg-&gt;timestamp);\n        RCLCPP_INFO_STREAM(this-&gt;get_logger(), (sec_as_tin64 - msg-&gt;timestamp)/1e9);\n        cv::imshow(\"debug\", frame);\n        cv::waitKey(1);\n    }\n    rclcpp::Subscription&lt;custom_msg::msg::Image&gt;::SharedPtr sub_;\n};\n\nint main(int argc, char *argv[])\n{\n    rclcpp::init(argc, argv);\n    auto node = std::make_shared&lt;MinimalSub&gt;();\n    rclcpp::spin(node);\n    rclcpp::shutdown();\n    return 0;\n}\n</code></pre> Image.msg<pre><code>uint32 rows\nuint32 cols\nuint8 channels\nuint8 type\nuint32 offset\nuint32 size\nuint64 count\nuint64 timestamp\n\nuint32 MAX_SIZE=921600\nchar[921600] data\n</code></pre> CMakeLists.txt<pre><code>cmake_minimum_required(VERSION 3.8)\nproject(cpp_demos)\n\nif(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES \"Clang\")\n  add_compile_options(-Wall -Wextra -Wpedantic)\nendif()\n\n# find dependencies\nfind_package(ament_cmake REQUIRED)\nfind_package(rclpy REQUIRED)\nfind_package(rclcpp REQUIRED)\nfind_package(OpenCV REQUIRED)\nfind_package(custom_msg REQUIRED)\nfind_package(example_interfaces REQUIRED)\n\ninclude_directories(include ${OpenCV_INCLUDE_DIRS})\n\n\n\n# # img pub\nadd_executable(simple_img_pub src/simple_img_pub.cpp)\nament_target_dependencies(simple_img_pub rclcpp custom_msg OpenCV)\n\n# # img sub\nadd_executable(simple_img_sub src/simple_img_sub.cpp)\nament_target_dependencies(simple_img_sub rclcpp  OpenCV custom_msg)\n\ninstall(TARGETS\n  simple_img_pub\n  simple_img_sub\n  DESTINATION lib/${PROJECT_NAME})\n\n\nament_package()\n</code></pre>","tags":["ros","dds","cyclonedds","image","large message"]},{"location":"ROS/ros_world/dds/cyclone_large_message_drop/#reference","title":"Reference","text":"<ul> <li> Reduce how eager CycloneDDS is in retransmits #484 </li> </ul>","tags":["ros","dds","cyclonedds","image","large message"]},{"location":"ROS/zenoh/","title":"Zenoh","text":"<p>Core</p> <p>Python bindings</p> <p>Zenoh pico</p>","tags":["zenoh"]},{"location":"ROS/zenoh/#-zenoh-json5-configuration-schema","title":"- zenoh json5 configuration schema","text":"","tags":["zenoh"]},{"location":"ROS/zenoh/#references","title":"References","text":"<ul> <li>Zenoh</li> </ul>","tags":["zenoh"]},{"location":"ROS/zenoh/python_bindings/","title":"Zenoh Python bindings","text":"<pre><code>pip install eclipse-zenoh\n</code></pre>","tags":["zenoh","python"]},{"location":"ROS/zenoh/python_bindings/#examples","title":"Examples","text":"","tags":["zenoh","python"]},{"location":"ROS/zenoh/python_bindings/#pubsub","title":"Pub/Sub","text":"<p>Simple pub sub</p> <pre><code>import zenoh\nimport time\nimport multiprocessing\n\nKEY_EXPRESSION = \"demo/example\"\n\ndef publisher():\n    config = zenoh.Config()\n    session = zenoh.open(config)\n    pub = session.declare_publisher(KEY_EXPRESSION)\n    while True:\n        pub.put('Hello, Zenoh!')\n        time.sleep(1)\n\ndef subscriber():\n    config = zenoh.Config()\n    session = zenoh.open(config)\n    sub = session.declare_subscriber(KEY_EXPRESSION, lambda sample: print(f'Received: {sample.payload.to_string()}'))\n    while True:\n        time.sleep(1)\n\nif __name__ == '__main__':\n    pub_process = multiprocessing.Process(target=publisher)\n    sub_process = multiprocessing.Process(target=subscriber)\n\n    pub_process.start()\n    sub_process.start()\n\n    pub_process.join()\n    sub_process.join()\n</code></pre>","tags":["zenoh","python"]},{"location":"ROS/zenoh/ros_bridge/","title":"Zenoh ROS Bridge","text":"<p>Using zenoh bridge to pub/sub message from python script to ROS2 and vice versa.</p>","tags":["zenoh","ros","bridge"]},{"location":"ROS/zenoh/ros_bridge/#install-zenoh-plugin-ros2dds","title":"Install zenoh-plugin-ros2dds","text":"<p>Download and extract , bridge standalone executable </p> <p>zenoh-plugin-ros2dds-1.2.0-x86_64-unknown-linux-gnu-standalone.zip </p>","tags":["zenoh","ros","bridge"]},{"location":"ROS/zenoh/ros_bridge/#install-pycdr","title":"Install pycdr","text":"<p>The IDL part of the CycloneDDS package as standalone version, to support packages that need CDR (de)serialisation without the Cyclone DDS API.</p> <pre><code>pip install pycdr2\n</code></pre>","tags":["zenoh","ros","bridge"]},{"location":"ROS/zenoh/ros_bridge/#sub-demo","title":"Sub Demo","text":"<p>Send ROS2 messages to zenoh and receive it using python script</p> Terminal 1<pre><code>export ROS_DISTRO=humble\n./zenoh-bridge-ros2dds\n</code></pre> Terminal 2<pre><code>ros2 topic pub /my_int32_topic std_msgs/msg/Int32 \"{data: 10}\" --rate 1\n</code></pre> <pre><code>import zenoh\nfrom dataclasses import dataclass\nfrom pycdr2 import IdlStruct \nfrom pycdr2.types import int32\nimport time\n\n@dataclass\nclass Int32(IdlStruct, typename=\"Int32\"):\n    data: int32\n\n\ndef callback(sample):\n    msg = Int32.deserialize(bytes(sample.payload))\n    print(f\"Received: {msg.data}\")\n\n\nconf = zenoh.Config()    \nsession = zenoh.open(conf)\nsub = session.declare_subscriber('my_int32_topic', callback)\n\nwhile True:\n    time.sleep(1)\n</code></pre>","tags":["zenoh","ros","bridge"]},{"location":"ROS/zenoh/ros_bridge/#pub-demo","title":"Pub Demo","text":"<p>Pub ROS2 messages to zenoh and subscribe using ROS</p> Terminal 1<pre><code>export ROS_DISTRO=humble\n./zenoh-bridge-ros2dds\n</code></pre> <pre><code>import zenoh\nfrom dataclasses import dataclass\nfrom pycdr2 import IdlStruct \nfrom pycdr2.types import int32\nimport time\n\n@dataclass\nclass Int32(IdlStruct, typename=\"Int32\"):\n    data: int32\n\nconf = zenoh.Config()    \nsession = zenoh.open(conf)\ncounter = 0\nwhile True:\n    time.sleep(1)\n    session.put('my_int32_topic', Int32(data=counter).serialize())\n    counter += 1\n    print(f\"Published: {counter}\")\n</code></pre>","tags":["zenoh","ros","bridge"]},{"location":"Robotics/","title":"Robotics","text":"<p>sensors</p> <p>Block 2 Description</p> <p>Block 3 Description</p> <p>Block 4 Description</p> <p>Block 5 Description</p> <p>Block 6 Description</p>"},{"location":"Robotics/sensors/","title":"Sensors","text":"<p>imu</p> <p>Block 2 Description</p> <p>Block 3 Description</p> <p>Block 4 Description</p> <p>Block 5 Description</p> <p>Block 6 Description</p>"},{"location":"Robotics/sensors/imu/","title":"IMU","text":"","tags":["imu","robotics","sensors"]},{"location":"Robotics/sensors/imu/#to-read-and-watch","title":"To read and watch","text":"<ul> <li>madgwick_py: A Python implementation of Madgwick's IMU and AHRS algorithm.</li> <li>madgwick algorithm</li> <li>Kalman Filter for 6DOF IMU Implementation</li> </ul>","tags":["imu","robotics","sensors"]},{"location":"Simulation/","title":"Simulation","text":"<p>Gazebo Classic</p> <p>Gazebo</p> <p>Block 3 Description</p>"},{"location":"Simulation/Gazebo/","title":"Gazebo harmonic","text":"<ul> <li>ROS2 Bridge</li> </ul>","tags":["gazebo","gz","harmonic"]},{"location":"Simulation/Gazebo/ros_gazebo_bridge/","title":"Gazebo harmonic","text":"<p>Gazebo official site</p>","tags":["gazebo","harmonic","gz","simulation","ros","bridge"]},{"location":"Simulation/Gazebo/ros_gazebo_bridge/#install","title":"install","text":"<p>gazebo docs install</p>","tags":["gazebo","harmonic","gz","simulation","ros","bridge"]},{"location":"Simulation/Gazebo/ros_gazebo_bridge/#ros2-bridge","title":"ROS2 bridge","text":"<p>gazebo docs - Installing Gazebo with ROS gazebo docs - Use ROS 2 to interact with Gazebo</p>","tags":["gazebo","harmonic","gz","simulation","ros","bridge"]},{"location":"Simulation/Gazebo/ros_gazebo_bridge/#install_1","title":"Install","text":"<p>Install bridge from osrf repository</p> set gazebo and bridge in dockerfile<pre><code>RUN curl https://packages.osrfoundation.org/gazebo.gpg --output /usr/share/keyrings/pkgs-osrf-archive-keyring.gpg \\\n  &amp;&amp; echo \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/pkgs-osrf-archive-keyring.gpg] http://packages.osrfoundation.org/gazebo/ubuntu-stable $(lsb_release -cs) main\" | sudo tee /etc/apt/sources.list.d/gazebo-stable.list &gt; /dev/null \\\n  &amp;&amp; apt-get update &amp;&amp; apt-get install -q -y --no-install-recommends \\\n  gz-harmonic \\\n  ros-humble-ros-gzharmonic \\\n  &amp;&amp; rm -rf /var/lib/apt/lists/*\n</code></pre> <pre><code>apt-get install ros-humble-ros-gzharmonic\n</code></pre>","tags":["gazebo","harmonic","gz","simulation","ros","bridge"]},{"location":"Simulation/Gazebo/ros_gazebo_bridge/#check","title":"Check","text":"<p>bridge github send message from side to side (no need to run gz sim for this check)</p> <p>send string message from gz to ros and from ros to gz using cli - Run bridge - Pub from GZ echo in ROS - Pub from ROS echo in GZ -  Terminal1: bridge<pre><code>ros2 run ros_gz_bridge parameter_bridge /chatter@std_msgs/msg/String@gz.msgs.StringMsg\n#\n[INFO] [1734974012.615668960] [ros_gz_bridge]: Creating GZ-&gt;ROS Bridge: [/chatter (gz.msgs.StringMsg) -&gt; /chatter (std_msgs/msg/String)] (Lazy 0)\n[INFO] [1734974012.616345817] [ros_gz_bridge]: Creating ROS-&gt;GZ Bridge: [/chatter (std_msgs/msg/String) -&gt; /chatter (gz.msgs.StringMsg)] (Lazy 0)\n</code></pre></p>","tags":["gazebo","harmonic","gz","simulation","ros","bridge"]},{"location":"Simulation/Gazebo/ros_gazebo_bridge/#pub-data-from-gz-to-ros","title":"pub data from gz to ros","text":"Terminal2: ros subscribe<pre><code>ros2 topic echo /chatter\n</code></pre> Terminal3: gz pub<pre><code>gz topic -t /chatter -m gz.msgs.StringMsg -p 'data:\"Hello\"'\n</code></pre>","tags":["gazebo","harmonic","gz","simulation","ros","bridge"]},{"location":"Simulation/Gazebo/ros_gazebo_bridge/#pub-data-from-ros-to-gz","title":"pub data from ros to gz","text":"Terminal2: ros pub<pre><code>ros2 topic pub /chatter std_msgs/msg/String \"data: 'Hi'\"\n</code></pre> Terminal3: gz sub<pre><code>gz topic -e -t /chatter\n</code></pre>","tags":["gazebo","harmonic","gz","simulation","ros","bridge"]},{"location":"Simulation/Gazebo/ros_gazebo_bridge/#send-camera-image","title":"Send camera image","text":"<pre><code>&lt;plugin\n    filename=\"gz-sim-scene-broadcaster-system\"\n    name=\"gz::sim::systems::SceneBroadcaster\"&gt;\n&lt;/plugin&gt;\n\n&lt;plugin\n    filename=\"gz-sim-sensors-system\"\n    name=\"gz::sim::systems::Sensors\"&gt;\n    &lt;render_engine&gt;ogre2&lt;/render_engine&gt;\n&lt;/plugin&gt;\n</code></pre> <p><pre><code>&lt;sensor name=\"camera\" type=\"camera\"&gt;\n    &lt;camera&gt;\n        &lt;horizontal_fov&gt;1.047&lt;/horizontal_fov&gt;\n        &lt;image&gt;\n            &lt;width&gt;320&lt;/width&gt;\n            &lt;height&gt;240&lt;/height&gt;\n        &lt;/image&gt;\n        &lt;clip&gt;\n            &lt;near&gt;0.1&lt;/near&gt;\n            &lt;far&gt;100&lt;/far&gt;\n        &lt;/clip&gt;\n    &lt;/camera&gt;\n    &lt;always_on&gt;1&lt;/always_on&gt;\n    &lt;update_rate&gt;15&lt;/update_rate&gt;\n    &lt;visualize&gt;true&lt;/visualize&gt;\n    &lt;topic&gt;/vehicle/camera&lt;/topic&gt;\n&lt;/sensor&gt;\n</code></pre> <pre><code>gz topic --list\n/clock\n...\n/vehicle/camera\n/vehicle/camera_info\n</code></pre></p> <p>Bridge send data from gz to ros one way</p> <p>Tip</p> <pre><code>parameter_bridge &lt;topic@ROS2_type@gz_type&gt;\n</code></pre> <p>Tip</p> <ul> <li>@  \u2192 a bidirectional bridge, </li> <li>[  \u2192 a bridge from Gazebo to ROS,</li> <li>]  \u2192 a bridge from ROS to Gazebo.</li> </ul> bridge<pre><code>ros2 run ros_gz_bridge parameter_bridge /vehicle/camera@sensor_msgs/msg/Image[gz.msgs.Image\n</code></pre> <pre><code>ros2 topic list\n/parameter_events\n/rosout\n/vehicle/camera\n</code></pre>","tags":["gazebo","harmonic","gz","simulation","ros","bridge"]},{"location":"Simulation/Gazebo/ros_gazebo_bridge/#gazebo","title":"gazebo","text":"","tags":["gazebo","harmonic","gz","simulation","ros","bridge"]},{"location":"Simulation/Gazebo/ros_gazebo_bridge/#rqt","title":"RQT","text":"","tags":["gazebo","harmonic","gz","simulation","ros","bridge"]},{"location":"Simulation/Gazebo/ros_gazebo_bridge/#reference","title":"Reference","text":"<ul> <li>gazebo tests (worlds, plugins)</li> <li>ROS Bridge</li> <li>ROS Bridge yaml</li> <li>bridge launch</li> </ul>","tags":["gazebo","harmonic","gz","simulation","ros","bridge"]},{"location":"Simulation/Gazebo_Classic/","title":"Gazebo Classic","text":"<p>Tips / Settings</p> <p>Sensors</p> <p>TBD</p>","tags":["gazebo"]},{"location":"Simulation/Gazebo_Classic/tips_settings/","title":"Index","text":"","tags":["gazebo","classic","tips"]},{"location":"Simulation/Gazebo_Classic/tips_settings/#send-message-to-subscriber","title":"Send message to subscriber","text":"<pre><code># gz topic -p topic msg_type -m message_data\ngz topic -p \"/gazebo/default/iris_demo/gimbal_tilt_cmd\"  \"gazebo.msgs.GzString\" -m 'data: \"1.0\"'\n</code></pre>","tags":["gazebo","classic","tips"]}]}