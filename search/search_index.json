{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>ROS</p> <p>Simulation</p> <p>Robotics</p> <p>Programming</p> <p>Embedded</p> <p>DevOps</p>"},{"location":"DevOps/","title":"Devops","text":"<p>Docker</p> <p>Linux</p> <p>Networking</p> <p>VSCode</p> <p>GIT</p> <p>TBD</p>"},{"location":"DevOps/docker/","title":"Docker","text":""},{"location":"DevOps/git/","title":"Git","text":"<p>Tips / Settings</p> <p>Git branching</p> <p>TBD</p>","tags":["git"]},{"location":"DevOps/git/branching/","title":"Git branching strategy","text":"","tags":["git","branching"]},{"location":"DevOps/git/branching/#gitflow","title":"Gitflow","text":"Branch main/master stores the currently released version of code and should match the code that is in production. develop stores a copy of the main branch with all additional changes that have been added since the last release feature is the branch where a new feature is developed. release is the branch where the code is prepared for the next release. its merge from develop and ready for test when it done it merge to main and back into develop if any change done, in main it's tag as release (with version) hotfix is the branch where the code is fixed for a bug in the main branch. it's merge to main and back into develop if any change done, in main it's tag as release (with version)","tags":["git","branching"]},{"location":"DevOps/git/branching/#github-flow","title":"Github flow","text":"<p>Github flow is a lightweight, branch-based workflow. It revolves around branching from main and pull requests. </p> <p>A Pull Request (PR) is a request to merge a branch into another branch. It is a way to discuss changes before they are merged into the main branch.</p> <p></p> Branch main stores the last working codebase change/feature Temporary branch for the new feature or bug fix , the branch well be base for pull request and well delete after merging into main branch <p>nameing</p> <p>Name change/feature branch with prefix like:</p> <ul> <li>feature/</li> <li>bugfix/</li> <li>hotfix/</li> </ul>","tags":["git","branching"]},{"location":"DevOps/git/branching/#pull-request","title":"Pull Request","text":"<ul> <li>Unit/Integration test</li> <li>Code review</li> <li>Reference to issue</li> <li>Has a comprehensive description</li> <li>Squashed into single commit</li> </ul> <p>more</p>","tags":["git","branching"]},{"location":"DevOps/linux/","title":"Index","text":"<ul> <li>tmux / tmuxp config and usage</li> </ul>","tags":["linux"]},{"location":"DevOps/linux/linux_tmux_tmuxp/","title":"tmux","text":"","tags":["linux","tmux","tmuxp"]},{"location":"DevOps/linux/linux_tmux_tmuxp/#config","title":"Config","text":"<pre><code># unbind\nunbind C-b\nunbind '\"'\nunbind %\n\n# base1 numbering\nset -g base-index 1\nsetw -g pane-base-index 1\n\n#bind ctrl-a as a prefix\nset-option -g prefix C-a\nbind-key C-a send-prefix\n# kill session\nbind C-c kill-session\n\nbind C-a run \"tmux save-buffer - | xclip -i -sel clipboard\"\n\n# mouse\nset -g mouse on\n\n\n # do like terminator\nbind -n C-E split-window -h\nbind -n C-S-Left resize-pane -L 3\nbind -n C-S-Right resize-pane -R 3\nbind -n C-S-Up resize-pane -U 3\nbind -n C-S-Down resize-pane -D 3\nbind -n C-O split-window -v\n\n# switch panes using Alt-arrow without prefix (not working)\nbind -n M-Left select-pane -L\nbind -n M-Right select-pane -R\nbind -n M-Up select-pane -U\nbind -n M-Down select-pane -D\n\n# Shift arrow to switch windows\n\nbind n next-window\nbind p previous-window\n\nbind c new-window -c \"#{pane_current_path}\"\n\nbind r source-file ~/.tmux.conf\n\n# settings\n</code></pre>","tags":["linux","tmux","tmuxp"]},{"location":"DevOps/vscode/","title":"VSCode","text":"<p>Tips / Settings</p> <p>DevContainer</p> <p>Remote ssh</p>","tags":["vscode"]},{"location":"DevOps/vscode/#video-and-posts","title":"Video and posts","text":"","tags":["vscode"]},{"location":"DevOps/vscode/#copilot","title":"copilot","text":"<ul> <li> Get to know GitHub Copilot in VS Code and be productive IMMEDIATELY </li> <li> What's new with Copilot Chat and VS Code - v1.84 </li> </ul>","tags":["vscode"]},{"location":"DevOps/vscode/dev_container/","title":"VSCode Dev Container","text":"<ul> <li>Run DevContainer on remote host</li> </ul>"},{"location":"DevOps/vscode/dev_container/vscode_devcontainer_remote_host/","title":"Run dev container on remote host","text":"","tags":["vscode","devcontainer","remote"]},{"location":"DevOps/vscode/dev_container/vscode_devcontainer_remote_host/#prepared-host","title":"Prepared host","text":"","tags":["vscode","devcontainer","remote"]},{"location":"DevOps/vscode/dev_container/vscode_devcontainer_remote_host/#ssh-key","title":"SSH key","text":"<pre><code>ssh-keygen -t ed25519 -C \"dev@gmail.com\"\n</code></pre> <pre><code>ssh-copy-id &lt;user&gt;r@&lt;host&gt;\n</code></pre>","tags":["vscode","devcontainer","remote"]},{"location":"DevOps/vscode/dev_container/vscode_devcontainer_remote_host/#prepared-vscode","title":"Prepared VSCode","text":"<ul> <li>install <code>Remote - SSH</code> (ms-vscode-remote.remote-ssh) extension</li> <li>install <code>Dev Containers</code> (ms-vscode-remote.remote-containers) extension</li> </ul> <p>Set docker environment <code>.vscode/setting.json</code></p> <pre><code>{\n    \"docker.environment\": {\n        \"DOCKER_HOST\": \"ssh://user@10.0.0.4\"\n    }\n}\n</code></pre>","tags":["vscode","devcontainer","remote"]},{"location":"DevOps/vscode/dev_container/vscode_devcontainer_remote_host/#devcontainer","title":"Devcontainer","text":"<p>Note</p> <p>Create project folder on the remote machine in the same location like the local machine</p> <p>for example <pre><code>/home/user/projects/vscode_remote_devcontainer\n</code></pre></p> devcontainer.json<pre><code>{\n  \"name\": \"Remote DevContainer\",\n  \"workspaceFolder\": \"/workspaces/vscode_remote_devcontainer\",\n  \"build\": {\n    \"dockerfile\": \"Dockerfile\"\n  },\n  \"remoteUser\": \"user\",\n  \"runArgs\": [\"--network=host\"],\n  \"postCreateCommand\": \"echo 'DevContainer is ready!'\"\n}\n</code></pre>","tags":["vscode","devcontainer","remote"]},{"location":"DevOps/vscode/dev_container/vscode_devcontainer_remote_host/#dockerfile","title":"Dockerfile","text":"<p>Base on ubuntu 22.04 add none root user and install and config <code>sudo</code></p> <pre><code>FROM ubuntu:22.04\n\nARG DEBIAN_FRONTEND=noninteractive\n\nARG USERNAME=user\nARG USER_UID=1000\nARG USER_GID=$USER_UID\n\n# Check if \"ubuntu\" user exists, delete it if it does, then create the desired user\nRUN if getent passwd ubuntu &gt; /dev/null 2&gt;&amp;1; then \\\n        userdel -r ubuntu &amp;&amp; \\\n        echo \"Deleted existing ubuntu user\"; \\\n    fi &amp;&amp; \\\n    groupadd --gid $USER_GID $USERNAME &amp;&amp; \\\n    useradd -s /bin/bash --uid $USER_UID --gid $USER_GID -m $USERNAME &amp;&amp; \\\n    echo \"Created new user $USERNAME\"\n\n# Add sudo support for the non-root user\nRUN apt-get update &amp;&amp; apt-get install -y sudo \\\n  &amp;&amp; echo $USERNAME ALL=\\(root\\) NOPASSWD:ALL &gt; /etc/sudoers.d/$USERNAME\\\n  &amp;&amp; chmod 0440 /etc/sudoers.d/$USERNAME \\\n  &amp;&amp; rm -rf /var/lib/apt/lists/*\n\n\n  ARG DEBIAN_FRONTEND=\n</code></pre>","tags":["vscode","devcontainer","remote"]},{"location":"DevOps/vscode/dev_container/vscode_devcontainer_remote_host/#run","title":"Run","text":"<p>Warning</p> <p>How to sync files from remote to local machine</p>","tags":["vscode","devcontainer","remote"]},{"location":"DevOps/vscode/remote_ssh/","title":"Remote ssh","text":"","tags":["vscode","remote","ssh"]},{"location":"DevOps/vscode/remote_ssh/#tips","title":"Tips","text":"","tags":["vscode","remote","ssh"]},{"location":"DevOps/vscode/remote_ssh/#add-x11-support","title":"Add x11 support","text":"<p>Add ForwardX11 and ForwardX11Trusted to user <code>.ssh/config</code> file</p> <pre><code>Host 10.0.0.4\n  HostName 10.0.0.4\n  User user\n  ForwardX11 yes\n  ForwardX11Trusted yes\n</code></pre>","tags":["vscode","remote","ssh"]},{"location":"DevOps/vscode/tips_settings/","title":"VSCode tips and settings","text":"","tags":["vscode","tips","settings"]},{"location":"DevOps/vscode/tips_settings/#keyboard-shortcuts","title":"keyboard shortcuts","text":"","tags":["vscode","tips","settings"]},{"location":"DevOps/vscode/tips_settings/#vscode-explorer","title":"VSCode explorer","text":"<p>Add <code>new file</code> and <code>new folder</code> keyboard shortcut in file explorer</p> <p>Add <code>key</code> to <code>keybindings.json</code> file <pre><code>{\n    \"key\": \"ctrl+n\",\n    \"command\": \"explorer.newFile\",\n    \"when\": \"explorerViewletFocus\"\n},\n{\n    \"key\": \"ctrl+shift+n\",\n    \"command\": \"explorer.newFolder\",\n    \"when\": \"explorerViewletFocus\"\n},\n</code></pre></p>","tags":["vscode","tips","settings"]},{"location":"DevOps/vscode/tips_settings/#terminal","title":"Terminal","text":"","tags":["vscode","tips","settings"]},{"location":"DevOps/vscode/tips_settings/#run-script-when-terminal-open","title":"run script when terminal open","text":"<pre><code>\"terminal.integrated.profiles.linux\": {\n      \"bash\": {\n          \"path\": \"bash\",\n          \"icon\": \"terminal-bash\",\n          \"args\": [\"--rcfile\", \"&lt;project&gt;/env.sh\"]\n      }\n  }\n</code></pre> <ul> <li>rcfile: specify an alternative initialization file (RC file) to source when starting a new bash session</li> </ul>","tags":["vscode","tips","settings"]},{"location":"Embedded/","title":"Embedded","text":"<p>Arduino</p> <p>ESP32</p> <p>Jetson</p> <p>RPi</p> <p>TBD</p> <p>TBD</p>"},{"location":"Other/","title":"Other","text":"<p>GStreamer</p> <p>Block 2 Description</p> <p>Block 3 Description</p> <p>Block 4 Description</p> <p>Block 5 Description</p> <p>Presentation</p>"},{"location":"Other/Gstreamer/","title":"GStreamer","text":"<ul> <li>Video stream pipes</li> </ul>"},{"location":"Other/Gstreamer/gst_stream_pipes/","title":"GStreamer video stream pipe","text":"","tags":["gst","gstreamer","streaming"]},{"location":"Other/Gstreamer/gst_stream_pipes/#h265-cpu-encoder","title":"H265 cpu encoder","text":"<pre><code>gst-launch-1.0 videotestsrc \\\n! video/x-raw, width=640, height=480, framerate=30/1, format=I420 \\\n! videoconvert \\\n! x265enc tune=zerolatency speed-preset=ultrafast key-int-max=30 bitrate=500 \\\n! rtph265pay config-interval=1 mtu=1400 \\\n! udpsink host=127.0.0.1 port=5000 sync=true\n</code></pre> property description more ... config-interval Send VPS, SPS and PPS Insertion Interval in seconds (default 0) help decoder to interpret video stream <pre><code>## receive\ngst-launch-1.0 udpsrc port=5000 \\\n! application/x-rtp, encoding-name=H265, payload=96 \\\n! rtpjitterbuffer latency=10 \\\n! rtph265depay \\\n! decodebin \\\n! fpsdisplaysink sync=true\n</code></pre>","tags":["gst","gstreamer","streaming"]},{"location":"Other/Gstreamer/gst_stream_pipes/#h265-nvidia-jetson","title":"H265 nvidia jetson","text":"<pre><code>gst-launch-1.0 videotestsrc ! video/x-raw, width=640, height=480, framerate=30/1, format=I420 \\\n! nvvidconv ! 'video/x-raw(memory:NVMM)' \\\n! nvv4l2h265enc preset-level=UltraFastPreset \\\nbitrate=500000 vbv-size=500000 control-rate=GST_V4L2_VIDENC_CONSTANT_BITRATE \\\n! rtph265pay config-interval=1 \\\n! udpsink host=10.0.0.1 port=5000 sync=true\n</code></pre> property description more ... vbv-size Control the encoder buffer size, affecting bitrate variability Smaller values = Stable bitrate (good for live streaming) <pre><code>## receive\ngst-launch-1.0 udpsrc port=5000 \\\n! application/x-rtp, encoding-name=H265, payload=96 \\\n! rtpjitterbuffer latency=10 \\\n! rtph265depay \\\n! decodebin \\\n! fpsdisplaysink sync=true\n</code></pre>","tags":["gst","gstreamer","streaming"]},{"location":"Other/Presentation/","title":"Presentaions","text":"<p>ROS Application from development to deploy using docker and vscode</p> <p>Block 2 Description</p> <p>Block 3 Description</p>"},{"location":"Other/Presentation/presentation_source/ros2_dev_2_deploy/","title":"ROS2 from dev to deploy","text":""},{"location":"Other/Presentation/presentation_source/ros2_dev_2_deploy/#on-nvidia-jetson","title":"on nvidia jetson","text":""},{"location":"Other/Presentation/presentation_source/ros2_dev_2_deploy/#agenda","title":"Agenda","text":"<ul> <li>Dev</li> <li>Build and test</li> <li>Deploy</li> <li>Source control (??)</li> <li>Version control</li> </ul>"},{"location":"Other/Presentation/presentation_source/ros2_dev_2_deploy/#today","title":"Today","text":"<ul> <li>Dev on linux machine as python project (no ROS)</li> <li>Deploy: copy python files to remote system </li> <li>Deploy as ZIP</li> <li>Deploy: Burn pre cocked jetson image</li> </ul>"},{"location":"Other/Presentation/presentation_source/ros2_dev_2_deploy/#docker-as-a-way-of-life","title":"Docker as a way of life","text":"<ul> <li>Dev: using vscode devcontainer</li> <li>Build: using docker to build for different architecture</li> <li>Test: using docker as test environment (allow clean system)</li> <li>Deploy: Deploy the application as cocked docker image </li> </ul>"},{"location":"Other/Presentation/presentation_source/ros2_dev_2_deploy/#dev","title":"Dev","text":"<ul> <li>Using VSCode devcontainer</li> <li>support remote development (run on jetson)</li> <li>Docker hierarchy</li> <li>OS with Chosen ROS version + simulator + common dev tools</li> <li>Project runtime dependencies (runtime/test)</li> <li>Project dev dependencies (dev)</li> <li>Project cycle (forget package and python pip) </li> </ul>"},{"location":"Other/Presentation/presentation_source/ros2_dev_2_deploy/#build","title":"Build","text":"<ul> <li>Cross Compiler</li> <li>Using docker as cross compiler environment</li> <li>using dev docker that build for the jetson arm architecture</li> </ul>"},{"location":"Other/Presentation/presentation_source/ros2_dev_2_deploy/#test","title":"Test","text":"<ul> <li>Using docker as consistent and repetitive environment for testing</li> <li>Use it to test package install tests</li> </ul>"},{"location":"Other/Presentation/presentation_source/ros2_dev_2_deploy/#deploy-find-your-way","title":"Deploy - Find your way","text":"<ul> <li>deb packages</li> <li>docker image</li> <li>jetson image </li> </ul>"},{"location":"Other/Presentation/presentation_source/ros2_dev_2_deploy/#deploy-debian-package","title":"Deploy - debian package","text":"<ul> <li>Standard</li> <li>The linux/debian way </li> <li>every package are installable has version and metadata</li> <li>easy to deploy from remote</li> </ul>"},{"location":"Other/Presentation/presentation_source/ros2_dev_2_deploy/#deploy-jetson-image","title":"Deploy - jetson image","text":"<ul> <li>pre install jetson image with all project dependencies and code</li> <li>Code install as debian package</li> <li>easy to copy</li> <li></li> </ul>"},{"location":"Other/Presentation/presentation_source/ros2_dev_2_deploy/#deploy-with-docker","title":"Deploy - with docker","text":"<ul> <li>Build application docker with all dependencies</li> <li>Easy deploy</li> </ul>"},{"location":"Other/Presentation/presentation_source/ros2_dev_2_deploy/#deploy-with-docker-when","title":"Deploy - with docker - when","text":"<ul> <li>legacy</li> <li>test's</li> <li>mixing system</li> <li>when is no other way</li> </ul>"},{"location":"Other/Presentation/presentation_source/ros2_dev_2_deploy/#deploy-with-docker-why-not","title":"Deploy - with docker - why not","text":"<ul> <li>Hardware issue</li> <li>Hard to deploy from remote</li> </ul>"},{"location":"Other/Presentation/presentation_source/ros2_dev_2_deploy/#version","title":"Version","text":"<ul> <li>Every thing has a version</li> <li>package</li> <li>OS image</li> <li>docker image</li> <li>Every project / application has version page</li> </ul>"},{"location":"Other/Presentation/presentation_source/ros2_dev_2_deploy/#control-after-release","title":"Control after release","text":"<ul> <li>Dev days: yes, we know ourself</li> <li>From release and on:</li> <li>Source control</li> <li>Ticket and issue</li> <li>Code review and test</li> </ul>"},{"location":"Other/Presentation/presentation_source/ros2_dev_2_deploy/#all-fit-together","title":"All fit together","text":"<ul> <li>Build Debian packages</li> <li>Install Packages on the docker image</li> <li>Backup jetson image with docker include </li> </ul>"},{"location":"Other/Presentation/presentation_source/ros2_dev_2_deploy/#final-thought","title":"Final thought","text":"<p> Docker for dev using devcontainer  Docker for build  Docker for test  Docker for production</p>"},{"location":"Programming/","title":"Programing","text":"<p>Python</p> <p>C/CPP</p> <p>Web</p> <p>AI</p> <p>Block 5 Description</p> <p>Block 6 Description</p>"},{"location":"Programming/ai/","title":"AI ML and what inside","text":"<p>Math</p>"},{"location":"Programming/ai/math/","title":"AI Math","text":"<ul> <li>Linear Algebra for Machine Learning</li> </ul>"},{"location":"Programming/python/","title":"Python","text":""},{"location":"ROS/","title":"ROS","text":"<p>Python</p> <p>C/CPP</p> <p>ROS Eco</p> <p>Block 4 Description</p> <p>Block 5 Description</p> <p>Zenoh</p>"},{"location":"ROS/ros_eco/","title":"ROS Eco system","text":"<p>Ros packages and tools that are used in the ROS eco system.</p> <p>ROS2 launch</p> <p>ROS2 Control</p> <p>ROS2 Packages</p> <p>launch</p>"},{"location":"ROS/ros_eco/launch/","title":"ROS launch","text":"<pre><code>from launch import LaunchDescription\nfrom launch_ros.actions import Node\n\ndef generate_launch_description():\n    ld = LaunchDescription()\n\n    node = Node(\n        package='your_package_name',\n        executable='your_node_executable',\n        name='your_node_name',\n        output='screen'\n    )\n\n    ld.add_action(node)\n\n    return ld\n</code></pre> <pre><code>install(DIRECTORY launch/\n  DESTINATION share/${PROJECT_NAME}/launch\n)\n</code></pre>","tags":["ros","launch"]},{"location":"ROS/ros_eco/packages/","title":"ROS Eco system","text":"<p>Ros packages and tools that are used in the ROS eco system.</p> <p>Diagnostics</p> <p>TBD</p> <p>TBD</p> <p>TBD</p> <p>TBD</p> <p>TBD</p>"},{"location":"ROS/ros_eco/packages/diagnostics/","title":"ROS diagnostics","text":"<p>ROS diagnostics gives you the ability to monitor your system. There are two components in its architecture:</p> <ul> <li>updater</li> <li>aggregator</li> </ul> <p>The updater publishes diagnostic status messages on the <code>/diagnostics</code> topic, and the aggregator listens to these statuses, aggregates them, and publishes the results on the <code>/diagnostics_agg</code> topic.</p> <p>A system can have multiple updaters. They are meant to communicate with devices such as motors, sensors, computers, batteries, etc, in order to retrieve and publish relevant status data. The information being published on the /diagnostics topic is flat  </p> <p>The aggregator collects, categorizes, and groups the statuses from all the system components. You can take a look at what is being published on the /diagnostics and /diagnostics_agg topics with the rqt_runtime_monitor and rqt_robot_monitor tools</p>","tags":["ros","diagnostics"]},{"location":"ROS/ros_eco/packages/diagnostics/#diagnostictask","title":"DiagnosticTask","text":"<p>DiagnosticTask is an abstract base class for collecting diagnostic data. </p> <p>A DiagnosticTask has a name, and a function that is called to create a DiagnosticStatusWrapper. </p> <p>DiagnosticsTask subclass by</p> <ul> <li>CompositeDiagnosticTask</li> <li>FrequencyStatus</li> <li>GenericFunctionDiagnosticTask</li> <li>Heartbeat</li> <li>TimeStampStatus</li> </ul>","tags":["ros","diagnostics"]},{"location":"ROS/ros_eco/packages/diagnostics/#diagnostics_msg","title":"diagnostics_msg","text":"<ul> <li>DiagnosticStatus.msg</li> <li>DiagnosticArray</li> </ul> <pre><code>octet OK=0\noctet WARN=1\noctet ERROR=2\noctet STALE=3\noctet level\nstring name\nstring message\nstring hardware_id\ndiagnostic_msgs/msg/KeyValue[] values\n</code></pre>","tags":["ros","diagnostics"]},{"location":"ROS/ros_eco/packages/diagnostics/#diagnostic_aggregator","title":"diagnostic_aggregator","text":"<p>Aggregator is a node that subscribes to <code>/diagnostics</code>, processes it and republishes aggregated data on <code>/diagnostics_agg</code>.</p> <p>The aggregator creates a series of analyzers to handle incoming <code>DiagnosticStatus</code></p> <p>API</p> <p></p>","tags":["ros","diagnostics"]},{"location":"ROS/ros_eco/packages/diagnostics/#diagnostics-viewers","title":"diagnostics viewers","text":"install<pre><code>sudo apt install ros-humble-rqt-robot-monitor\nsudo apt install ros-humble-rqt-runtime-monitor\n</code></pre>","tags":["ros","diagnostics"]},{"location":"ROS/ros_eco/packages/diagnostics/#demos","title":"Demos","text":"<ul> <li>Diagnostic status function - - minimal implementation as diagnostic function</li> <li>DiagnosticTask class - minimal implementation as diagnostic task class</li> <li>Builtin tasks (FrequencyStatus)</li> <li>Remove task</li> <li>Composite task</li> </ul>","tags":["ros","diagnostics"]},{"location":"ROS/ros_eco/packages/diagnostics/#reference","title":"Reference","text":"<ul> <li>REP-107 Diagnostic System for Robots Running ROS</li> <li>ros diagnostic</li> <li>wiki</li> <li>python example</li> </ul>","tags":["ros","diagnostics"]},{"location":"ROS/ros_eco/packages/diagnostics/#projects-to-check","title":"projects to check","text":"<ul> <li>rviz_2d_overlay_plugins)</li> </ul>","tags":["ros","diagnostics"]},{"location":"Robotics/","title":"Robotics","text":"<p>sensors</p> <p>Block 2 Description</p> <p>Block 3 Description</p> <p>Block 4 Description</p> <p>Block 5 Description</p> <p>Block 6 Description</p>"},{"location":"Robotics/sensors/","title":"Sensors","text":"<p>imu</p> <p>Block 2 Description</p> <p>Block 3 Description</p> <p>Block 4 Description</p> <p>Block 5 Description</p> <p>Block 6 Description</p>"},{"location":"Robotics/sensors/imu/","title":"IMU","text":"","tags":["imu","robotics","sensors"]},{"location":"Robotics/sensors/imu/#to-read-and-watch","title":"To read and watch","text":"<ul> <li>madgwick_py: A Python implementation of Madgwick's IMU and AHRS algorithm.</li> <li>madgwick algorithm</li> <li>Kalman Filter for 6DOF IMU Implementation</li> </ul>","tags":["imu","robotics","sensors"]},{"location":"Simulation/","title":"Simulation","text":"<p>Gazebo Classic</p> <p>Gazebo</p> <p>Block 3 Description</p>"}]}